<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 16934048f79c6e117cd16a23c09c1b2ea502e284 Maintainer: mumumu Status: ready -->
<sect1 xml:id="language.operators.precedence">
 <title>演算子の優先順位</title>
 <titleabbrev>演算子の優先順位</titleabbrev>
 <para>
  演算子の優先順位は、二つの式が"緊密に"結合している度合いを指定します。
  例えば、式 <literal>1 + 5 * 3</literal> の答えは
  <literal>16</literal> になり、<literal>18</literal> とはなりません。
  これは乗算演算子("*")は、加算演算子("+")より高い優先順位を有するか
  らです。必要に応じて強制的に優先順位を設定するために括弧を使用する
  ことが可能です。例えば、<literal>18</literal>と評価するためには、
  <literal>(1 + 5) * 3</literal> とします。
 </para>
 <para>
  演算子の優先順位が等しい場合は、その結合性によって評価順
  (右から評価するのか、あるいは左から評価するのか) が決まります。
  たとえば "-" は左結合なので、
  <literal>1 - 2 - 3</literal> は <literal>(1 - 2) - 3</literal> とグループ分けされて、
  評価結果は <literal>-4</literal> になります。
  一方、"=" は右結合です。つまり <literal>$a = $b = $c</literal> のグループ分けは
  <literal>$a = ($b = $c)</literal> となります。
 </para>
 <para>
  優先順位が同じで結合しない演算子を並べることはできません。つまり、たとえば
  <literal>1 &lt; 2 &gt; 1</literal> は PHP では無効になります。
  一方 <literal>1 &lt;= 1 == 1</literal> は問題ありません。
  <literal>==</literal> 演算子の優先順位が
  <literal>&lt;=</literal> 演算子より低いからです。
 </para>
 <para>
  演算子の結合は、
  二項演算子(および三項演算子) の場合にだけ意味があります。
  単項演算子は、前置または後置しかないため、
  演算子の結合の考え方は適用できません。
  たとえば、
  <literal>!!$a</literal> は、
  <literal>!(!$a)</literal> という形でのみグループ化できます。
 </para>
 <para>
  厳密には不要な場所であっても、括弧をつけておけばコードの可読性があがります。
  明示的にグループ分けをしておくことで、演算子の優先順位や結合性による暗黙のグループ分けに頼らずに済むからです。
 </para>
 <para>
  次の表では、優先順位が高い順に演算子を挙げています。
  同じ行にある演算子は優先順位が等しくなります。そのような場合は、
  結合時の評価にしたがってグループ分けが決まります。
  <table>
   <title>演算子の優先順位</title>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>結合時の評価</entry>
      <entry>演算子</entry>
      <entry>追加情報</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>(n/a)</entry>
      <entry>
       <literal>clone</literal>
       <literal>new</literal>
      </entry>
      <entry><link linkend="language.oop5.cloning">clone</link> および <link linkend="language.oop5.basic.new">new</link></entry>
     </row>
     <row>
      <entry>right</entry>
      <entry><literal>**</literal></entry>
      <entry><link linkend="language.operators.arithmetic">算術演算子</link></entry>
     </row>
     <row>
      <entry>(n/a)</entry>
      <entry>
       <literal>+</literal> 
       <literal>-</literal> 
       <literal>++</literal> 
       <literal>--</literal> 
       <literal>~</literal> 
       <literal>(int)</literal> 
       <literal>(float)</literal> 
       <literal>(string)</literal> 
       <literal>(array)</literal>
       <literal>(object)</literal> 
       <literal>(bool)</literal> 
       <literal>@</literal>
      </entry>
      <entry>
       <link linkend="language.operators.arithmetic">算術演算子</link> (単項演算の <literal>+</literal> と <literal>-</literal>),
       <link linkend="language.operators.increment">加算子/減算子</link>,
       <link linkend="language.operators.bitwise">ビット演算子</link>,
       <link linkend="language.types.typecasting">型の相互変換</link>&listendand;
       <link linkend="language.operators.errorcontrol">エラー制御演算子</link>
      </entry>
     </row>
     <row>
      <entry>left</entry>
      <entry><literal>instanceof</literal></entry>
      <entry>
       <link linkend="language.operators.type">型演算子</link>
      </entry>
     </row>
     <row>
      <entry>(n/a)</entry>
      <entry><literal>!</literal></entry>
      <entry>
       <link linkend="language.operators.logical">論理演算子</link>
      </entry>
     </row>
     <row>
      <entry>left</entry>
      <entry>
       <literal>*</literal>
       <literal>/</literal>
       <literal>%</literal>
      </entry>
      <entry>
       <link linkend="language.operators.arithmetic">算術演算子</link>
      </entry>
     </row>
     <row>
      <entry>left</entry>
      <entry>
       <literal>+</literal> 
       <literal>-</literal> 
       <literal>.</literal>
      </entry>
      <entry>
       <link linkend="language.operators.arithmetic">算術演算子</link> (二項演算の <literal>+</literal> と <literal>-</literal>),
       <link linkend="language.operators.array">配列演算子</link>&listendand;
       <link linkend="language.operators.string">文字列演算子</link> (PHP 8.0.0 より前のバージョンの<literal>.</literal>)
      </entry>
     </row>
     <row>
      <entry>left</entry>
      <entry>
       <literal>&lt;&lt;</literal> 
       <literal>&gt;&gt;</literal>
      </entry>
      <entry>
       <link linkend="language.operators.bitwise">ビット演算子</link>
      </entry>
     </row>
     <row>
      <entry>left</entry>
      <entry><literal>.</literal></entry>
      <entry>
       <link linkend="language.operators.string">文字列演算子</link> (PHP 8.0.0 以降)
      </entry>
     </row>
     <row>
      <entry>結合しない</entry>
      <entry>
       <literal>&lt;</literal> 
       <literal>&lt;=</literal> 
       <literal>&gt;</literal> 
       <literal>&gt;=</literal>
      </entry>
      <entry>
       <link linkend="language.operators.comparison">比較演算子</link>
      </entry>
     </row>
     <row>
      <entry>結合しない</entry>
      <entry>
       <literal>==</literal>
       <literal>!=</literal> 
       <literal>===</literal> 
       <literal>!==</literal> 
       <literal>&lt;&gt;</literal>
       <literal>&lt;=&gt;</literal>
      </entry>
      <entry>
       <link linkend="language.operators.comparison">比較演算子</link>
      </entry>
     </row>
     <row>
      <entry>left</entry>
      <entry><literal>&amp;</literal></entry>
      <entry>
       <link linkend="language.operators.bitwise">ビット演算子</link>&listendand; 
       <link linkend="language.references">リファレンス</link></entry>
     </row>
     <row>
      <entry>left</entry>
      <entry><literal>^</literal></entry>
      <entry>
       <link linkend="language.operators.bitwise">ビット演算子</link>
      </entry>
     </row>
     <row>
      <entry>left</entry>
      <entry><literal>|</literal></entry>
      <entry>
       <link linkend="language.operators.bitwise">ビット演算子</link>
      </entry>
     </row>
     <row>
      <entry>left</entry>
      <entry><literal>&amp;&amp;</literal></entry>
      <entry>
       <link linkend="language.operators.logical">論理演算子</link>
      </entry>
     </row>
     <row>
      <entry>left</entry>
      <entry><literal>||</literal></entry>
      <entry>
       <link linkend="language.operators.logical">論理演算子</link>
      </entry>
     </row>
     <row>
      <entry>right</entry>
      <entry><literal>??</literal></entry>
      <entry>
       <link linkend="language.operators.comparison.coalesce">NULL合体演算子</link>
      </entry>
     </row>
     <row>
      <entry>結合しない</entry>
      <entry><literal>? :</literal></entry>
      <entry>
       <link linkend="language.operators.comparison.ternary">三項演算子</link>
       (PHP 8.0.0 より前のバージョンでは、左結合でした)
      </entry>
     </row>
     <row>
      <entry>right</entry>
      <entry>
       <literal>=</literal> 
       <literal>+=</literal> 
       <literal>-=</literal> 
       <literal>*=</literal> 
       <literal>**=</literal> 
       <literal>/=</literal> 
       <literal>.=</literal> 
       <literal>%=</literal> 
       <literal>&amp;=</literal> 
       <literal>|=</literal> 
       <literal>^=</literal> 
       <literal>&lt;&lt;=</literal> 
       <literal>&gt;&gt;=</literal>
       <literal>??=</literal>
      </entry>
      <entry>
       <link linkend="language.operators.assignment">代入演算子</link>
      </entry>
     </row>
     <row>
      <entry>(n/a)</entry>
      <entry><literal>yield from</literal></entry>
      <entry>
       <link linkend="control-structures.yield.from">yield from</link>
      </entry>
     </row>
     <row>
      <entry>(n/a)</entry>
      <entry><literal>yield</literal></entry>
      <entry>
       <link linkend="control-structures.yield">yield</link>
      </entry>
     </row>
     <row>
      <entry>(n/a)</entry>
      <entry><literal>print</literal></entry>
      <entry><function>print</function></entry>
     </row>
     <row>
      <entry>left</entry>
      <entry><literal>and</literal></entry>
      <entry>
       <link linkend="language.operators.logical">論理演算子</link>
      </entry>
     </row>
     <row>
      <entry>left</entry>
      <entry><literal>xor</literal></entry>
      <entry>
       <link linkend="language.operators.logical">論理演算子</link>
      </entry>
     </row>
     <row>
      <entry>left</entry>
      <entry><literal>or</literal></entry>
      <entry>
       <link linkend="language.operators.logical">論理演算子</link>
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>
 </para>
 <para>
  <example>
   <title>結合時の評価</title>
   <programlisting role="php">
<![CDATA[
<?php
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
var_dump($a);

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5
var_dump($a, $b);
?>
]]>
   </programlisting>
  </example>
 </para>
 <para>
  三項演算子は特に、優先順位を明確にするための括弧が必要となります。
 </para>
 <para>
  <example>
   <title>優先順位の明示</title>
   <programlisting role="php">
<![CDATA[
<?php
$a = true ? 0 : (true ? 1 : 2);
var_dump($a);

// PHP 8 以降は以下のように書くことはできません
// $a = true ? 0 : true ? 1 : 2;
?>
]]>
   </programlisting>
  </example>
 </para>
 <para>
  演算子の優先順位や結合性は、あくまでも式のグループ分けだけを決めるものであり、評価順を決めるものではありません。
  PHP では一般に、式をどの順番で評価するかは決めていません。
  そのため、特定の順序で式が評価されることを前提としたコードを書いてはいけません。
  PHP のバージョンが変わったり前後のコードが変わったりしたときに、評価順が変わる可能性があるからです。
  <example>
   <title>評価順序は未定義</title>
   <programlisting role="php" annotations="non-interactive">
<![CDATA[
<?php
$a = 1;
echo $a + $a++; // 2 になるかもしれないし、3 になるかもしれません

$i = 1;
$array[$i] = $i++; // インデックス 1 をセットするかもしれないし、インデックス 2 をセットするかもしれません
?>
]]>
   </programlisting>
  </example>
  <example>
   <title><literal>+</literal>、<literal>-</literal>、<literal>.</literal> の優先順位</title>
   <programlisting role="php">
<![CDATA[
<?php
$x = 4;
// 次の行は、予期せぬ結果になることでしょう
echo "x minus one equals " . $x-1 . ", or so I hope\n";

// 期待どおりの結果を得るには、括弧を使って優先順位を指定します
echo "x minus one equals " . ($x-1) . ", or so I hope\n";

// このようにはできず、TypeError がスローされます
echo (("x minus one equals " . $x) - 1) . ", or so I hope\n";
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
-1, or so I hope
-1, or so I hope
Fatal error: Uncaught TypeError: Unsupported operand types: string - int
]]>
   </screen>
  </example>
  <example>
   <title>PHP 8 より前のバージョンでは、 <literal>+</literal>, <literal>-</literal> and <literal>.</literal> の優先順位は同じ</title>
   <programlisting role="php" annotations="non-interactive">
<![CDATA[
<?php
$x = 4;
// 次の行は、予期せぬ結果になることでしょう
echo "x minus one equals " . $x-1 . ", or so I hope\n";

// なぜなら、これは次のように評価されるからです(PHP 8.0.0 より前のバージョン)
echo (("x minus one equals " . $x) - 1) . ", or so I hope\n";

// 期待どおりの結果を得るには、括弧を使って優先順位を指定します
echo "x minus one equals " . ($x-1) . ", or so I hope\n";
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
-1, or so I hope
-1, or so I hope
x minus one equals 3, or so I hope
]]>
   </screen>
  </example>
 </para>
 <note>
  <para>
   <literal>=</literal> は他のほとんどの演算子よりも優先順位が低いはずなのにもかかわらず、
   PHP は依然として <literal>if (!$a = foo())</literal>
   のような式も許します。この場合は <literal>foo()</literal> の戻り値が
   <varname>$a</varname> に代入されます。
  </para>
 </note>
 <sect2 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>8.0.0</entry>
      <entry>
       文字列の連結 (<literal>.</literal>) 
       の優先順位は、
       算術演算子の加算/減算
       (<literal>+</literal> および <literal>-</literal>)
       と ビットシフト演算子
       (<literal>&lt;&lt;</literal> および <literal>&gt;&gt;</literal>);
       よりも低くなりました。
       これより前のバージョンでは、文字列の連結は
       <literal>+</literal> と <literal>-</literal>
       と同じ優先順位を持ち、
       <literal>&lt;&lt;</literal> と <literal>&gt;&gt;</literal>
       よりは高い優先順位を持っていました。
      </entry>
     </row>
     <row>
      <entry>8.0.0</entry>
      <entry>
       三項演算子 (<literal>? :</literal>) は、
       どの演算とも結合しなくなりました。
       これより前のバージョンでは、左結合でした。
      </entry>
     </row>
     <row>
      <entry>7.4.0</entry>
      <entry>
       三項演算子(<literal>? :</literal>) が左結合であることに依存すること、
       つまり、括弧で囲わずに三項演算子をネストすることは推奨されなくなりました。
      </entry>
     </row>
     <row>
      <entry>7.4.0</entry>
      <entry>
       文字列の連結 (<literal>.</literal>) 演算と、
       算術演算子の加算/減算
       (<literal>+</literal> および <literal>-</literal>)
       と ビットシフト演算子
       (<literal>&lt;&lt;</literal> および <literal>&gt;&gt;</literal>);
       の優先順位に依存するコードは、推奨されなくなりました。
       つまり、これらを括弧を使わずに一緒に使うことは推奨されなくなりました。
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </sect2>
</sect1>
