<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 351500 $ -->
<!-- EN-Revision: 497c40ac164d5873fd87f622dfdeb5206392b446 Maintainer: mumumu Status: ready -->

<sect1 xml:id="migration80.new-features" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>新機能</title>

 <sect2 xml:id="migration80.new-features.core">
  <title>PHP コア</title>

  <sect3 xml:id="migration80.new-features.core.named-arguments">
   <title>名前付き引数</title>

   <para>
    <!-- RFC: https://wiki.php.net/rfc/named_params -->
    <link linkend="functions.named-arguments">名前付き引数</link> のサポートが追加されました。
   </para>
  </sect3>

  <sect3 xml:id="migration80.new-features.core.attributes">
   <title>アトリビュート</title>

   <para>
    <link linkend="language.attributes">アトリビュート</link> のサポートが追加されました。
    <!-- RFC: https://wiki.php.net/rfc/attributes_v2 -->
    <!-- RFC: https://wiki.php.net/rfc/attribute_amendments -->
    <!-- RFC: https://wiki.php.net/rfc/shorter_attribute_syntax -->
    <!-- RFC: https://wiki.php.net/rfc/shorter_attribute_syntax_change -->
   </para>
  </sect3>

  <sect3 xml:id="migration80.new-features.core.property-promotion">
   <title>コンストラクタのプロパティ昇格機能</title>

   <para>
     <link linkend="language.oop5.decon.constructor.promotion">コンストラクタの引数をプロパティへ昇格させる機能</link> が追加されました。
    <!-- RFC: https://wiki.php.net/rfc/constructor_promotion -->
   </para>
  </sect3>

  <sect3 xml:id="migration80.new-features.core.union-types">
   <title>union 型</title>

   <para>
    <link linkend="language.types.declarations.composite.union">union 型</link> のサポートが追加されました。
    <!-- RFC: https://wiki.php.net/rfc/union_types_v2 -->
   </para> 
  </sect3>

  <sect3 xml:id="migration80.new-features.core.match">
   <title>match 式</title>

   <para>
    <link linkend="control-structures.match"><literal>match</literal> 式</link> のサポートが追加されました。
    <!-- RFC: https://wiki.php.net/rfc/match_expression_v2 -->
   </para>
  </sect3>

  <sect3 xml:id="migration80.new-features.core.nullsafe-operator">
   <title>nullsafe 演算子</title>

   <para>
     <link linkend="language.oop5.basic.nullsafe">nullsafe 演算子</link> (<literal>?-></literal>) のサポートが追加されました。
    <!-- RFC: https://wiki.php.net/rfc/nullsafe_operator -->
   </para>
  </sect3>

  <sect3 xml:id="migration80.new-features.core.others">
   <title>その他の新機能</title>

   <itemizedlist>
    <listitem>
     <para>
      <link linkend="class.weakmap">WeakMap</link> クラスが追加されました。
      <!-- RFC: https://wiki.php.net/rfc/weak_maps -->
     </para>
    </listitem>
    <listitem>
     <para>
      <classname>ValueError</classname> クラスが追加されました。
     </para>
    </listitem>
    <listitem>
     <para>
      任意の数の関数の引数が、可変長引数に置き換えられるようになりました。
      但し、型に互換性がある場合に限ります。
      たとえば、次のようなコードが書けるようになります:
     </para>
     <para>
      <programlisting role="php">
<![CDATA[
<?php
class A {
     public function method(int $many, string $parameters, $here) {}
}
class B extends A {
     public function method(...$everything) {}
}
?>
]]>
      </programlisting>
     </para>
    </listitem>
    <listitem>
     <para>
      以下のようにして、<type>static</type> ("遅延静的束縛"における) 型が、
      戻り値の型として使えるようになりました:
     </para>
     <para>
      <programlisting role="php">
<![CDATA[
<?php
class Test {
     public function create(): static {
          return new static();
     }
}
?>
]]>
      </programlisting>
      <!-- RFC: https://wiki.php.net/rfc/static_return_type -->
     </para>
    </listitem>
    <listitem>
     <para>
      オブジェクトのクラス名を <code>$object::class</code> と書くことで取得できるようになりました。
      この結果は、<code>get_class($object)</code> と同じです。
      <!-- RFC: https://wiki.php.net/rfc/class_name_literal_on_object -->
     </para>
    </listitem>
    <listitem>
     <para>
      &new; と &instanceof; が、
      <code>new (expression)(...$args)</code> や <code>$obj instanceof (expression)</code>
     という形で、任意の式と一緒に使えるようになりました。
      <!-- RFC: https://wiki.php.net/rfc/variable_syntax_tweaks -->
     </para>
    </listitem>
    <listitem>
     <para>
      変数の文法に一貫性を持たせるため、いくつかの修正が適用されます。
      たとえば、<code>Foo::BAR::$baz</code> のような書き方が許可されるようになりました。
      <!-- RFC: https://wiki.php.net/rfc/variable_syntax_tweaks -->
     </para>
    </listitem>
    <listitem>
     <para>
      インターフェイス <interfacename>Stringable</interfacename> が追加されました。
      クラスが <link linkend="object.tostring">__toString()</link> メソッドを定義していた場合、
      このインターフェイスが自動的に実装されます。
      <!-- RFC: https://wiki.php.net/rfc/stringable -->
     </para>
    </listitem>
    <listitem>
     <para>
      トレイトで、private な抽象メソッドを定義できるようになりました。
      このメソッドは、トレイトを使うクラスで実装されなければなりません。
      <!-- RFC: https://wiki.php.net/rfc/abstract_trait_method_validation -->
     </para>
    </listitem>
    <listitem>
     <para>
      <literal>throw</literal> が式として使えるようになりました。
      これによって、以下のような書き方ができるようになります:
      <programlisting role="php">
<![CDATA[
<?php
$fn = fn() => throw new Exception('Exception in arrow function');
$user = $session->user ?? throw new Exception('Must have user');
]]>
      </programlisting>
      <!-- RFC: https://wiki.php.net/rfc/throw_expression -->
     </para>
    </listitem>
    <listitem>
     <para>
      引数のリストに付ける最後のカンマも、オプションで許可されるようになりました。
      <programlisting role="php">
<![CDATA[
<?php
function functionWithLongSignature(
    Type1 $parameter1,
    Type2 $parameter2, // <-- このカンマが許可されるようになりました
) {
}
]]>
      </programlisting>
      <!-- RFC: https://wiki.php.net/rfc/trailing_comma_in_parameter_list -->
     </para>
    </listitem>
    <listitem>
     <para>
      変数に保存せずに、
      例外をキャッチするために、<code>catch (Exception)</code> というコードが書けるようになりました。
      <!-- RFC: https://wiki.php.net/rfc/non-capturing_catches -->
     </para>
    </listitem>
    <listitem>
     <para>
      <type>mixed</type> 型のサポートが追加されました。
      <!-- RFC: https://wiki.php.net/rfc/mixed_type_v2 -->
     </para>
    </listitem>
    <listitem>
     <para>
      親クラスで宣言された private メソッドは、
      子クラスのメソッドに対して継承ルールを強制しなくなりました(
      private final と宣言されたコンストラクタは例外です)。
      次の例は、どういった制限がなくなるのかを示しています:
      <programlisting role="php">
<![CDATA[
<?php
class ParentClass {
    private function method1() {}
    private function method2() {}
    private static function method3() {}
    // "final" が意味をなさなくなったので、警告が発生します:
    private final function method4() {}
}
class ChildClass extends ParentClass {
    // 親クラスの private メソッドとアクセス権の修飾子が異なっている
    // 以下の全ての宣言が許されるようになりました。
    public abstract function method1() {}
    public static function method2() {}
    public function method3() {}
    public function method4() {}
}
?>
]]>
      </programlisting>
      <!-- RFC: https://wiki.php.net/rfc/inheritance_private_methods -->
     </para>
    </listitem>
    <listitem>
     <para>
      <code>(int) $resource</code> と同じ値を返す <function>get_resource_id</function> 関数が追加されました。
     よりわかりやすいAPIで、同じ機能を提供するものです。
     </para>
    </listitem>
    <listitem>
     <para>
      <classname>InternalIterator</classname> が追加されました。
     </para>
    </listitem>
   </itemizedlist>
  </sect3>
 </sect2>

 <sect2 xml:id="migration80.new-features.date">
  <title>日付と時刻</title>
  
  <itemizedlist>
   <listitem>
    <para>
     <methodname>DateTime::createFromInterface</methodname> と
     <methodname>DateTimeImmutable::createFromInterface</methodname> が追加されました。

    </para>
   </listitem>
   <listitem>
    <para>
     DateTime のフォーマット指定子 <literal>p</literal> が追加されました。
     これは <literal>P</literal> と同じですが、
     UTC の <literal>+00:00</literal> ではなく、
     <literal>Z</literal> を返します。
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.new-features.dom">
  <title>DOM</title>

  <para>
   新しいDOMの走査と管理を行う API を持つ
   <interfacename>DOMParentNode</interfacename> と <interfacename>DOMChildNode</interfacename>
   が追加されました。
   <!-- RFC: https://wiki.php.net/rfc/dom_living_standard_api-->
  </para>
 </sect2>

 <sect2 xml:id="migration80.new-features.filter">
  <title>フィルタ</title>

  <para>
   <constant>FILTER_VALIDATE_BOOLEAN</constant> のエイリアスとして、
   <constant>FILTER_VALIDATE_BOOL</constant> が追加されました。
   新しい名前のほうが望ましいです。なぜなら、
   正規化された型の名前を使っているからです。
  </para>
 </sect2>

 <sect2 xml:id="migration80.new-features.enchant">
  <title>Enchant</title>

  <para>
   <function>enchant_dict_add</function>, <function>enchant_dict_is_added</function>,
   <constant>LIBENCHANT_VERSION</constant> が追加されました。
  </para>
 </sect2>

 <sect2 xml:id="migration80.new-features.fpm">
  <title>FPM</title>

  <para>
   新しいオプション <literal>pm.status_listen</literal> が追加されました。
   これによって、異なるエンドポイント(例: ポートやUDSファイル)から、
   ステータスを取得することが出来るようになります。
   実行時間がかかっているリクエストを処理しているために、全ての子プロセスがビジーである場合、
   ステータスを取得するのに役立ちます。
  </para>
 </sect2>

 <sect2 xml:id="migration80.new-features.hash">
  <title>Hash</title>

  <para>
   <classname>HashContext</classname> オブジェクトが、シリアライズ出来るようになりました。
  </para>
 </sect2>

 <sect2 xml:id="migration80.new-features.intl">
  <title>国際化関数</title>

  <para>
   定数 <constant>IntlDateFormatter::RELATIVE_FULL</constant>,
   <constant>IntlDateFormatter::RELATIVE_LONG</constant>,
   <constant>IntlDateFormatter::RELATIVE_MEDIUM</constant>,
   <constant>IntlDateFormatter::RELATIVE_SHORT</constant> が追加されました。
  </para>
 </sect2>

 <sect2 xml:id="migration80.new-features.ldap">
  <title>LDAP</title>

  <para>
   検索結果に含まれる参照メッセージの数を返す <function>ldap_count_references</function> が追加されました。
  </para>
 </sect2>
 <sect2 xml:id="migration80.new-features.opcache">
  <title>OPcache</title>

  <para>
   <!--<link linkend="ini.opcache.record-warnings">-->opcache.record_warnings<!--</link>-->
   INI ディレクティブが有効になっている場合、
   OPcache はコンパイル時の警告を記録し、次に include されたときにそれを繰り返します。
   これは、たとえキャッシュから情報を得た場合でも同じです。
  </para>
 </sect2>

 <sect2 xml:id="migration80.new-features.openssl">
  <title>OpenSSL</title>

  <para>
   暗号化メッセージ構文(CMS)
   (<link xlink:href="&url.rfc;5652">RFC 5652</link>) のサポートが追加されました。
   これは、暗号化、復号化、署名、検証と読み込みの関数が含まれます。
   API は <acronym>PKCS</acronym> #7 の関数と似ていますが、新しいエンコーディングの定数が追加されています:
   <constant>OPENSSL_ENCODING_DER</constant>, <constant>OPENSSL_ENCODING_SMIME</constant>
   <constant>OPENSSL_ENCODING_PEM</constant> です。
   <simplelist>
    <member>
     証明書を使ってファイル中のメッセージを暗号化し、
     結果を指定されたファイルに出力する <function>openssl_cms_encrypt</function> が追加されました。
    </member>
    <member>
     ファイル中の S/MIME メッセージを復号化し、
     結果を指定されたファイルに出力する <function>openssl_cms_decrypt</function> が追加されました。
    </member>
    <member>
     CMSファイルを <acronym>PEM</acronym> 証明書の配列にエクスポートする <function>openssl_cms_read</function> が追加されました。
    </member>
    <member>
     証明書と鍵を使ってファイル中のMIMEメッセージに署名し、
     結果を指定されたファイルに出力する <function>openssl_cms_sign</function> が追加されました。
    </member>
    <member>
     データブロックが無傷なことや、
     署名した人がその人であることを検証し、
     署名した人の証明書を返す <function>openssl_cms_verify</function> が追加されました。
    </member>
   </simplelist>
  </para>
 </sect2>

 <sect2 xml:id="migration80.new-features.pcre">
  <title>正規表現 (Perl互換)</title>

  <para>
   直近で発生した PCRE に関するエラーを人間が読みやすいメッセージとして返す
   <function>preg_last_error_msg</function> が追加されました。
   これは、整数の enum を返していた <function>preg_last_error</function> を補完するものです。
  </para>
 </sect2>

 <sect2 xml:id="migration80.new-features.reflection">
  <title>リフレクション</title>

  <itemizedlist>
   <listitem>
    <para>
     以下のメソッドは、内部関数の引数のデフォルト値に関する情報を返すようになりました:
    </para>
    <para>
     <simplelist>
      <member><methodname>ReflectionParameter::isDefaultValueAvailable</methodname></member>
      <member><methodname>ReflectionParameter::getDefaultValue</methodname></member>
      <member><methodname>ReflectionParameter::isDefaultValueConstant</methodname></member>
      <member><methodname>ReflectionParameter::getDefaultValueConstantName</methodname></member>
     </simplelist>
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.new-features.sqlite3">
  <title>SQLite3</title>

  <para>
   データベース上で認証する用途に使う、
   ユーザー空間のコールバックを設定する <methodname>SQLite3::setAuthorizer</methodname> と、
   それに対応するクラス定数が追加されました。
   <!-- PR: https://github.com/php/php-src/pull/4797 -->
  </para>
 </sect2>

 <sect2 xml:id="migration80.new-features.standard">
  <title>標準ライブラリ</title>

  <itemizedlist>
   <listitem>
    <para>
     文字列に <parameter>needle</parameter> が含まれているかどうかを調べる
     <function>str_contains</function> 関数が追加されました。
    </para>
    <para>
     文字列が <parameter>needle</parameter> で始まるかを調べる
     <function>str_starts_with</function> 関数が追加されました。
    </para>
    <para>
     文字列が <parameter>needle</parameter> で終わるかを調べる
     <function>str_ends_with</function> 関数が追加されました。
     <!-- RFC: https://wiki.php.net/rfc/str_contains -->
     <!-- RFC: https://wiki.php.net/rfc/add_str_starts_with_and_ends_with_functions -->
    </para>
   </listitem>
   <listitem>
    <para>
     IEEE 754 のセマンティクスに沿って浮動小数点数の割り算を行う
     <function>fdiv</function> 関数が追加されました。
     ゼロ除算は、well-defined とみなされ、
     <literal>Inf</literal>,
     <literal>-Inf</literal>, <literal>NaN</literal> のいずれかを返します。
    </para>
   </listitem>
   <listitem>
    <para>
     エラーメッセージで使うのに便利な型を返す
     <function>get_debug_type</function> 関数が追加されました。
     <function>gettype</function> と違うのは、
     この関数は正規化された型の名前を使い、オブジェクトのときはクラス名を返し、
     リソースの場合はリソースのタイプを示すことです。
     <!-- RFC: https://wiki.php.net/rfc/get_debug_type -->
    </para>
   </listitem>
   <listitem>
    <para>
     <function>printf</function> 関数とその仲間の関数は、
     フォーマット指定子 <literal>%h</literal> と <literal>%H</literal> をサポートしました。
     これらは <literal>%g</literal> および <literal>%G</literal> と同じですが、
     10進数の区切り文字を <constant>LC_NUMERIC</constant> ロケールによって決めるのではなく、
     常に <literal>"."</literal> を使います。
    </para>
   </listitem>
   <listitem>
    <para>
     <function>printf</function> 関数とその仲間の関数は、
     精度または広さを指定する用途のために <literal>"*"</literal> をサポートしました。
     この場合、精度/広さは printf の引数として渡します。
     精度として <literal>-1</literal> を <literal>%g</literal>, <literal>%G</literal>,
     <literal>%h</literal>,  <literal>%H</literal> に指定することも出来ます。
     たとえば、次のコードで、PHP のデフォルトの浮動小数点のフォーマットを再現することができます:
    </para>
    <para>
     <programlisting role="php">
<![CDATA[
<?php
printf("%.*H", (int) ini_get("precision"), $float);
printf("%.*H", (int) ini_get("serialize_precision"), $float);
?>
]]>
     </programlisting>
    </para>
   </listitem>
   <listitem>
    <para>
     <function>proc_open</function> に、疑似端末(PTY) ディスクリプタのサポートが追加されました。
     以下のコードは、
     <literal>stdin</literal>, <literal>stdout</literal>, <literal>stderr</literal>
     を同じPTYにアタッチします:
    </para>
    <para>
     <programlisting role="php">
<![CDATA[
<?php
$proc = proc_open($command, [['pty'], ['pty'], ['pty']], $pipes);
?>
]]>
     </programlisting>
    </para>
   </listitem>
   <listitem>
    <para>
     <function>proc_open</function> 関数は、
     ソケットペアのディスクリプタをサポートするようになりました。
     以下のコードは、異なるソケットペアを
     <literal>stdin</literal>, <literal>stdout</literal>,
     <literal>stderr</literal> にアタッチします:
    </para>
    <para>
     <programlisting role="php">
<![CDATA[
<?php
$proc = proc_open($command, [['socket'], ['socket'], ['socket']], $pipes);
?>
]]>
     </programlisting>
    </para>
    <para>
     Windows では、パイプと異なり、ソケットは ブロッキングI/O の問題の影響を受けません。
     しかし、全てのプログラムが標準入出力のソケットで正しく動くとは限りません。
    </para>
   </listitem>
   <listitem>
    <para>
     ソート関数が安定ソートになりました。
     これは、比較して等しいと判定された要素は、もともとの順序を維持するということです。
     <!-- RFC: https://wiki.php.net/rfc/stable_sorting -->
    </para>
   </listitem>
   <listitem>
    <para>
     <function>array_diff</function>, <function>array_intersect</function> や、
     そのバリエーションの関数は、単一の配列を引数に取れるようになりました。
     これによって、以下のような使い方が出来るようになるということです:
    </para>
    <para>
     <programlisting role="php">
<![CDATA[
<?php
//  $excludes が空でも問題ありません:
array_diff($array, ...$excludes);
//  $arrays が 単一の配列だけを含んでいても問題ありません:
array_intersect(...$arrays);
?>
]]>
     </programlisting>
    </para>
   </listitem>
   <listitem>
    <para>
     <function>ob_implicit_flush</function> 関数の <parameter>flag</parameter> 
     引数が、<type>int</type> ではなく <type>bool</type> を受け取るように変更されました。
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.new-features.tokenizer">
  <title>Tokenizer</title>

  <para>
   <classname>PhpToken</classname> クラスは、
   オブジェクトベースのインターフェイスを tokenizer に追加します。
   このクラスは、統一された、人間工学に基づいた表現を提供しながら、
   メモリ効率がよく、高速になっています。
   <!--  RFC: https://wiki.php.net/rfc/token_as_object -->
  </para>
 </sect2>

 <sect2 xml:id="migration80.new-features.zip">
  <title>Zip</title>

  <itemizedlist>
   <listitem>
    <para>
     Zip 拡張モジュールが、1.19.1 に更新されました。
    </para>
   </listitem>
   <listitem>
    <para>
     エントリの変更時間を設定するための
     <methodname>ZipArchive::setMtimeName</methodname>,
     <methodname>ZipArchive::setMtimeIndex</methodname> が追加されました。
    </para>
   </listitem>
   <listitem>
    <para>
     アーカイブがクローズされている間に行われた更新情報を提供する
     <methodname>ZipArchive::registerProgressCallback</methodname> が追加されました。
    </para>
   </listitem>
   <listitem>
    <para>
     アーカイブがクローズされている間にキャンセルを許可する
     <methodname>ZipArchive::registerCancelCallback</methodname> が追加されました。
    </para>
   </listitem>
   <listitem>
    <para>
     エントリの内容を置換する
     <methodname>ZipArchive::replaceFile</methodname> が追加されました。
    </para>
   </listitem>
   <listitem>
    <para>
     オプションの圧縮機能がサポートされているかをチェックする
     <methodname>ZipArchive::isCompressionMethodSupported</methodname> が追加されました。
    </para>
   </listitem>
   <listitem>
    <para>
     オプションの暗号化機能がサポートされているかをチェックする
     <methodname>ZipArchive::isEncryptionMethodSupported</methodname> が追加されました。
    </para>
   </listitem>
   <listitem>
    <para>
     最後に追加されたエントリのインデックスの値を取得するために、
     <varname>ZipArchive::lastId</varname> が追加されました。
    </para>
   </listitem>
   <listitem>
    <para>
     <varname>ZipArchive::status</varname> や
     <varname>ZipArchive::statusSys</varname> プロパティ、
     または <methodname>ZipArchive::getStatusString</methodname> メソッドを使って、
     アーカイブがクローズされた後でもエラーをチェックできるようになりました。
    </para>
   </listitem>
   <listitem>
    <para>
     <methodname>ZipArchive::addGlob</methodname> と
     <methodname>ZipArchive::addPattern</methodname> メソッドの
     <literal>'remove_path'</literal> オプションは、
     (<literal>'add_path'</literal> オプションと一貫性を保つため)
     任意の文字列のプレフィックスとして扱われるようになりました。
     これより前のバージョンでは、デイレクトリ名として扱われていました。
    </para>
   </listitem>
   <listitem>
    <para>
     オプションの 圧縮/伸長 機能が phpinfo でも一覧できるようになりました。
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
