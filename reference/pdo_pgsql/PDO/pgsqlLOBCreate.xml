<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 9b69a8dcce47d6619d6459914e784627cbb02a5f Maintainer: takagi Status: ready -->
<refentry xml:id="pdo.pgsqllobcreate" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>PDO::pgsqlLOBCreate</refname>
  <refpurpose>新しいラージオブジェクトを作成する</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>string</type><methodname>PDO::pgsqlLOBCreate</methodname>
   <void/>
  </methodsynopsis>
  <para>
   <function>PDO::pgsqlLOBCreate</function> は、
   ラージオブジェクトを作成してその OID を返します。
   このオブジェクトに対するデータの読み書きを行う際には、
   <function>PDO::pgsqlLOBOpen</function> を使用してストリームをオープンします。
   OID は OID 型のカラムに格納され、ラージオブジェクトを参照するために使用されます。
   これにより、行のサイズがどんどん拡大してしまうことを防ぎます。
   <function>PDO::pgsqlLOBUnlink</function> をコールして削除するまで、
   ラージオブジェクトはデータベース内に残り続けます。
  </para>
  <para>
   ラージオブジェクトの大きさは最大 2GB まで拡大できますが、扱い方はめんどうです。
   オブジェクトの OID を参照している行をデータベースから削除する際には、
   必ず事前に <function>PDO::pgsqlLOBUnlink</function>
   がコールされていなければなりません。
   さらに、ラージオブジェクトにはアクセス権の設定がありません。
   ラージオブジェクトの代替策として、bytea 型のカラムも検討ください。
   最近のバージョンの PostgreSQL では bytea 型のカラムに最大 1GB
   まで保存でき、行サイズを最適化したうえでデータを透過的に扱うことができます。
  </para>
  <note>
   <simpara>
    この関数は、トランザクション内でコールしなければなりません。
   </simpara>
  </note>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <function>PDO::pgsqlLOBCreate</function> は、パラメータを受け取りません。
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   新しく作成されたラージオブジェクトの OID、あるいは失敗した場合に
   &false; を返します。
  </para>
 </refsect1>
 
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>PDO::pgsqlLOBCreate</function> の例</title>
    <para>
     この例では、新しいラージオブジェクトを作成し、
     ファイルの内容をそこにコピーします。その後、OID がテーブルに保存されます。
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$db = new PDO('pgsql:dbname=test host=localhost', $user, $pass);
$db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
$db->beginTransaction();
$oid = $db->pgsqlLOBCreate();
$stream = $db->pgsqlLOBOpen($oid, 'w');
$local = fopen($filename, 'rb');
stream_copy_to_stream($local, $stream);
$local = null;
$stream = null;
$stmt = $db->prepare("INSERT INTO BLOBS (ident, oid) VALUES (?, ?)");
$stmt->execute(array($some_id, $oid));
$db->commit();
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>


 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>PDO::pgsqlLOBOpen</function></member>
    <member><function>PDO::pgsqlLOBUnlink</function></member>
    <member><function>pg_lo_create</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
