<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 4d2479dcf35d82aca39ee61f8ab36ceed78a869c Maintainer: mumumu Status: ready -->
<sect1 xml:id="migration81.new-features" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>新機能</title>

 <sect2 xml:id="migration81.new-features.core">
  <title>PHP コア</title>

  <sect3 xml:id="migration81.new-features.core.octal-literal-prefix">
   <title>8進数の整数リテラルのプレフィックス指定</title>

   <para>
    8進数の整数値の場合に、
    数値リテラルのプレフィックスとして明示的に
    <literal>0o</literal> や <literal>0O</literal>
    を指定できるようになりました。
    これは、2進数や16進数の整数リテラルの表記と似ています。
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
014;  // プレフィックス指定がない 8進数のリテラル
0o14; // プレフィックスを指定した 8進数のリテラル
?>
]]>
     </programlisting>
    </informalexample>
   </para>
   <!-- RFC: https://wiki.php.net/rfc/explicit_octal_notation -->
  </sect3>

  <sect3 xml:id="migration81.new-features.core.unpacking-string-keys">
   <title>文字列をキーとして持つ配列のアンパック</title>

   <para>
    文字列をキーとして持つ配列をアンパックできるようになりました。
    <!-- TODO Add an example -->
   </para>
   <!-- RFC: https://wiki.php.net/rfc/array_unpacking_string_keys -->
  </sect3>

  <sect3 xml:id="migration81.new-features.core.named-arg-after-unpack">
   <title>引数をアンパックした後の名前付き引数</title>

   <para>
    引数をアンパックした後に、名前付き引数を指定できるようになりました。
    <!-- TODO Add an example -->
    e.g.
    foo(...$args, named: $arg).
   </para>
  </sect3>

  <sect3 xml:id="migration81.new-features.core.upload-full-path-key">
   <title>ファイルアップロード時の full-path キーのサポート</title>

   <para>
    ファイルアップロード時に、
    追加で 
    <literal>full_path</literal> キーを指定できるようになりました。
    これにより、アップロードされるファイルの
    (basename ではなく)
    フルパスを指定できます。
    これは、
    "upload webkitdirectory"
    と組み合わせて使うことを意図しています。
   </para>
   <!-- RFC: https://wiki.php.net/rfc/array_unpacking_string_keys -->
  </sect3>

  <sect3 xml:id="migration81.new-features.core.enums">
   <title>列挙型</title>

   <para>
    <!--<link linkend="language.enumeration">-->列挙型<!--</link>-->
    のサポートが追加されました。
    <!-- RFC: https://wiki.php.net/rfc/enumerations -->
   </para>
  </sect3>

  <sect3 xml:id="migration81.new-features.core.fibers">
   <title>Fibers</title>

   <para>
    <!--<link linkend="language.fibers">-->Fibers<!--</link>-->
    のサポートが追加されました。
    <!-- RFC: https://wiki.php.net/rfc/fibers -->
   </para>
  </sect3>

  <sect3 xml:id="migration81.new-features.core.callable-syntax">
   <title>第一級の callable を生成する記法</title>

   <para>
    <code>myFunc(...)</code> という記法で、
    callable から無名関数を生成できるようになりました。
    これは、
    <code>Closure::fromCallable('myFunc')</code> と同等です。
    <!-- RFC: https://wiki.php.net/rfc/first_class_callable_syntax -->
   </para>
   <note>
    <simpara>
     <code>...</code> は文法の一部であり、省略形ではありません。
    </simpara>
   </note>
  </sect3>

  <sect3 xml:id="migration81.new-features.core.intersection-types">
   <title>交差型</title>

   <para>
    <!--<link linkend="language.types.declarations.intersection">-->交差型<!--</link>-->のサポートが追加されました。
    <!-- RFC: https://wiki.php.net/rfc/pure-intersection-types -->
   </para>
   <caution>
    <simpara>
     交差型は、
     <link linkend="language.types.declarations.union">union 型</link>
     と一緒に使うことはできません。
    </simpara>
   </caution>
  </sect3>

  <sect3 xml:id="migration81.new-features.core.never-type">
   <title>Never 型</title>

   <para>
    戻り値にのみ指定できる型として、
    新しく &never; 型が追加されました。
    これは、関数が <function>exit</function> するか、
    例外を投げるか、終了しないことを示します。
    <!-- RFC: https://wiki.php.net/rfc/noreturn_type -->
   </para>
  </sect3>

  <sect3 xml:id="migration81.new-features.core.new-in-initializer">
   <title>初期化時の &new; 式の許可</title>

   <para>
    <code>new ClassName()</code> 式が、引数のデフォルト値の初期化時、
    静的な変数の初期化時、グローバルな定数の初期化時、
    およびアトリビュートの引数として許可されるようになりました。
    オブジェクトが <function>define</function> に渡せるようにもなっています。
    <!-- TODO Add an example -->
   </para>
   <!-- RFC: https://wiki.php.net/rfc/new_in_initializers -->
  </sect3>

  <sect3 xml:id="migration81.new-features.core.readonly">
   <title>読み取り専用のプロパティ</title>

   <para>
    プロパティに <code>readonly</code> が指定できるようになりました。
    <!-- RFC: https://wiki.php.net/rfc/readonly_properties_v2 -->
   </para>
  </sect3>

  <sect3 xml:id="migration81.new-features.core.final-constants">
   <title>クラス定数の final 指定</title>

   <para>
    クラスの定数に対して、
    <modifier>final</modifier> が指定できるようになりました。
    <!-- RFC: https://wiki.php.net/rfc/final_class_const -->
   </para>
  </sect3>

 </sect2>

 <sect2 xml:id="migration81.new-features.curl">
  <title>CURL</title>
  
  <para>
   <constant>CURLOPT_DOH_URL</constant> オプションが追加されました。
  </para>

  <para>
   libcurl &gt;= 7.71.0 で、
   証明書を blob 経由で扱うためのオプションが追加されました。
  </para>
  <itemizedlist>
   <listitem>
    <simpara><constant>CURLOPT_ISSUERCERT_BLOB</constant></simpara>
   </listitem>
   <listitem>
    <simpara><constant>CURLOPT_PROXY_ISSUERCERT</constant></simpara>
   </listitem>
   <listitem>
    <simpara><constant>CURLOPT_PROXY_ISSUERCERT_BLOB</constant></simpara>
   </listitem>
   <listitem>
    <simpara><constant>CURLOPT_PROXY_SSLCERT_BLOB</constant></simpara>
   </listitem>
   <listitem>
    <simpara><constant>CURLOPT_PROXY_SSLKEY_BLOB</constant></simpara>
   </listitem>
   <listitem>
    <simpara><constant>CURLOPT_SSLCERT_BLOB</constant></simpara>
   </listitem>
   <listitem>
    <simpara><constant>CURLOPT_SSLKEY_BLOB</constant></simpara>
   </listitem>
  </itemizedlist>

  <para>
   ファイルをファイル経由ではなく、
   文字列で POST するために使える
   <classname>CURLStringFile</classname> クラスが追加されました。
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
$file = new CURLStringFile($data, 'filename.txt', 'text/plain');
curl_setopt($curl, CURLOPT_POSTFIELDS, ['file' => $file]);
?>
]]>
    </programlisting>
   </informalexample>
  </para>
 </sect2>

 <sect2 xml:id="migration81.new-features.fpm">
  <title>FPM</title>

  <para>
   openmetrics statusフォーマットが追加されました。
   これは、Prometheus が FPM のメトリクスを取得するのに使えます。
  </para>
  <para>
   <literal>pm.max_spawn_rate</literal> と呼ばれる、
   動的なプロセスマネージャーのための、
   新しいプールオプションが追加されました。
   これを指定することで、
   動的なプロセスマネージャーを選択した場合に、
   高速にたくさんの子プロセスが起動できるようになります。
   これのデフォルト値は <literal>32</literal> で、
   以前からハードコーディングされていたものです。
  </para>
 </sect2>

 <sect2 xml:id="migration81.new-features.gd">
  <title>GD</title>

  <para>
   libgd に Avix のサポートが組み込まれている場合に、
   <function>imagecreatefromavif</function> と
   <function>imageavif</function>
   で Avix が使えるようになりました。
  </para>
 </sect2>

 <sect2 xml:id="migration81.new-features.hash">
  <title>Hash</title>

  <para>
   <function>hash</function>,
   <function>hash_file</function>,
   <function>hash_init</function> 関数に、
   オプションの引数 <parameter>options</parameter> が追加されました。
   これによって、ハッシュアルゴリズム特有のデータを渡せるようになります。
  </para>

  <sect3 xml:id="migration81.new-features.hash.murmurhash3">
   <title>MurmurHash3</title>

   <para>
    ストリーミングをサポートした
    <literal>MurmurHash3</literal> のサポートが追加されました。
    以下のバリアントが実装されています:
   </para>
   <itemizedlist>
    <listitem>
     <simpara>murmur3a, 32-bit hash</simpara>
    </listitem>
    <listitem>
     <simpara>murmur3c, 128-bit hash for x86</simpara>
    </listitem>
    <listitem>
     <simpara>murmur3f, 128-bit hash for x64</simpara>
    </listitem>
   </itemizedlist>

   <para>
    ハッシュの初期ステートを
    引数 <parameter>options</parameter> の
    <literal>seed</literal> キーを通じて渡すことができます。
    たとえば、以下のように書くことができます:

    <informalexample>
     <programlisting role="php">
      <![CDATA[
<?php
$h = hash("murmur3f", $data, options: ["seed" => 42]);
echo $h, "\n";
?>
]]>
     </programlisting>
    </informalexample>

    有効な seed の値は
    <literal>0</literal> から
    プラットフォーム定義の <constant>UINT_MAX</constant> までです。
    この値は、通常は <literal>4294967295</literal> です。
   </para>
  </sect3>

  <sect3 xml:id="migration81.new-features.hash.xxhash">
   <title>xxHash</title>

   <para>
    <literal>xxHash</literal> のサポートが追加されました。
    以下のバリアントが実装されています:
   </para>
   <itemizedlist>
    <listitem>
     <simpara>xxh32, 32-bit hash</simpara>
    </listitem>
    <listitem>
     <simpara>xxh64, 64-bit hash</simpara>
    </listitem>
    <listitem>
     <simpara>xxh3, 64-bit hash</simpara>
    </listitem>
    <listitem>
     <simpara>xxh128, 128-bit hash</simpara>
    </listitem>
   </itemizedlist>

   <para>
    ハッシュの初期ステートを
    引数 <parameter>options</parameter> の
    <literal>seed</literal> キーを通じて渡すことができます。
    たとえば、以下のように書くことができます:

    <informalexample>
     <programlisting role="php">
      <![CDATA[
<?php
$h = hash("xxh3", $data, options: ["seed" => 42]);
echo $h, "\n";
?>
]]>
     </programlisting>
    </informalexample>

    以下のようにして、シークレットを引数 <parameter>options</parameter> の
    <literal>secret</literal> キーを通じて渡すこともできます:

    <informalexample>
     <programlisting role="php">
      <![CDATA[
<?php
$h = hash("xxh3", $data, options: ["secret" => "at least 136 bytes long secret here"]);
echo $h, "\n";
?>
]]>
     </programlisting>
    </informalexample>

    カスタムのシークレットの品質が、
    生成されるハッシュ値の品質に重大な影響を及ぼします。
    できる限りエントロピーが高いシークレットを使うことを強く推奨します。
   </para>
  </sect3>
 </sect2>

 <sect2 xml:id="migration81.new-features.mysqli">
  <title>MySQLi</title>

  <sect3 xml:id="migration81.new-features.mysqli.local_infile_directory">
   <title>新しい INI ディレクティブ <literal>mysqli.local_infile_directory</literal></title>

   <para>
    <link linkend="ini.mysqli.local-infile-directory">mysqlnd.local_infile_directory</link>
    ディレクティブが追加されました。
    これによって、ファイルを読み込むことを許可するディレクトリを指定できます。
    これは、
    <link linkend="ini.mysqli.allow-local-infile">mysqli.allow_local_infile</link>
    が無効の場合にだけ意味があります。
    なぜなら、
    この場合に全てのディレクトリからのファイルの読み込みが許可されるからです。
   </para>
  </sect3>

  <sect3 xml:id="migration81.new-features.mysqli.bind-in-execute">
   <title>実行時に引数をバインド</title>

   <para>
    <methodname>mysqli_stmt::execute</methodname>
    に配列を指定することで、引数をバインドできるようになりました。
    全ての値が、文字列としてバインドされます。
    (連想配列でない) リストだけを指定できます。
    この新機能は、MySQLi を libmysqlclient
    を使ってコンパイルしている場合には利用できません。
    <!-- RFC: https://wiki.php.net/rfc/mysqli_bind_in_execute -->
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
$stmt = $mysqli->prepare('INSERT INTO users(id, name) VALUES(?,?)');
$stmt->execute([1, $username]);
?>
]]>
     </programlisting>
    </informalexample>
   </para>
  </sect3>

  <sect3 xml:id="migration81.new-features.mysqli.mysqli_fetch_column">
   <title>新しいメソッド <methodname>mysqli_result::fetch_column</methodname></title>

   <para>
    <methodname>mysqli_result::fetch_column</methodname>
    が追加されました。これによって、
    結果セットから単一のスカラー値を取得することができるようになります。
    この新しいメソッドは、
    オプションの引数 <parameter>column</parameter>
    に 0 から始まる整数値を指定することで、
    どのカラムから情報を取得するかを指定できます。
    <!-- RFC: https://wiki.php.net/rfc/mysqli_fetch_column -->
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
$result = $mysqli->query('SELECT username FROM users WHERE id = 123');
echo $result->fetch_column();
?>
]]>
     </programlisting>
    </informalexample>
   </para>
  </sect3>

 </sect2>

 <sect2 xml:id="migration81.new-features.pdo_mysql">
  <title>PDO</title>

  <para>
   <constant>PDO::MYSQL_ATTR_LOCAL_INFILE_DIRECTORY</constant>
   属性が追加されました。
   これによって、ファイルを読み込むことを許可するディレクトリを指定できます。
   これは、
   <constant>PDO::MYSQL_ATTR_LOCAL_INFILE</constant>
   が無効の場合にだけ意味があります。
   なぜなら、
   この場合に全てのディレクトリからのファイルの読み込みが許可されるからです。
  </para>
 </sect2>

 <sect2 xml:id="migration81.new-features.pdo_sqlite">
  <title>PDO_SQLite</title>

  <para>
   SQLite の
   <literal>"file:"</literal>
   DSN 記法がサポートされるようになり、
   追加のフラグも指定できるようになりました。
   この機能は、open_basedir が設定されている場合は使えません。
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
new PDO('sqlite:file:path/to/sqlite.db?mode=ro')
?>
]]>
    </programlisting>
   </informalexample>
  </para>
 </sect2>

 <sect2 xml:id="migration81.new-features.posix">
  <title>POSIX</title>

  <para>
   <constant>POSIX_RLIMIT_KQUEUES</constant> と
   <constant>POSIX_RLIMIT_NPTS</constant> が追加されました。
   これらの rlimits は、FreeBSD でのみ利用可能です。
  </para>
 </sect2>

 <sect2 xml:id="migration81.new-features.standard">
  <title>Standard</title>

  <para>
   <function>fputcsv</function> は、
   新しい引数 <parameter>eol</parameter> を受け入れるようになりました。
   これによって、カスタムの改行文字を定義できるようになります。
   デフォルトは以前と同じで、<literal>"\n"</literal> のままです。
  </para>
 </sect2>

 <sect2 xml:id="migration81.new-features.spl">
  <title>SPL</title>

  <para>
   <methodname>SplFileObject::fputcsv</methodname> は、
   新しい引数 <parameter>eol</parameter> を受け入れるようになりました。
   これによって、カスタムの改行文字を定義できるようになります。
   デフォルトは以前と同じで、<literal>"\n"</literal> のままです。
  </para>
 </sect2>

</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
