<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: bb1b4a7b265a7a7192c5c8a40cd1ef390eef423d Maintainer: mumumu Status: ready -->

<sect1 xml:id="language.types.numeric-strings" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>数値形式の文字列</title>
 <para>
  PHP の 文字列 は、
  <type>int</type> や <type>float</type> と解釈できる場合は
  数値と見なされます。
 </para>

 <para>
  PHP 8.0.0 以降の正式な仕様は下記の通りです:
 </para>

 <informalexample>
  <programlisting>
   <![CDATA[
WHITESPACES      \s*
LNUM             [0-9]+
DNUM             ([0-9]*)[\.]{LNUM}) | ({LNUM}[\.][0-9]*)
EXPONENT_DNUM    (({LNUM} | {DNUM}) [eE][+-]? {LNUM})
INT_NUM_STRING   {WHITESPACES} [+-]? {LNUM} {WHITESPACES}
FLOAT_NUM_STRING {WHITESPACES} [+-]? ({DNUM} | {EXPONENT_DNUM}) {WHITESPACES}
NUM_STRING       ({INT_NUM_STRING} | {FLOAT_NUM_STRING})
]]>
  </programlisting>
 </informalexample>

 <para>
  PHP は <emphasis>先頭から始まる</emphasis> 数値形式の文字列という概念も持っています。
  これは、数値形式の文字列から始まり、その後に任意の文字が続く文字列です。
 </para>

 <note>
  <para>
   文字 <literal>E</literal> (大文字小文字を区別しません) が含まれる文字列のうち、
   その文字で数値を区切っている場合、科学的記法で記された数値とみなされます。
   この場合、予期しない結果が発生するかもしれません。
   <programlisting role="php">
<![CDATA[
<?php
var_dump("0D1" == "000"); // false, "0D1" は科学的記法ではありません
var_dump("0E1" == "000"); // true, "0E1" は 0 * (10 ^ 1), または 0
var_dump("2E1" == "020"); // true, "2E1" は 2 * (10 ^ 1), または 20
?>
]]>
   </programlisting>
  </para>
 </note>

 <sect2 xml:id="language.types.numeric-string.conversion">
  <title>数値の文脈で使われる文字列</title>
  <para>
   文字列が数値として評価される必要がある場合
   (例: 算術演算や、<type>int</type> 型の宣言がある場合など)
   は、次のステップを踏むことで結果が決まります:

   <orderedlist>
    <listitem>
     <simpara>
      文字列が数値の場合、かつそれが
      <type>int</type> 型の範囲
      (<constant>PHP_INT_MAX</constant> で定義されています)
      に含まれる場合、<type>int</type> に解決されます。
      そうでない場合、<type>float</type> に解決されます。
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      文脈が 先頭から始まる数値形式の文字列を許す場合、
      かつ値が文字列の場合は、次のように解決されます:

      文字列の先頭部分が数値形式の文字列、かつそれが
      <type>int</type> 型の範囲
      (<constant>PHP_INT_MAX</constant> で定義されています)
      に含まれる場合、<type>int</type> に解決されます。
      そうでない場合、<type>float</type> に解決されます。

      それに加えて、エラーレベル <constant>E_WARNING</constant> が発生します。
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      文字列が数値でない場合、
      <classname>TypeError</classname> がスローされます。
     </simpara>
    </listitem>
   </orderedlist>
  </para>
 </sect2>

 <sect2 xml:id="language.types.numeric-string.prior">
  <title>PHP 8.0.0 より前の振る舞い</title>
  <para>
   PHP 8.0.0 より前のバージョンでは、
   <emphasis>先頭に</emphasis> ホワイトスペースがある場合にだけ、
   文字列は数値と見なされていました。

   <emphasis>数値の後に</emphasis> ホワイトスペースがある場合は、
   その文字列は 先頭から始まる 数値形式の文字列とみなされていました。
  </para>

  <para>
   PHP 8.0.0 より前のバージョンでは、
   文字列が数値の文脈で使われる場合、既に述べたステップと同じ処理を行いますが、
   以下の違いがあります:

   <itemizedlist>
    <listitem>
     <simpara>
      先頭から始まる数値形式の文字列の場合、
      <constant>E_WARNING</constant> ではなく、
      <constant>E_NOTICE</constant> が発生していました。
     </simpara>
     </listitem>
    <listitem>
     <simpara>
      文字列が数値でない場合、
      <constant>E_WARNING</constant> が発生し、
      <literal>0</literal> が返されていました。
     </simpara>
    </listitem>
   </itemizedlist>
   PHP 7.1.0 より前のバージョンでは、
   <constant>E_NOTICE</constant>
   も
   <constant>E_WARNING</constant> も発生していませんでした。
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$foo = 1 + "10.5";                // $foo は float (11.5)
$foo = 1 + "-1.3e3";              // $foo は float (-1299)
$foo = 1 + "bob-1.3e3";           // PHP 8.0.0 以降は TypeError。それより前は、$foo は integer (1)
$foo = 1 + "bob3";                // PHP 8.0.0 以降は TypeError。それより前は、$foo は integer (1)
$foo = 1 + "10 Small Pigs";       // PHP 8.0.0 では $foo は integer (11) で、かつ E_WARNING。それより前は E_NOTICE
$foo = 4 + "10.2 Little Piggies"; // PHP 8.0.0 では $foo は float (14.2) で、かつ E_WARNING。それより前は E_NOTICE
$foo = "10.0 pigs " + 1;          // PHP 8.0.0 では $foo は float (11) で、かつ E_WARNING。それより前は E_NOTICE
$foo = "10.0 pigs " + 1.0;        // PHP 8.0.0 では $foo は float (11) で、かつ E_WARNING。それより前は E_NOTICE
?>
]]>
   </programlisting>
  </informalexample>
 </sect2>
</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
