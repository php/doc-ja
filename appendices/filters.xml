<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 18303121bc5ebbd696f8444b69eca93c974c25ac Maintainer: takagi Status: ready -->
<!-- Credits: mumumu -->

<appendix xml:id="filters" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>利用できるフィルタのリスト</title>
 <para>
  以下は、<function>stream_filter_append</function> で利用できる
  組み込みフィルタのリストです。PHP のバージョンによっては
  このリスト以外のフィルタがあったり、このリストにあるフィルタが存在
  しなかったりするかもしれません。
 </para>

 <para>
  <function>stream_filter_append</function>
  と <function>stream_filter_prepend</function> のちょっとした違いに
  ついて説明します。
  すべての PHP ストリームはその内部に小さな<emphasis>読み込みバッファ</emphasis>
  を持っており、ファイルシステムもしくは他のリソースから読み込まれた
  データはこのバッファに格納されます。このことで、データをより効率的に
  扱うことができるのです。リソースがストリームの内部バッファに
  取り込まれたら、アプリケーション側で準備ができているかどうかに
  かかわらずすぐにフィルタ処理が行われます。フィルタが
  <emphasis>append</emphasis> されていた場合、読み込みバッファに
  はいってきたデータはすぐにフィルタ処理されます。つまり、バッファの
  存在をまったく意識せずに扱えるということです。しかし、もしフィルタが
  <emphasis>prepend</emphasis> されていた場合、読み込みバッファにデータが
  入ってきた段階ではフィルタ処理<emphasis>されません</emphasis>。
  リソースから次のデータブロックが読み込まれるまで、フィルタ処理を
  待機するのです。
 </para>

 <para>
  あなたが使っている PHP にどのようなフィルタが登録されているかを
  知るには、<function>stream_get_filters</function> を利用します。
 </para>

 <section xml:id="filters.string">
  <title>文字列フィルタ</title>

  <simpara>
   これらのフィルタは、まさしくその名が示すとおりの働きをし、PHP 組み込み
   の文字列処理関数と同じように動作します。これらのフィルタについての
   より詳しい情報は、対応する関数のマニュアルを参照してください。
  </simpara>

  <section xml:id="filters.string.rot13">
   <title>string.rot13</title>
   <simpara>
    このフィルタは、すべてのストリームデータに対して
    <function>str_rot13</function> 関数を適用するのと同じ動作をします。
   </simpara>
   <example>
    <title>string.rot13</title>
   <programlisting role="php">
<![CDATA[
<?php
$fp = fopen('php://output', 'w');
stream_filter_append($fp, 'string.rot13');
fwrite($fp, "This is a test.\n");
/* 出力:     Guvf vf n grfg.   */
?>
]]>
    </programlisting>
   </example>
  </section>

  <section xml:id="filters.string.toupper">
   <title>string.toupper</title>
   <simpara>
    このフィルタは、すべてのストリームデータに対して
    <function>strtoupper</function> 関数を適用するのと同じ動作をします。
   </simpara>
   <example>
    <title>string.toupper</title>
    <programlisting role="php">
<![CDATA[
<?php
$fp = fopen('php://output', 'w');
stream_filter_append($fp, 'string.toupper');
fwrite($fp, "This is a test.\n");
/* 出力:  THIS IS A TEST.   */
?>
]]>
    </programlisting>
   </example>
  </section>

  <section xml:id="filters.string.tolower">
   <title>string.tolower</title>
   <simpara>
    このフィルタは、すべてのストリームデータに対して
    <function>strtolower</function> 関数を適用するのと同じ動作をします。
   </simpara>
   <example>
    <title>string.tolower</title>
    <programlisting role="php">
<![CDATA[
<?php
$fp = fopen('php://output', 'w');
stream_filter_append($fp, 'string.tolower');
fwrite($fp, "This is a test.\n");
/* 出力:     this is a test.   */
?>
]]>
    </programlisting>
   </example>
  </section>

  <section xml:id="filters.string.strip_tags">
   <title>string.strip_tags</title>
   <simpara>
    このフィルタは、すべてのストリームデータに対して
    <function>strip_tags</function> 関数を適用するのと同じ動作をします。
    以下の２つのうちどちらかの形式でパラメータを渡すことができます。
    ひとつは、<function>strip_tags</function> 関数の第２パラメータと同じ
    形式でタグを並べた文字列、もうひとつはタグ名の配列です。
   </simpara>
   <para>
    &warn.deprecated.feature-7-3-0;
   </para>
   <example>
    <title>string.strip_tags</title>
    <programlisting role="php">
<![CDATA[
<?php
$fp = fopen('php://output', 'w');
stream_filter_append($fp, 'string.strip_tags', STREAM_FILTER_WRITE, "<b><i><u>");
fwrite($fp, "<b>bolded text</b> enlarged to a <h1>level 1 heading</h1>\n");
fclose($fp);
/* 出力:     <b>bolded text</b> enlarged to a level 1 heading   */

$fp = fopen('php://output', 'w');
stream_filter_append($fp, 'string.strip_tags', STREAM_FILTER_WRITE, array('b','i','u'));
fwrite($fp, "<b>bolded text</b> enlarged to a <h1>level 1 heading</h1>\n");
fclose($fp);
/* 出力:     <b>bolded text</b> enlarged to a level 1 heading   */
?>
]]>
    </programlisting>
   </example>
  </section>
 </section>

 <section xml:id="filters.convert">
  <title>変換フィルタ</title>

  <simpara>
   string.* フィルタと同様、convert.* フィルタもその名前と同じような
   動作をします。
   これらのフィルタについてのより詳しい情報は、対応する関数のマニュアルを
   参照してください。
  </simpara>

  <section xml:id="filters.convert.base64">
   <title>convert.base64-encode と convert.base64-decode による変換</title>
   <simpara>
    これらのフィルタは、すべてのストリームデータに対してそれぞれ
    <function>base64_encode</function> または <function>base64_decode</function>
    関数を適用するのと同じ動作をします。
    <literal>convert.base64-encode</literal> は、パラメータを連想配列形式で
    受け取ることができます。<parameter>line-length</parameter> が与えられた
    場合、base64 出力は <parameter>line-length</parameter> 文字単位に
    分割されます。
    <parameter>line-break-chars</parameter> が与えられた場合、
    分割されたデータは、<parameter>line-break-chars</parameter>
    で指定された文字列で区切って出力されます。
    これらのパラメータは、<function>base64_encode</function> を
    <function>chunk_split</function> とともに利用した場合と同じ動作をします。
   </simpara>
   <example>
    <title>
     convert.base64-encode と
     convert.base64-decode
    </title>
    <programlisting role="php">
<![CDATA[
<?php
$fp = fopen('php://output', 'w');
stream_filter_append($fp, 'convert.base64-encode');
fwrite($fp, "This is a test.\n");
fclose($fp);
/* 出力:     VGhpcyBpcyBhIHRlc3QuCg==  */

$param = array('line-length' => 8, 'line-break-chars' => "\r\n");
$fp = fopen('php://output', 'w');
stream_filter_append($fp, 'convert.base64-encode', STREAM_FILTER_WRITE, $param);
fwrite($fp, "This is a test.\n");
fclose($fp);
/* 出力:     VGhpcyBp
       :     cyBhIHRl
       :     c3QuCg==  */

$fp = fopen('php://output', 'w');
stream_filter_append($fp, 'convert.base64-decode');
fwrite($fp, "VGhpcyBpcyBhIHRlc3QuCg==");
fclose($fp);
/* 出力:     This is a test.  */
?>
]]>
    </programlisting>
   </example>
  </section>

  <section xml:id="filters.covert.quoted-printable">
   <title>convert.quoted-printable-encode と convert.quoted-printable-decode</title>
   <simpara>
    これらのフィルタのうち、デコードフィルタはすべてのストリームデータに
    対して <function>quoted_printable_decode</function> 関数を適用するのと
    同じ動作をします。 <literal>convert.quoted-printable-encode</literal>
    に対応する関数は存在しません。
    <literal>convert.quoted-printable-encode</literal> は、パラメータを
    連想配列形式で受け取ることができます。<literal>convert.base64-encode</literal>
    でサポートされているパラメータに加え、<literal>convert.quoted-printable-encode</literal>
    は <parameter>binary</parameter> と <parameter>force-encode-first</parameter>
    という２つの論理型パラメータをサポートしています。
    <literal>convert.base64-decode</literal> は
    <parameter>line-break-chars</parameter> パラメータのみをサポートしており、
    これは符号化されたデータを分割する際に用いられます。
   </simpara>
   <example>
    <title>
     convert.quoted-printable-encode と
     convert.quoted-printable-decode
    </title>
    <programlisting role="php">
<![CDATA[
<?php
$fp = fopen('php://output', 'w');
stream_filter_append($fp, 'convert.quoted-printable-encode');
fwrite($fp, "This is a test.\n");
/* 出力:    =This is a test.=0A  */
?>
]]>
    </programlisting>
   </example>
  </section>

  <section xml:id="filters.convert.iconv">
   <title>convert.iconv.*</title>
   <simpara>
    <literal>convert.iconv.*</literal> フィルタは、
    <link linkend="book.iconv">iconv</link> サポートが有効になっている場合に利用できます。
    このフィルタは、すべてのストリームデータに
    <function>iconv</function> 関数を適用するのと
    同じ動作をします。
    これらのフィルタは引数をサポートしていませんが、
    その代わりに、入力と出力のエンコーディングがフィルタ名の一部として与えられます。
    つまり、以下のような形になります。
    <literal>convert.iconv.&lt;input-encoding&gt;.&lt;output-encoding&gt;</literal> または
    <literal>convert.iconv.&lt;input-encoding&gt;/&lt;output-encoding&gt;</literal>
    (どちらの記法もセマンティクス的には同等です).
   </simpara>
   <example>
    <title>convert.iconv.*</title>
    <programlisting role="php">
<![CDATA[
<?php
$fp = fopen('php://output', 'w');
stream_filter_append($fp, 'convert.iconv.utf-16le.utf-8');
fwrite($fp, "T\0h\0i\0s\0 \0i\0s\0 \0a\0 \0t\0e\0s\0t\0.\0\n\0");
fclose($fp);
/* 出力: This is a test. */
?>
]]>
    </programlisting>
   </example>
  </section>
 </section>

 <section xml:id="filters.compression">
  <title>圧縮フィルタ</title>

  <simpara>
   <link linkend="wrappers.compression">圧縮ストリーム</link> を用いれば
   ローカルファイルシステム上に gzip や bz2 と互換性のある圧縮ファイルを
   作成することができます。しかし、これはネットワーク越しの圧縮機能を
   持っておらず、また非圧縮ストリームを圧縮されたストリームに変換することも
   できません。その点、圧縮フィルタはどんなストリームリソースでもどんな場合
   でも適用可能です。
  </simpara>

  <note>
   <simpara>
    圧縮フィルタは、<literal>gzip</literal> のようなコマンドライン
    ユーティリティで使われるヘッダを<emphasis>生成しません</emphasis>。
    これらのフィルタは、（ヘッダ部を除いた）データストリームの本体のみを
    圧縮・展開するものです。
   </simpara>
  </note>

  <section xml:id="filters.compression.zlib">
   <title>zlib.deflate と zlib.inflate</title>
   <simpara>
    <literal>zlib.deflate</literal> (圧縮) と
    <literal>zlib.inflate</literal> (展開) は、
    <link xlink:href="&url.rfc;1951">RFC 1951</link> で述べられている圧縮方法を
    実装したものです。<literal>deflate</literal> フィルタには、次の 3 つの
    パラメータを連想配列形式で渡すことができます:
 
    <parameter>level</parameter> は、圧縮の度合いを 1から9 までで表した
    ものです。数字が大きいほど圧縮後のサイズが小さくなりますが、そのぶん
    処理時間が長くかかります。次の2つの値は特別な意味を持ちます。
    0 (一切圧縮しない)、そして -1 (zlib のデフォルト設定 -- 現在は 6)。
 
    <parameter>window</parameter> は、圧縮用ループバックウィンドウのサイズを
    （2 を底とする）対数で指定します。大きな値 (15 -- つまり 32768 バイトまで
    引き上げる) を指定するとメモリをふんだんに利用してより小さく圧縮されます。
    一方、小さな値 (9 -- つまり 512 バイトまで絞り込む) を指定すると、圧縮の
    効率は落ちますがメモリの消費量を抑えられます。値を指定しなかった際の
    <parameter>window</parameter> の初期値は、現在 <constant>15</constant> です。
 
    <parameter>memory</parameter> は、作業用の一時メモリをどの程度割り当てるかを
    指定します。1 (最小限) から 9 (最大限) の間で指定できます。この値は
    圧縮の速度のみに影響し、圧縮後のデータのサイズには影響しません。
  </simpara>

  <note>
   <simpara>
    level は一番よく使われるパラメータなので、このパラメータについては
    （配列形式ではなく）直接整数値として設定することも可能にしています。
   </simpara>
  </note>

  <simpara>
    <link linkend="ref.zlib">zlib</link> サポートが有効な場合、
    zlib.* 圧縮フィルタが利用可能になります。
  </simpara>

  <example>
   <title>
    <literal>zlib.deflate</literal> と
    <literal>zlib.inflate</literal>
   </title>
   <programlisting role="php">
<![CDATA[
<?php
$params = array('level' => 6, 'window' => 15, 'memory' => 9);

$original_text = "This is a test.\nThis is only a test.\nThis is not an important string.\n";
echo "もとのテキストの長さは " . strlen($original_text) . " 文字です。\n";

$fp = fopen('test.deflated', 'w');
stream_filter_append($fp, 'zlib.deflate', STREAM_FILTER_WRITE, $params);
fwrite($fp, $original_text);
fclose($fp);

echo "圧縮後のファイルの大きさは " . filesize('test.deflated') . " バイトです。\n";
echo "もとのテキストは:\n";
/* readfile と zlib.inflate を利用し、メモリ上で展開します */
readfile('php://filter/zlib.inflate/resource=test.deflated');

/* 生成される出力:

もとのテキストの長さは 70 文字です。
圧縮後のファイルの大きさは 56 バイトです。
もとのテキストは:
This is a test.
This is only a test.
This is not an important string.

 */
?>
]]>
    </programlisting>
   </example>

  <example>
   <title>
    <literal>zlib.deflate</literal> のシンプルな例
   </title>
   <programlisting role="php">
<![CDATA[
<?php
$original_text = "This is a test.\nThis is only a test.\nThis is not an important string.\n";
echo "もとのテキストの長さは " . strlen($original_text) . " 文字です。\n";

$fp = fopen('test.deflated', 'w');
/* この "6" は、パラメータ "level" が 6 であるということ */
stream_filter_append($fp, 'zlib.deflate', STREAM_FILTER_WRITE, 6);
fwrite($fp, $original_text);
fclose($fp);

echo "圧縮後のファイルの大きさは " . filesize('test.deflated') . " バイトです。\n";

/* 生成される出力:

もとのテキストの長さは 70 文字です。
圧縮後のファイルの大きさは 56 バイトです。

 */
?>
]]>
    </programlisting>
   </example>
  </section>

  <section xml:id="filters.compression.bzip2">
   <title>bzip2.compress と bzip2.decompress</title>
   <simpara>
    <literal>bzip2.compress</literal> と
    <literal>bzip2.decompress</literal>
    は、上で示した zlib フィルタと同じような動作をします。
 
    <literal>bzip2.compress</literal>  フィルタには、次の 2 つの
    パラメータを連想配列形式で渡すことができます:
 
    <parameter>blocks</parameter> は 1 から 9 までの整数値を設定します。
    これは一時領域として割り当てるメモリのサイズを 100kバイトブロックの
    数で示したものです。
    <parameter>work</parameter> も整数値で、0 から 250 までの値を設定します。
    これは、通常の圧縮方法がうまくいかなかった際に、どのくらい再試行した後で
    速度の遅い（ただしより確実な）方法に切りかえるかを示します。
    このパラメータは圧縮の速度のみに影響します。圧縮後のデータのサイズや
    圧縮時のメモリ使用量は変わりません。0 を指定した場合は、bzip ライブラリの
    初期設定値が利用されます。
 
    <literal>bzip2.decompress</literal> フィルタには 1 つのパラメータを
    渡すことができます。このパラメータは普通に論理型の値として渡すことも
    できますし、連想配列形式で <parameter>small</parameter> という名前の
    要素として渡すこともできます。
 
    <parameter>small</parameter> を &true; に設定した場合、bzip ライブラリは
    メモリ使用量をできるだけ抑えるようになり、その分、処理速度は遅くなります。
  </simpara>

  <simpara>
    <link linkend="ref.bzip2">bz2</link> サポートが有効な場合、
    bzip2.* 圧縮フィルタが利用可能になります。
  </simpara>

  <example>
   <title>
    <literal>bzip2.compress</literal> と
    <literal>bzip2.decompress</literal>
   </title>
   <programlisting role="php">
<![CDATA[
<?php
$param = array('blocks' => 9, 'work' => 0);

echo "もとのファイルの大きさは " . filesize('LICENSE') . " バイトです。\n";

$fp = fopen('LICENSE.compressed', 'w');
stream_filter_append($fp, 'bzip2.compress', STREAM_FILTER_WRITE, $param);
fwrite($fp, file_get_contents('LICENSE'));
fclose($fp);

echo "圧縮後のファイルの大きさは " . filesize('LICENSE.compressed') . " バイトです。\n";

/* 生成される出力:

もとのファイルの大きさは 3288 バイトです。
圧縮後のファイルの大きさは 1488 バイトです。

 */
?>
]]>
    </programlisting>
   </example>
  </section>
  </section>

 <section xml:id="filters.encryption">
  <title>暗号化フィルタ</title>

  <para>
    暗号化フィルタは、ファイル/ストリーム を暗号化する場合に特に有用です。
  </para>

  <section xml:id="filters.encryption.mcrypt">
   <title>mcrypt.* と mdecrypt.*</title>
   <para>
     &warn.deprecated.feature-7-1-0;
   </para>

   <simpara>
    <literal>mcrypt.*</literal> と <literal>mdecrypt.*</literal>
    は、libmcrypt を用いた暗号化・復号化を行います。これらのフィルタは、
    <link linkend="ref.mcrypt">mcrypt 暗号化関数</link> で利用可能な
    アルゴリズムをサポートしており、<literal>mcrypt.ciphername</literal>
    という名前で利用できます。<parameter>ciphername</parameter> の部分は、
    <function>mcrypt_module_open</function> に渡すのと同じアルゴリズム名
    です。また、以下の 5 つのパラメータが利用できます。
   </simpara>

   <para>
    <table>
     <title>mcrypt フィルタのパラメータ</title>
     <tgroup cols="4">
      <thead>
       <row>
        <entry>パラメータ名</entry>
        <entry>必須？</entry>
        <entry>初期値</entry>
        <entry>値の例</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry>mode</entry>
        <entry>任意</entry>
        <entry>cbc</entry>
        <entry>cbc, cfb, ecb, nofb, ofb, stream</entry>
       </row>
       <row>
        <entry>algorithms_dir</entry>
        <entry>任意</entry>
        <entry>ini_get('mcrypt.algorithms_dir')</entry>
        <entry>アルゴリズムモジュールのある場所</entry>
       </row>
       <row>
        <entry>modes_dir</entry>
        <entry>任意</entry>
        <entry>ini_get('mcrypt.modes_dir')</entry>
        <entry>モードモジュールのある場所</entry>
       </row>
       <row>
        <entry>iv</entry>
        <entry>必須</entry>
        <entry>N/A</entry>
        <entry>通常は 8, 16, あるいは 32 バイトのバイナリデータ。暗号の形式に依存する</entry>
       </row>
       <row>
        <entry>key</entry>
        <entry>必須</entry>
        <entry>N/A</entry>
        <entry>通常は 8, 16, あるいは 32 バイトのバイナリデータ。暗号の形式に依存する</entry>
       </row>
      </tbody>
     </tgroup>
    </table>
  </para>

  <example>
   <title>Blowfish を用いた 暗号化/復号化</title>
   <programlisting role="php">
<![CDATA[
<?php
//$key は、ここより以前で生成されているものとする
$iv_size = mcrypt_get_iv_size(MCRYPT_BLOWFISH, MCRYPT_MODE_CBC);
$iv = mcrypt_create_iv($iv_size, MCRYPT_DEV_URANDOM);
$fp = fopen('encrypted-file.enc', 'wb');
fwrite($fp, $iv);
$opts = array('mode'=>'cbc','iv'=>$iv, 'key'=>$key);
stream_filter_append($fp, 'mcrypt.blowfish', STREAM_FILTER_WRITE, $opts);
fwrite($fp, 'message to encrypt');
fclose($fp);

// 復号化する...
$fp = fopen('encrypted-file.enc', 'rb');
$iv = fread($fp, $iv_size = mcrypt_get_iv_size(MCRYPT_BLOWFISH, MCRYPT_MODE_CBC));
$opts = array('mode'=>'cbc','iv'=>$iv, 'key'=>$key)
stream_filter_append($fp, 'mdecrypt.blowfish', STREAM_FILTER_READ, $opts);
$data = rtrim(stream_get_contents($fp));//trims off null padding
fclose($fp);
echo $data;
?>
]]>
    </programlisting>
   </example>
   <example>
    <title>ファイルを AES-128 CBC と SHA256 HMAC で暗号化する</title>
   <programlisting role="php">
<![CDATA[
<?php
AES_CBC::encryptFile($password, "plaintext.txt", "encrypted.enc");
AES_CBC::decryptFile($password, "encrypted.enc", "decrypted.txt");

class AES_CBC
{
   protected static $KEY_SIZES = array('AES-128'=>16,'AES-192'=>24,'AES-256'=>32);
   protected static function key_size() { return self::$KEY_SIZES['AES-128']; } //default AES-128
   public static function encryptFile($password, $input_stream, $aes_filename){
      $iv_size = mcrypt_get_iv_size(MCRYPT_RIJNDAEL_128, MCRYPT_MODE_CBC);
      $fin = fopen($input_stream, "rb");
      $fc = fopen($aes_filename, "wb+");
      if (!empty($fin) && !empty($fc)) {
         fwrite($fc, str_repeat("_", 32) );//placeholder, SHA256 HMAC will go here later
         fwrite($fc, $hmac_salt = mcrypt_create_iv($iv_size, MCRYPT_DEV_URANDOM));
         fwrite($fc, $esalt = mcrypt_create_iv($iv_size, MCRYPT_DEV_URANDOM));
         fwrite($fc, $iv = mcrypt_create_iv($iv_size, MCRYPT_DEV_URANDOM));
         $ekey = hash_pbkdf2("sha256", $password, $esalt, $it=1000, self::key_size(), $raw=true);
         $opts = array('mode'=>'cbc', 'iv'=>$iv, 'key'=>$ekey);
         stream_filter_append($fc, 'mcrypt.rijndael-128', STREAM_FILTER_WRITE, $opts);
         $infilesize = 0;
         while (!feof($fin)) {
            $block = fread($fin, 8192);
            $infilesize+=strlen($block);
            fwrite($fc, $block);
         }
         $block_size = mcrypt_get_block_size(MCRYPT_RIJNDAEL_128, MCRYPT_MODE_CBC);
         $padding = $block_size - ($infilesize % $block_size);//$padding is a number from 1-16
         fwrite($fc, str_repeat(chr($padding), $padding) );//perform PKCS7 padding
         fclose($fin);
         fclose($fc);
         $hmac_raw = self::calculate_hmac_after_32bytes($password, $hmac_salt, $aes_filename);
         $fc = fopen($aes_filename, "rb+");
         fwrite($fc, $hmac_raw);//overwrite placeholder
         fclose($fc);
      }
   }
   public static function decryptFile($password, $aes_filename, $out_stream) {
      $iv_size = mcrypt_get_iv_size(MCRYPT_RIJNDAEL_128, MCRYPT_MODE_CBC);
      $hmac_raw = file_get_contents($aes_filename, false, NULL,  0, 32);
      $hmac_salt = file_get_contents($aes_filename, false, NULL, 32, $iv_size);
      $hmac_calc = self::calculate_hmac_after_32bytes($password, $hmac_salt, $aes_filename);
      $fc = fopen($aes_filename, "rb");
      $fout = fopen($out_stream, 'wb');
      if (!empty($fout) && !empty($fc) && self::hash_equals($hmac_raw,$hmac_calc)) {
         fread($fc, 32+$iv_size);//skip sha256 hmac and salt
         $esalt = fread($fc, $iv_size);
         $iv    = fread($fc, $iv_size);
         $ekey = hash_pbkdf2("sha256", $password, $esalt, $it=1000, self::key_size(), $raw=true);
         $opts = array('mode'=>'cbc', 'iv'=>$iv, 'key'=>$ekey);
         stream_filter_append($fc, 'mdecrypt.rijndael-128', STREAM_FILTER_READ, $opts);
         while (!feof($fc)) {
            $block = fread($fc, 8192);
            if (feof($fc)) {
               $padding = ord($block[strlen($block) - 1]);//assume PKCS7 padding
               $block = substr($block, 0, 0-$padding);
            }
            fwrite($fout, $block);
         }
         fclose($fout);
         fclose($fc);
      }
   }
   private static function hash_equals($str1, $str2) {
      if(strlen($str1) == strlen($str2)) {
         $res = $str1 ^ $str2;
         for($ret=0,$i = strlen($res) - 1; $i >= 0; $i--) $ret |= ord($res[$i]);
         return !$ret;
      }
      return false;
   }
   private static function calculate_hmac_after_32bytes($password, $hsalt, $filename) {
      static $init=0;
      $init or $init = stream_filter_register("user-filter.skipfirst32bytes", "FileSkip32Bytes");
      $stream = 'php://filter/read=user-filter.skipfirst32bytes/resource=' . $filename;
      $hkey = hash_pbkdf2("sha256", $password, $hsalt, $iterations=1000, 24, $raw=true);
      return hash_hmac_file('sha256', $stream, $hkey, $raw=true);
   }
}
class FileSkip32Bytes extends php_user_filter
{
   private $skipped=0;
   function filter($in, $out, &$consumed, $closing)  {
      while ($bucket = stream_bucket_make_writeable($in)) {
         $outlen = $bucket->datalen;
         if ($this->skipped<32){
            $outlen = min($bucket->datalen,32-$this->skipped);
            $bucket->data = substr($bucket->data, $outlen);
            $bucket->datalen = $bucket->datalen-$outlen;
            $this->skipped+=$outlen;
         }
         $consumed += $outlen;
         stream_bucket_append($out, $bucket);
      }
      return PSFS_PASS_ON;
   }
}
class AES_128_CBC extends AES_CBC {
   protected static function key_size() { return self::$KEY_SIZES['AES-128']; }
}
class AES_192_CBC extends AES_CBC {
   protected static function key_size() { return self::$KEY_SIZES['AES-192']; }
}
class AES_256_CBC extends AES_CBC {
   protected static function key_size() { return self::$KEY_SIZES['AES-256']; }
}
]]>
    </programlisting>
   </example>
  </section>
 </section>

</appendix>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
