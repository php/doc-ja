<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: ea62fb83196997032641b50fe44420305466195e Maintainer: hirokawa Status: ready -->
<!-- CREDITS: shimooka,mumumu -->
<refentry xmlns="http://docbook.org/ns/docbook" xml:id="function.file-put-contents">
 <refnamediv>
  <refname>file_put_contents</refname> 
  <refpurpose>データをファイルに書き込む</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type class="union"><type>int</type><type>false</type></type><methodname>file_put_contents</methodname>
   <methodparam><type>string</type><parameter>filename</parameter></methodparam>
   <methodparam><type>mixed</type><parameter>data</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>flags</parameter><initializer>0</initializer></methodparam>
   <methodparam choice="opt"><type class="union"><type>resource</type><type>null</type></type><parameter>context</parameter><initializer>&null;</initializer></methodparam>
  </methodsynopsis>
  <para> 
   この関数は、<function>fopen</function>、<function>fwrite</function>、
   <function>fclose</function> を続けてコールしてデータをファイルに書き込むのと等価です。
  </para>
  <para>
   <parameter>filename</parameter> が存在しない場合はファイルを作成します。
   存在する場合はそのファイルを上書きします。ただし
   <constant>FILE_APPEND</constant> フラグが設定されている場合は別です。
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>filename</parameter></term>
     <listitem>
      <para>
       データを書き込むファイルへのパス。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>data</parameter></term>
     <listitem>
      <para>
       書き込むデータ。<type>string</type>, <type>array</type>
       もしくは <type>stream</type> リソースのいずれかを指定可能です。
      </para>
      <para>
       <parameter>data</parameter> が <type>stream</type> リソースの場合は、
       ストリームのバッファに残っている内容が指定したファイルにコピーされます。
       これは、<function>stream_copy_to_stream</function> の挙動と似ています。
      </para>
      <para>
       <parameter>data</parameter> に一次元の配列を指定することもできます。この場合は
       <literal>file_put_contents($filename, implode('', $array))</literal>
       と同じ意味になります。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>flags</parameter></term>
     <listitem>
      <para>
       <parameter>flags</parameter> の値は、以下のフラグを組み合わせたものとなります
       組み合わせる際には、論理 OR
       (<literal>|</literal>) 演算子で連結します。
      </para>
      <para>
       <table>
        <title>使用できるフラグ</title>
        <tgroup cols="2">
         <thead>
          <row>
           <entry>フラグ</entry>
           <entry>説明</entry>
          </row>
         </thead>
         <tbody>
          <row>
           <entry>
            <constant>FILE_USE_INCLUDE_PATH</constant>
           </entry>
           <entry>
            <parameter>filename</parameter> をインクルードディレクトリから探します。
            詳細な情報は <link linkend="ini.include-path">include_path</link> を参照ください。
           </entry>
          </row>
          <row>
           <entry>
            <constant>FILE_APPEND</constant>
           </entry>
           <entry>
            <parameter>filename</parameter> がすでに存在する場合に、
            データをファイルに上書きするするのではなく追記します。
           </entry>
          </row>
          <row>
           <entry>
            <constant>LOCK_EX</constant>
           </entry>
           <entry>
            書き込み処理中に、ファイルに対する排他ロックを確保します。
            つまり、<function>fopen</function> の呼び出しから
            <function>fwrite</function> の呼び出しまでの間に
            <function>flock</function> の呼び出しが発生するということです。
            これは、モード "x" で
            <function>fopen</function> を呼び出すことと同等ではありません。
           </entry>
          </row>
         </tbody>
        </tgroup>
       </table>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>context</parameter></term>
     <listitem>
      <para>
       <function>stream_context_create</function>
       で作成したコンテキストリソース。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   この関数はファイルに書き込まれたバイト数を返します。
   あるいは失敗した場合には &false; を返します。
  </para>
  &return.falseproblem;
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>シンプルな使用例</title>
    <programlisting role="php">
<![CDATA[
<?php
$file = 'people.txt';
// ファイルをオープンして既存のコンテンツを取得します
$current = file_get_contents($file);
// 新しい人物をファイルに追加します
$current .= "John Smith\n";
// 結果をファイルに書き出します
file_put_contents($file, $current);
?>
]]>
    </programlisting>
   </example>
   <example>
    <title>フラグの使用</title>
    <programlisting role="php">
<![CDATA[
<?php
$file = 'people.txt';
// 新しい人物をファイルに追加します
$person = "John Smith\n";
// 中身をファイルに書き出します。
// FILE_APPEND フラグはファイルの最後に追記することを表し、
// LOCK_EX フラグは他の人が同時にファイルに書き込めないことを表します。
file_put_contents($file, $person, FILE_APPEND | LOCK_EX);
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  &note.bin-safe;
  &tip.fopen-wrapper;
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>fopen</function></member>
    <member><function>fwrite</function></member>
    <member><function>file_get_contents</function></member>
    <member><function>stream_context_create</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
