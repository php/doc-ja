<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 86e6094e86b84a51d00ab217ac50ce8dde33d82a Maintainer: mumumu Status: ready -->

<sect1 xml:id="migration73.incompatible" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>下位互換性のない変更点</title>

 <sect2 xml:id="migration73.incompatible.core">
  <title>PHP コア</title>

  <sect3 xml:id="migration73.incompatible.core.heredoc-nowdoc">
   <title>ヒアドキュメント/Nowdoc の終了ラベルの解釈</title>

   <para>
    <link
    linkend="migration73.new-features.core.heredoc">ヒアドキュメント/Nowdoc
    の文法が柔軟になった</link> ことにより、本体の内部に終了ラベルが含まれた
    ドキュメンテーション文字列は、エラーが発生するか、解釈の振る舞いが変わる可能性があります。
    たとえば、以下のような場合です: <informalexample> <programlisting role="php">
<![CDATA[
<?php
$str = <<<FOO
abcdefg
   FOO
FOO;
?>
]]>
     </programlisting>
    </informalexample>
    インデントされた <literal>FOO</literal>
    が入ったとしても、以前は特別な意味は何もありませんでした。
    ですが、このバージョンからは ヒアドキュメントの終了と解釈され、
    後に続く <literal>FOO;</literal> が syntax error になるでしょう。
    この問題は、文字列の内容に決して含まれることのない終了ラベルを選ぶことで常に回避できます。
   </para>
  </sect3>

  <sect3 xml:id="migration73.incompatible.core.continue-targeting-switch">
   <title>switch の制御フローを変更する continue 文は警告が出る</title>

   <para>
    <literal>switch</literal> の制御フローを変更することを狙った 
    <literal>continue</literal> 文は、警告が出るようになりました。
    PHP では、このような <literal>continue</literal> 文は
    <literal>break</literal> と同等で、他のプログラミング言語では
    <literal>continue 2</literal> と同じように振る舞うのとは対照的です。
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
while ($foo) {
    switch ($bar) {
      case "baz":
         continue;
         // Warning: "continue" targeting switch is equivalent to
         //          "break". Did you mean to use "continue 2"?
   }
}
?>
]]>
     </programlisting>
    </informalexample>
   </para>
  </sect3>

  <sect3 xml:id="migration73.incompatible.core.arrayaccess">
   <title>ArrayAccess を実装したオブジェクトに対する、
   数値形式の文字列キーの解釈が厳密に</title>

   <para>
    <literal>$obj</literal> が <classname>ArrayAccess</classname>
    を実装したオブジェクトで、
    <literal>"123"</literal> が数値の文字列リテラルだった場合、
    この <literal>"123"</literal>
    は暗黙のうちに整数型に変換されなくなりました。
    つまり、<literal>$obj->offsetGet(123)</literal> ではなく、
    <literal>$obj->offsetGet("123")</literal> がコールされるようになります。
    これは、リテラルでない値の既存の振る舞いに一致します。
    配列の振る舞いには全く影響しません。
    配列については、数値の文字列リテラルのキーは、整数型に暗黙のうちに変換され続けます。
   </para>
  </sect3>

  <sect3 xml:id="migration73.incompatible.core.static-properties">
   <title>static なプロパティが参照の代入によって分裂しなくなった</title>

   <para>
    PHP では、子クラスで明示的にオーバーライドされない限り、static
    なプロパティが継承関係にあるクラスの間で共有されます。しかし、
    実装上の副作用により、参照を代入することによって、static
    なプロパティが異なる値になる可能性がありました。こうした抜け穴がこのバージョンでは修正されました。
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
class Test {
    public static $x = 0;
}
class Test2 extends Test { }

Test2::$x = &$x;
$x = 1;

var_dump(Test::$x, Test2::$x);
// Previously: int(0), int(1)
// Now:        int(1), int(1)
?>
]]>
     </programlisting>
    </informalexample>
   </para>
  </sect3>

  <sect3 xml:id="migration73.incompatible.core.reference-unwrapping">
   <title>配列から返される参照とプロパティのアクセスは、即座に分割される</title>

   <para>
    配列から返された参照と、プロパティのアクセスは、
    アクセスの一部として別に扱われるようになりました。
    これは、配列へのアクセスと、配列の値を使う間に、値を変更できなくなったということです。
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
$arr = [1];
$ref =& $arr[0];
var_dump($arr[0] + ($arr[0] = 2));
// Previously: int(4), Now: int(3)
?>
]]>
     </programlisting>
    </informalexample>
    これにより、参照と参照でない値の振る舞いが一貫したものになります。
    単一の式の中で値を読んだり書いたりする場合の振る舞いは未定義のままであり、
    将来再び動作が変更される可能性があることに注意して下さい。
   </para>
  </sect3>

  <sect3 xml:id="migration73.incompatible.core.traversable-unpacking">
   <title>Traversable
   への引数のアンパックを整数でないキーで行うことはサポートされない</title>

   <para>
    <classname>Traversable</classname>
    への引数のアンパックを整数でないキーで行うコードは動作しなくなりました。
    次のようなコードが、 PHP 5.6 から 7.2 の間は偶然動いていました。
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
function foo(...$args) {
    var_dump($args);
}
function gen() {
    yield 1.23 => 123;
}
foo(...gen());
?>
]]>
     </programlisting>
    </informalexample>
   </para>
  </sect3>

  <sect3 xml:id="migration73.incompatible.core.misc">
   <title>その他雑多な変更</title>

   <para>
    <filename>ext_skel</filename> ユーティリティは、
    新しいオプションで完全に再設計され、いくつかの古いオプションは削除されました。
    このユーティリティは、PHP
    で書かれており、それ以外の外部への依存はありません。
   </para>

   <para>
    BeOS のサポートが削除されました。
   </para>

   <para>
    <literal>EH_THROW</literal> モードの、警告を自動的に例外に変換することで
    スローされる例外(e.g. いくつかの <classname>DateTime</classname> 例外)
    は、<function>error_get_last</function> 関数の状態を収集しなくなりました。
    そうした例外は、手動でスローされる例外と同じように動くようになります。
   </para>

   <para>
    <classname>TypeError</classname> は、<literal>integer</literal> と
    <literal>boolean</literal> ではなく、 
    それぞれ <literal>int</literal> と <literal>bool</literal>
    を誤った型として報告するようになります。
   </para>

   <para>
    <function>compact</function>
    関数に渡された未定義の値は、NOTICEレベルの警告を発生させるようになります。
   </para>

   <para>
    <function>getimagesize</function> 関数と関連する関数は、BMP画像の MIME Type
    を <literal>image/x-ms-bmp</literal> ではなく
    <literal>image/bmp</literal> と報告するようになりました。
    なぜなら、後者は IANA に登録されているから (<link
    xlink:href="&url.rfc;7903">RFC 7903</link> を参照) です。
   </para>

   <para>
    <function>stream_socket_get_name</function> 関数は、
    ブラケットでラップされた IPv6 アドレスを返すようになります。
    たとえば、<literal>"::1:1337"</literal> ではなく、
    <literal>"[::1]:1337"</literal> を返すようになるでしょう。
   </para>
  </sect3>
 </sect2>

 <sect2 xml:id="migration73.incompatible.bc">
  <title>BCMath</title>

  <para>
   <link linkend="ref.bc">BCMath 関数</link> でスローされる全ての例外は、
   PHP のエラーハンドリングの機構を使うようになりました。
   以前は、いくつかのエラーが stderr に直接出力されていました。
  </para>

  <para>
   <function>bcmul</function> および <function>bcpow</function>
   関数は、指定された精度の数値を返すようになりました。
   以前は、返される値の後ろが、0埋めされることで省略される可能性がありました。
  </para>
 </sect2>

 <sect2 xml:id="migration73.incompatible.imap">
  <title>IMAP, POP3 および NNTP</title>

  <para>
   <command>rsh</command>/<command>ssh</command>
   ログインはデフォルトで無効になりました。
   これらを有効にしたい場合、<link
   linkend="ini.imap.enable-insecure-rsh">imap.enable_insecure_rsh</link>
   を使って下さい。
   IMAPライブラリは <command>rsh</command>/<command>ssh</command>
   コマンドに渡す前にメールボックス名をフィルタしないので、
   <command>rsh</command>/<command>ssh</command> を有効にした状態で
   この関数に信頼できないデータを渡すことは安全ではありません。
  </para>
 </sect2>

 <sect2 xml:id="migration73.incompatible.mbstring">
  <title>マルチバイト文字列</title>

  <para>
    名前付きキャプチャのサポートが追加されたことにより、
    <literal>mb_ereg_*()</literal>
    におけるパターンに名前付きキャプチャを使うと、これまでと異なる振る舞いをします。
    特に、名前付きキャプチャが matches の一部になった場合、
    <function>mb_ereg_replace</function> はこれを追加の文法に従って解釈します。
    さらに詳しい情報は、<link
    linkend="migration73.new-features.mbstring.named-captures">名前付きキャプチャ
    </link> を参照ください。
  </para>
 </sect2>

 <sect2 xml:id="migration73.incompatible.mysqli">
  <title>MySQL 改良版拡張モジュール</title>

  <para>
   プリペアドステートメント が、カラムに小数の桁数を指定する(e.g.
   マイクロ秒を使う場合 <literal>TIMESTAMP(6)</literal> のようにする)
   ことによって、 <literal>DATETIME</literal>, <literal>TIME</literal> および
   <literal>TIMESTAMP</literal> 型の秒の小数部を報告するようになりました。
   以前のバージョンでは、秒の小数部は戻り値から単に省略されていました。
  </para>
 </sect2>

 <sect2 xml:id="migration73.incompatible.pdo-mysql">
  <title>MySQL関数 (PDO_MYSQL)</title>

  <para>
   プリペアドステートメント が、カラムに小数の桁数を指定する(e.g.
   マイクロ秒を使う場合 <literal>TIMESTAMP(6)</literal> のようにする)
   ことによって、<literal>DATETIME</literal>, <literal>TIME</literal> および
   <literal>TIMESTAMP</literal> 型の秒の小数部を報告するようになりました。
   以前のバージョンでは、秒の小数部は戻り値から単に省略されていました。
   この変更は、<link
   linkend="ref.pdo-mysql">PDO_MYSQL</link>
   のプリペアドステートメントをエミュレートする機能を無効にしていた場合
   (e.g つまり、MySQLネイティブなプリペアの機能を使っていた場合)
   にのみ影響があることに注意して下さい。
   <constant>PDO::ATTR_EMULATE_PREPARES</constant>=&true;
   (これはデフォルトです) にした接続を使う Statement は影響を受けず、
   既に適切な秒の小数部をエンジンから取得していました。
  </para>
 </sect2>

 <sect2 xml:id="migration73.incompatible.reflection">
  <title>リフレクション</title>

  <para>
   <link linkend="book.reflection">リフレクション</link>
   を文字列にエクスポートした場合、<literal>integer</literal> と
   <literal>boolean</literal> ではなく、<literal>int</literal> と
   <literal>bool</literal> をそれぞれ使うようになりました。
  </para>
 </sect2>

 <sect2 xml:id="migration73.incompatible.spl">
  <title>Standard PHP Library (SPL)</title>

  <para>
   <link linkend="book.spl">SPL</link> autoloader が例外をスローした場合、後に続く
   autoloader は実行されなくなりました。以前は、全ての autoloader
   が実行され、例外がチェインしていました。
  </para>
 </sect2>

 <sect2 xml:id="migration73.incompatible.simplexml">
  <title>SimpleXML</title>

  <para>
   数学的な演算 に <link linkend="book.simplexml">SimpleXML</link>
   オブジェクトが含まれていた場合、テキストが <type>int</type> または
   <type>float</type> のうち、より適切なものとして扱われるようになりました。
   以前は値が意図せず <type>int</type> として扱われた場合がありました。
  </para>
 </sect2>

 <sect2 xml:id="migration73.incompatible.cookie-decode">
  <title>外部から入力されるCookie</title>

  <para>
   PHP 7.3.23 以降は、セキュリティ上の理由により、
   外部から入力される Cookie の
   <emphasis>名前</emphasis> はurlデコードされなくなりました。
  </para>
 </sect2>

</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
