<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: f037a94fd276a36a5061b0160fd3c2eafb20d980 Maintainer: mumumu Status: ready -->
<sect1 xml:id="migration83.other-changes" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>その他の変更</title>

 <sect2 xml:id="migration83.other-changes.core">
  <title>PHP コア</title>

  <sect3 xml:id="migration83.other-changes.core.ffi">
   <title>FFI</title>

   <para>
    <link linkend="ini.opcache.preload-user">opcache.preload_user</link> が現在のシステムユーザーに設定されている場合、事前ロードの間に <methodname>FFI::load</methodname> をコールできるようになりました。これより前のバージョンでは、<link linkend="ini.opcache.preload-user">opcache.preload_user</link> が設定されている場合は、事前ロードの間に <methodname>FFI::load</methodname> を呼び出せませんでした。
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.core.fpm">
   <title>FPM</title>

   <para>
    ソケットのパスの長さが OS がサポートする長さ以上の場合、FPM CLI のテストが失敗するようになりました。
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.core.opcache">
   <title>Opcache</title>

   <para>
    CLI SAPI と phpdbg SAPI では、<link linkend="ini.opcache.preload-user">opcache.preload_user</link> ディレクティブを設定しなくても root として事前ロードを実行できるようになりました。これら以外の SAPI では、root として事前ロードを実行する際に このディレクティブの設定が未だ必須です。なぜなら、SAPI が特権を持っていないユーザに移行する前に事前ロードが実行されるからです。
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.core.streams">
   <title>Streams</title>

   <para>
    ソケット接続をブロックする <function>fread</function> 関数は、バッファリングされているデータが存在した場合、追加のデータを待つのではなく、すぐに値を返すようになりました。
   </para>

   <para>
    seek のオフセットが終端を超えた場合でも、memory ストリームは失敗しなくなりました。代わりに、次回書き込まれたときにメモリサイズが増加し、以前の終端からオフセットまでの間は、ファイルを扱っているときのようにゼロバイトで埋められます。
   </para>

   <para>
    <function>stat</function> のファイルアクセス操作が、<function>file_exists</function> 類似の関数と同様に、ストリームのパスではなく、実在のパスを使うようになりました。これはストリームをオープンするときの振る舞いと一致します。
   </para>
  </sect3>
 </sect2>

 <sect2 xml:id="migration83.other-changes.sapi">
  <title>SAPI モジュールへの変更</title>

  <sect3 xml:id="migration83.other-changes.sapi.cli">
   <title>CLI</title>

   <para>
    <constant>STDOUT</constant>, <constant>STDERR</constant>, <constant>STDIN</constant> ストリームは、リソースが破棄される際にクローズされなくなりました。リソースが破棄されるタイミングでは CLI がほぼ終了しているからです。但し、<function>fclose</function> やその類似の関数を使い、これらのストリームを明示的に閉じることは未だできます。
   </para>
  </sect3>
 </sect2>

 <sect2 xml:id="migration83.other-changes.functions">
  <title>変更された関数</title>

  <sect3 xml:id="migration83.other-changes.functions.core">
   <title>PHP コア</title>

   <para>
    <function>gc_status</function> に、以下の8つのフィールドが追加されました:

    <simplelist>
     <member><literal>"running"</literal> => bool</member>
     <member><literal>"protected"</literal> => bool</member>
     <member><literal>"full"</literal> => bool</member>
     <member><literal>"buffer_size"</literal> => int</member>
     <member><literal>"application_time"</literal> => float: gc の合計の実行時間を秒単位で示します(collector_time を含みます)</member>
     <member><literal>"collector_time"</literal> => float: 循環参照を回収するのに使った時間を秒単位で示します(dessructor_time と free_time を含みます)</member>
     <member><literal>"destructor_time"</literal> => float: 循環参照を回収している間に、デストラクタを実行した時間を秒単位で示します</member>
     <member><literal>"free_time"</literal> => float: 循環参照を回収している間に、メモリを開放するのにかかった時間を秒単位で示します</member>
    </simplelist>
   </para>

   <para>
    <function>class_alias</function> は、内部クラスのエイリアスを作成する操作もサポートしました。
   </para>

   <para>
    <code>ini_set('open_basedir', ...);</code> を実行して実行時に <link linkend="ini.open-basedir">open_basedir</link> を設定する場合、親ディレクトリ (<literal>..</literal>) を含んだパスを受け入れなくなりました。これより前のバージョンでは、<literal>..</literal> で始まるパスだけを拒否していました。<literal>..</literal> で始まるパスのみを拒否する制限は、パスの先頭に <literal>./</literal> を付加することで簡単に回避できてしまっていました。
   </para>

   <para>
    ユーザー定義の例外ハンドラは、シャットダウン時の例外もキャッチするようになりました。
   </para>

   <para>
    <function>highlight_string</function> と <function>highlight_file</function> の結果として出力されるHTMLが、変更されました。外側のHTMLタグの間にあるホワイトスペースは削除されます。改行とスペースはHTMLエンティティに変換されなくなっています。HTML全体を <literal>&lt;pre&gt;</literal> タグで囲むようになりました。外側の <literal>&lt;span&gt;</literal> タグは <literal>&lt;code&gt;</literal> タグを使ってマージされました。
   </para>

  </sect3>

  <sect3 xml:id="migration83.other-changes.functions.calendar">
   <title>Calendar</title>

   <para>
    <function>easter_date</function> は、64ビットシステム上で 1970 から 2,000,000,000 までの年の値をサポートしました。これより前のバージョンでは、1970 から 2037 までの年の値だけをサポートしていました。
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.functions.curl">
   <title>Curl</title>

   <para>
    <function>curl_getinfo</function> は、新しく2つの定数をサポートしました: <constant>CURLINFO_CAPATH</constant> と <constant>CURLINFO_CAINFO</constant> です。$option が &null; の場合、以下の追加のキーが含まれるようになります: "capath", "cainfo"
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.functions.dom">
   <title>DOM</title>

   <para>
    <methodname>DOMCharacterData::appendData</methodname> の仮の戻り値の型が、<type>true</type> に変更されました。
   </para>

   <para>
    <methodname>DOMDocument::loadHTML</methodname>, <methodname>DOMDocument::loadHTMLFile</methodname>, <methodname>DOMDocument::loadXML</methodname> ,<methodname>DOMDocument::loadXMLFile</methodname> の仮の戻り値の型が、<type>bool</type> になりました。これより前のバージョンでは、<code>DOMDocument|bool</code> を返すとドキュメントに記されていましたが、PHP 8.0 以降は static にコールできなかったため、 <classname>DOMDocument</classname> が返せていませんでした。
   </para>

  </sect3>

  <sect3 xml:id="migration83.other-changes.functions.gd">
   <title>Gd</title>

   <para>
    <function>imagerotate</function> 関数のシグネチャが変更され、<parameter>ignore_transparent</parameter> パラメータが削除されました。このパラメータは PHP 5.5.0 以降、無視されていたためです。
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.functions.intl">
   <title>Intl</title>

   <para>
    <function>datefmt_set_timezone</function> (とそのエイリアス <methodname>IntlDateformatter::setTimeZone</methodname>) は、成功時に &true; を返すようになりました。これより前のバージョンでは、&null; を返していました。
   </para>

   <para>
    <methodname>IntlBreakiterator::setText</methodname> は、失敗時に &false; を返すようになりました。これより前のバージョンでは、&null; を返していました。 また、成功時に &true; を返すようになりました。これより前のバージョンでは、&null; を返していました。
   </para>

   <para>
    <methodname>IntlChar::enumCharNames</methodname> は、戻り値として boolean を返すようになりました。これより前のバージョンでは、成功時に &null;、失敗時に &false; を返していました。
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.functions.mbstring">
   <title>マルチバイト文字列</title>

   <para>
    <function>mb_strtolower</function>, <function>mb_strtotitle</function>, <function>mb_convert_case</function> は、ギリシャ文字シグマの条件付きケース変換規則を実装しました。<function>mb_convert_case</function> では、条件付きケース変換は <constant>MB_CASE_LOWER</constant> と <constant>MB_CASE_TITLE</constant> モードにのみ適用され、<constant>MB_CASE_LOWER_SIMPLE</constant> と <constant>MB_CASE_TITLE_SIMPLE</constant> には適用されません。 
   </para>

   <para>
    <function>mb_decode_mimeheader</function>  は、RFC 2047 で要求された通りに、Qprint でエンコードされた単語のアンダースコアを解釈するようになりました。つまり、それらはスペースに変換されます。このようにMIMEエンコードされた単語では、アンダースコアは <literal>"=5F"</literal> としてエンコードしなければいけません。
   </para>

   <para>
    <function>mb_encode_mimeheader</function> の実装が変更され、レアケースではあるものの、PHP 8.2 で生の ASCII として渡されていた入力文字列が、transfer_encoding の値でエンコードされる場合があります。
   </para>

   <para>
    <function>mb_encode_mimeheader</function> は、入力文字列が Qprint エンコーディングの場合に、NUL(ゼロ)バイトを削除しなくなりました。これより前のバージョンでは、あるテキストエンコーディングの場合(特に UTF-16 と UTF-32) に NUL バイトが削除され、mb_encode_mimeheader の結果が壊れる場合がありました。
   </para>

   <para>
    <function>mb_detect_encoding</function> の "$strict に true を指定しない" モードが、ドキュメントの通りに振る舞うようになりました。これより前のバージョンでは、入力文字列と同一のバイト(たとえば、最初のバイト) が、候補となるエンコーディングのリスト全てに対して不正と判定された場合でも、false を返していました。もっと一般化すると、不正なバイトが見つかった時点で、候補となるエンコーディングから削除してしまっていました。そして、入力と同一のバイトを削除した場合に、残りのエンコーディングをすべて候補として考慮すべき場合でも、false を返していました。一方で、候補となるエンコーディングが削除されて残りがひとつだけになった場合、文字列中で後にどれくらいエンコーディングのエラーが見つかるのかを考慮することなく、その残ったエンコーディングを返していました。この振る舞いは、ドキュメントの以下の説明と一致しません: "strict が false の場合、 もっとも近いと判定された文字エンコーディングが返されます"
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.functions.mysqli">
   <title>mysqli</title>

   <para>
    <function>mysqli_fetch_object</function> は、<parameter>$constructor_args</parameter> が空でないのに、クラスにコンストラクタが存在しない場合、 <classname>Exception</classname> ではなく <classname>ValueError</classname> を発生させるようになりました。
   </para>

   <para>
    <function>mysqli_poll</function> は、<parameter>$read</parameter> と <parameter>$error</parameter> が両方渡されない場合、<classname>ValueError</classname> を発生させるようになりました。
   </para>

   <para>
    <function>mysqli_field_seek</function> と <methodname>mysqli_result::field_seek</methodname> の戻り値の型が、<type>bool</type> ではなく <type>true</type> に変更されました。
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.functions.odbc">
   <title>ODBC</title>

   <para>
    <function>odbc_autocommit</function >は、<parameter>$enable</parameter> パラメータで &null; を受け入れるようになりました。&null; を渡すと、パラメータをひとつ渡した場合と同じ振る舞いをします。つまり、自動コミットが有効かどうかだけを示す動きをします。
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.functions.pgsql">
   <title>PostgreSQL</title>

   <para>
    <function>pg_fetch_object</function> は、<parameter>$constructor_args</parameter> が空でないのに、クラスにコンストラクタが存在しない場合、<classname>Exception</classname> ではなく <classname>ValueError</classname> を発生させるようになりました。
   </para>

   <para>
    <function>pg_insert</function> は、指定されたテーブルが無効な場合に、<constant>E_WARNING</constant> ではなく <classname>ValueError</classname> を発生させるようになりました。
   </para>

   <para>
    <function>pg_insert</function> と <function>pg_convert</function> は、フィールドの値/タイプ が PostgreSQL の型と一致しない場合に、<constant>E_WARNING</constant> ではなく <classname>ValueError</classname> または <classname>TypeError</classname> を発生させるようになりました。
   </para>

   <para>
    <function>pg_fetch_result</function>, <function>pg_field_prtlen</function>, <function>pg_field_is_null</function> のパラメータ <parameter>$row</parameter> は、nullable になりました。
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.functions.random">
   <title>Random</title>

   <para>
    <function>mt_srand</function> と <function>srand</function> は、ランダムなシードを使うかを決めるために、引数の数をチェックしなくなりました。&null; を渡すとランダムなシードを生成します。<literal>0</literal> を渡すとゼロをシードとして使います。これらの関数の振る舞いは、<methodname>Random\Engine\Mt19937::__construct</methodname> と一貫したものになりました。
   </para>

  </sect3>

  <sect3 xml:id="migration83.other-changes.functions.reflection">
   <title>リフレクション</title>

   <para>
    <methodname>ReflectionClass::getStaticProperties</methodname> の戻り値の型は、nullable ではなくなりました。
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.functions.standard">
   <title>標準ライブラリ</title>

   <para>
    <function>unserialize</function> で発生していた <constant>E_NOTICE</constant> は、<constant>E_WARNING</constant> に変更されました。
    <!-- RFC: https://wiki.php.net/rfc/improve_unserialize_error_handling -->
   </para>

   <para>
    処理されていない入力が残っている場合に、<function>unserialize</function> は新たに <constant>E_WARNING</constant> を発生させるようになりました。
    <!-- RFC: https://wiki.php.net/rfc/unserialize_warn_on_trailing_data -->
   </para>

   <para>
    <function>array_pad</function> は、配列が持つことができる最大の要素数だけを制限するようになりました。これより前のバージョンでは、一度に追加できる最大の要素数が 1048576 になっていました。
   </para>

   <para>
    <function>strtok</function> は、トークンの分割を開始した際にトークンが与えられていない場合、<constant>E_WARNING</constant> を発生させるようになりました。
   </para>

   <para>
    <function>password_hash</function> は、ソルトの生成が失敗した場合に、<classname>ValueError</classname> の <parameter>$previous</parameter> (直前にスローされた例外) として、既に存在する <classname>Random\RandomException</classname> をチェインさせるようになりました。
   </para>

   <para>
    <function>proc_open</function> の <parameter>$command</parameter> に配列を指定する場合、空でない要素を少なくともひとつ含んでいることが必須になりました。そうでない場合、<classname>ValueError</classname> がスローされます。
   </para>

   <para>
    <function>array_sum</function> と <function>array_product</function> は、配列に含まれる値が int/float に変換できない場合、警告を発生させるようになりました。これより前のバージョンでは、配列とオブジェクトは無視され、それら以外の値は int にキャストされていました。さらに、数値へのキャストを定義しているオブジェクト (例: <link linkend="book.gmp">GMP</link>) は、無視されるのではなく、数値に変換されるようになっています。
    <!-- RFC: https://wiki.php.net/rfc/saner-array-sum-product -->
   </para>

   <para>
    <function>number_format</function> の <parameter>$decimal</parameter> パラメータは、負の整数値の四捨五入も扱うようになりました。つまり、<parameter>$decimal</parameter> が負の値の場合、<parameter>$num</parameter> は 小数点以下の有効桁数 <parameter>$decimals</parameter> 桁に丸められます。これより前のバージョンでは、負の <parameter>$decimals</parameter> を指定しても、黙って無視され、数値は小数点以下が0桁になるように丸められていました。
   </para>

   <para>
    <function>strrchr</function> に <parameter>$before_needle</parameter> が追加されました。これは <function>strstr</function> や <function>stristr</function> の対応するパラメータと、似た振る舞いをします。
   </para>

   <para>
    <function>str_getcsv</function> と <function>fgetcsv</function> は、最後のフィールドに終端されていないクォートだけが含まれている場合、null バイトの文字列をひとつ返すのではなく、空文字列を返すようになりました。
   </para>
  </sect3>

 </sect2>

 <sect2 xml:id="migration83.other-changes.extensions">
  <title>拡張モジュールへのその他の変更</title>

  <sect3 xml:id="migration83.other-changes.extensions.core">
   <title>PHP コア</title>

   <para>
    内部オブジェクトで、_IS_NUMBER キャストを実装しているものの、加算と減算の振る舞いを上書きする do_operator ハンドラを実装していない場合があります。この場合でも、<code>$o += 1</code> や <code>$o -= 1</code> をあたかも実行したかのように、値をインクリメント / デクリメントできるようになりました。
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.extensions.dom">
   <title>DOM</title>

   <para>
    DOM の寿命を管理する仕組みが書き直され、暗黙のうちに削除されていたノードが取得できるようになりました。これより前のバージョンでは、削除されていたノードを取得しようとすると例外が発生していました。
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.extensions.sqlite3">
   <title>SQLite3</title>

   <para>
    <classname>SQLite3</classname> クラスは、<classname>Exception</classname> ではなく、(<classname>Exception</classname> を継承した) <classname>SQLite3Exception</classname> をスローするようになりました。
   </para>

   <para>
    SQLite のエラーコードは、エラーメッセージに含められるのではなく、例外に渡されるようになりました。
   </para>

  </sect3>
 </sect2>

 <sect2 xml:id="migration83.other-changes.ini">
  <title>INI ファイルの扱いの変更</title>

  <itemizedlist>
   <listitem>
    <para>
     <literal>assert.*</literal> INI 設定は、推奨されなくなりました。
     以下の INI 設定が該当します:
     <simplelist>
      <member><link linkend="ini.assert.active">assert.active</link></member>
      <member><link linkend="ini.assert.bail">assert.bail</link></member>
      <member><link linkend="ini.assert.callback">assert.callback</link></member>
      <member><link linkend="ini.assert.exception">assert.exception</link></member>
      <member><link linkend="ini.assert.warning">assert.warning</link></member>
     </simplelist>
     これらの設定値がデフォルト値の場合、推奨されない警告は発生しません。<link linkend="ini.zend.assertions">zend.assertions</link> を代わりに使うべきです。
    </para>
   </listitem>
   <listitem>
    <para>
     <!--<link linkend="ini.zend.max_allowed_stack_size">-->zend.max_allowed_stack_size<!--</link>-->
    は、許可される最大のスタックサイズの値を設定するための、新しい INI ディレクティブです。設定できる値は、<literal>0</literal> (プロセスやスレッドの、スタックサイズの最大値を用います)、<literal>-1</literal> (無制限)、そしてバイト単位の正の数値です。デフォルトは <literal>0</literal> です。プロセスやスレッドのスタックサイズの最大値がわからない場合、既知のシステムのデフォルト値を使います。この値に大き過ぎる値を設定すると、スタックサイズの制限を無効にすることと同じ効果があります。ファイバーは 許可される最大のスタックサイズとして fiber.stack_size の値を使います。プロセスのコールスタックが `zend.max_allowed_stack_size - zend.reserved_stack_size` バイトを超えると、スタックオーバーフローが引き起こすセグメンテーションフォルトを防ぐため、<classname>Error</classname> がスローされます。これは、デバッグを容易にすることが目的です。スタックサイズは、制御されていない再帰処理によって増加します。増加する範囲は、内部関数やマジックメソッド <link linkend="object.tostring">__toString()</link>, <link linkend="object.clone">__clone()</link>, <link linkend="object.sleep">__sleep()</link>, <link linkend="object.destruct">__destruct()</link> 内も含みます。この機能はスタックバッファのオーバーフローとは無関係ですし、セキュリティのための機能でもありません。
    </para>
   </listitem>
   <listitem>
    <para>
     <!--<link linkend="ini.zend.reserved_stack_size">-->zend.reserved_stack_size<!--</link>--> は、予約済みのスタックサイズをバイト単位で設定するための、新しい INI ディレクティブです。許可されたスタックサイズの最大値から、この値がバッファとして引かれ、スタックサイズがチェックされます。
    </para>
   </listitem>
   </itemizedlist>
 </sect2>

 <sect2 xml:id="migration83.other-changes.performance">
  <title>パフォーマンスに関わる変更</title>

  <sect3 xml:id="migration83.other-changes.performance.dom">
   <title>DOM</title>

   <para>
    <classname>DOMNodeList</classname> をループさせた場合、キャッシュを使うようになりました。よって、ノードをリクエストする処理に、デフォルトで O(n^2) 時間かかることはなくなりました。
   </para>

   <para>
    ノードからテキストを取得する際に、メモリを確保する処理を避けるようになりました。この結果、パフォーマンスが向上しています。
   </para>

   <para>
    <methodname>DOMChildNode::remove</methodname> は、計算量が O(1) で実行されるようになりました。
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.performance.standard">
   <title>標準ライブラリ</title>

   <para>
    <function>file</function> 関数の flags パラメータのエラーチェックは、約7% 高速になりました。
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.performance.spl">
   <title>Standard PHP Library(SPL)</title>

   <para>
    <classname>RecursiveDirectoryIterator</classname> を使ってディレクトリをループする場合の、I/O が削減されました。
   </para>
  </sect3>
 </sect2>

</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
