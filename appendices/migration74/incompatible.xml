<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: c308ed37a98decb1959ed47dc149a43d6c71ec60 Maintainer: mumumu Status: ready -->

<sect1 xml:id="migration74.incompatible" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>下位互換性のない変更点</title>

 <sect2 xml:id="migration74.incompatible.core">
  <title>PHP コア</title>

  <sect3 xml:id="migration74.incompatible.core.non-array-access">
   <title>配列でない値を配列スタイルでアクセスした場合</title>

   <para>
    <type>null</type>, <type>bool</type>,
    <type>int</type>, <type>float</type> または <type>resource</type>
    型を (<literal>$null["key"]</literal> のように)
    配列としてアクセスしようとすると、警告が生成されるようになりました。
   </para>
  </sect3>

  <sect3 xml:id="migration74.incompatible.core.get-declared-classes">
   <title><function>get_declared_classes</function> 関数</title>

   <para>
    <function>get_declared_classes</function>
    関数は、まだインスタンス化されていない無名クラスを返さなくなりました。
   </para>
  </sect3>

  <sect3 xml:id="migration74.incompatible.core.fn">
   <title><literal>fn</literal> キーワード</title>

   <para>
    <literal>fn</literal>
    は、予約語になりました。特に、関数名やクラス名として使うことはできなくなりました。メソッド名やクラスの定数名の場合は使用できます。
   </para>
  </sect3>

  <sect3 xml:id="migration74.incompatible.core.php-tag">
   <title>ファイルの最後の <literal>&lt;?php</literal> タグ</title>

   <para>
    ファイルの最後の (改行が最後に付かない) <literal>&lt;?php</literal>
    タグは、PHPタグの開始タグとして解釈されるようになりました。以前は、短縮型の開始タグ <literal>&lt;?</literal> の後にリテラル
    <literal>php</literal>
    を続けたものとして解釈された結果文法エラーになる (<literal>short_open_tag=1</literal>
    の場合) か、<literal>&lt;?php</literal> という文字列リテラルとして解釈されていました (<literal>short_open_tag=0</literal>
    の場合) 。
   </para>
  </sect3>

  <sect3 xml:id="migration74.incompatible.core.stream-wrappers">
   <title>ストリームラッパー</title>

   <para>
    ストリーム上で include/require
    を使う場合、<methodname>streamWrapper::stream_set_option</methodname> が
    <constant>STREAM_OPTION_READ_BUFFER</constant>
    オプション付きで呼び出されるようになります。カスタムのストリームラッパーの実装は
    警告を回避するために <methodname>streamWrapper::stream_set_option</methodname>
    を実装する必要があるかもしれません (不十分な実装に対しては常に &false;
    を返します)
   </para>
  </sect3>

  <sect3 xml:id="migration74.incompatible.core.serialization">
   <title>シリアル化</title>

   <para>
    シリアル化フォーマット <literal>o</literal> は削除されました。
    PHP
    によって生成されなくなるので、手動で組まれた文字列のシリアル化を復元する場合のみ、壊れる場合があります。
   </para>
  </sect3>

  <sect3 xml:id="migration74.incompatible.core.password-algorithm-constants">
   <title>パスワードアルゴリズムの定数</title>

   <para>
    パスワードハッシュのアルゴリズムの識別子は、数値型ではなく、nullable
    な文字列型になりました。
   </para>

   <itemizedlist>
    <listitem>
     <simpara>
      <constant>PASSWORD_DEFAULT</constant> は int型の 1 でしたが、
      string の '2y' になりました。
      (PHP 7.4.0, 7.4.1, 7.4.2 では &null; でした)
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <constant>PASSWORD_BCRYPT</constant> は int型の 1 でしたが、string の
      '2y' になりました。
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <constant>PASSWORD_ARGON2I</constant> は int型の 2 でしたが、string の
      'argon2i' になりました。
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <constant>PASSWORD_ARGON2ID</constant> は int型の 3 でしたが、string の
      'argon2id' になりました。
     </simpara>
    </listitem>
   </itemizedlist>

   <para>
    PASSWORD_DEFAULT,
    PASSWORD_BCRYPT, PASSWORD_ARGON2I, および PASSWORD_ARGON2ID
    定数を正しく使っているアプリケーションは、正しく動作し続けるはずです。
   </para>
  </sect3>

  <sect3 xml:id="migration74.incompatible.core.htmlentities">
   <title><function>htmlentities</function> 関数</title>

   <para>
    <function>htmlentities</function> 関数は
    基本的なエンティティ置換だけをサポートしているエンコーディングで使われた場合、 (E_STRICT
    ではなく) E_NOTICE を発生させるようになりました。E_NOTICE
    が発生するのは、<function>htmlspecialchars</function> の場合と同等です。
   </para>
  </sect3>

  <sect3 xml:id="migration74.incompatible.core.fread-fwrite">
   <title><function>fread</function> および <function>fwrite</function> 関数</title>

   <para>
    <function>fread</function> と <function>fwrite</function>
    関数は、操作に失敗した場合に &false;
    を返すようになりました。以前は空文字列か 0
    を返していました。EAGAIN/EWOULDBLOCK は、失敗と見做されません。
   </para>
   <para>
    これらの関数は、読み取り専用のリソースに書き込もうとして失敗したような場合に E_NOTICE を発生させるようになりました。
   </para>
  </sect3>

 </sect2>

 <sect2 xml:id="migration74.incompatible.bcmath">
  <title>BCMath</title>

  <para>
   BCMath 関数は、<literal>"32foo"</literal>
   のような不完全な数値が渡された場合に警告を生成するようになりました。以前はそうした引数は0として解釈されていました。
  </para>
 </sect2>

 <sect2 xml:id="migration74.incompatible.curl">
  <title>CURL</title>

  <para>
   <classname>CURLFile</classname>
   をシリアル化しようとすると、例外が発生するようになりました。以前は、シリアル化を復元しようとした場合のみ、例外が発生していました。
  </para>
  <para>
   <constant>CURLPIPE_HTTP1</constant> は非推奨になり、cURL 7.62.0
   からサポートされなくなりました。
  </para>
  <para>
   <function>curl_version</function> 関数の <literal>$version</literal>
   引数は推奨されません。デフォルトの
   <constant>CURLVERSION_NOW</constant>
   以外の値が渡された場合、警告が生成され、渡された引数は無視されます。
  </para>
 </sect2>

 <sect2 xml:id="migration74.incompatible.datetime">
  <title>日付と時刻</title>

  <para>
   <classname>DateTime</classname> や <classname>DateTimeImmutable</classname>
   のインスタンスに対して <function>var_dump</function>
   類似の関数を呼び出しても、オブジェクトでアクセス可能なプロパティのみを表示するようになりました。
  </para>
  <para>
   <classname>DateInterval</classname> オブジェクトを (
   <literal>==</literal>, <literal>&lt;</literal> などを使って)
   比較した場合、警告が出て常に &false;
   が返されるようになりました。以前は、プロパティがない場合、全ての
   <classname>DateInterval</classname>
   オブジェクトが等しいと見做されていました。
  </para>
 </sect2>

 <sect2 xml:id="migration74.incompatible.intl">
  <title>国際化関数</title>

  <para>
   <function>idn_to_ascii</function> と <function>idn_to_utf8</function>
   関数のデフォルト値は、非推奨の <constant>INTL_IDNA_VARIANT_2003</constant>
   ではなく <constant>INTL_IDNA_VARIANT_UTS46</constant> となりました。
  </para>
 </sect2>

 <sect2 xml:id="migration74.incompatible.mysqli">
  <title>MySQLi</title>

  <para>
   組み込みサーバーの機能は削除されました。少なくとも PHP 7.0
   以降、この機能は壊れていました。
  </para>
  <para>
   ドキュメントに書かれていない <literal>mysqli::$stat</literal>
   プロパティは削除され、<methodname>mysqli::stat</methodname>
   に置き換えられました。
  </para>
 </sect2>

 <sect2 xml:id="migration74.incompatible.openssl">
  <title>OpenSSL</title>

  <para>
   <function>openssl_random_pseudo_bytes</function>
   関数は、エラーが発生した場合に例外をスローするようになりました。<function>random_bytes</function>
   関数も同じです。
   特に、リクエストされたバイト数が0以下の場合には、
   <classname>Error</classname>
   がスローされ、十分なランダム性が得られなかった場合は
   <classname>Exception</classname> が生成されます。
   <literal>$crypto_strong</literal> の出力引数は、
   例外がスローされなかった場合は常に &true;
   であることが保証されるので、明示的なチェックは不要です。
  </para>
 </sect2>

 <sect2 xml:id="migration74.incompatible.pcre">
  <title>Regular Expressions (Perl互換)</title>

  <para>
   <constant>PREG_UNMATCHED_AS_NULL</constant>
   モードが使われた場合、後に続くマッチしなかったキャプチャグループにも &null;
   (offset キャプチャが有効になっていた場合は
   <literal>[null, -1]</literal> になります) が設定されるようになりました。
   これは、<literal>$matches</literal>
   のサイズが常に同じになることを意味します。
  </para>
 </sect2>

 <sect2 xml:id="migration74.incompatible.pdo">
  <title>PDO</title>

  <para>
   <classname>PDO</classname> や <classname>PDOStatement</classname>
   のインスタンスをシリアル化しようとすると、<classname>PDOException</classname>
   ではなく <classname>Exception</classname>
   が生成されるようになりました。これは、シリアル化をサポートしていない他の内部的なクラスと一貫した挙動です。
  </para>

  <para>
   <classname>ReflectionClassConstant</classname>,
   <classname>ReflectionMethod</classname>, <classname>ReflectionProperty</classname> のクラス定数の値が変更されました。
  </para>
 </sect2>

 <sect2 xml:id="migration74.incompatible.reflection">
  <title>リフレクション</title>

  <para>
   リフレクションオブジェクトをシリアル化しようとすると、例外を生成するようになりました。リフレクションオブジェクトのシリアル化はこれまでサポートされたことはなく、壊れたリフレクションオブジェクトを返していました。このバージョンから、明示的に禁止されました。
  </para>
 </sect2>

 <sect2 xml:id="migration74.incompatible.spl">
  <title>Standard PHP Library (SPL)</title>

  <para>
   <classname>ArrayObject</classname> インスタンスに対して
   <function>get_object_vars</function>
   関数を呼ぶと、<classname>ArrayObject</classname>
   そのもの(またはそのサブクラス)
   のプロパティを常に返すようになりました。以前は、<constant>ArrayObject::STD_PROP_LIST</constant>
   フラグが指定されない限り、ラップされた 配列/オブジェクト
   の値を返していました。
  </para>
  <para>
   他に影響を受ける操作として、以下が挙げられます:
  </para>
  <itemizedlist>
   <listitem>
    <simpara>
     <methodname>ReflectionObject::getProperties</methodname>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <function>reset</function>, <function>current</function> など。
     <interfacename>Iterator</interfacename>
     メソッドを代わりに使ってください。
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     オブジェクトのプロパティをリストとして扱うその他の操作も、影響を受ける可能性があります。
     たとえば <function>array_walk</function> 関数が挙げられます。
    </simpara>
   </listitem>
  </itemizedlist>
  <para>
   <literal>(array)</literal>
   キャストは影響を受けません。この操作は引き続き、ラップされた配列を返すか、<classname>ArrayObject</classname>
   のプロパティを返します。これは、<constant>ArrayObject::STD_PROP_LIST</constant>
   フラグが指定されたかどうかによって異なります。
  </para>
  <para>
   <methodname>SplPriorityQueue::setExtractFlags</methodname>
   は、0を渡された場合に例外をスローするようになりました。以前は、次の配列を展開する操作の際に回復可能な致命的なエラーを生成していました。
  </para>
  <para>
   <classname>ArrayObject</classname>, <classname>ArrayIterator</classname>,
   <classname>SplDoublyLinkedList</classname> および
   <classname>SplObjectStorage</classname>
   は、<interfacename>Serializable</interfacename> に加えて、新たに
   <literal>__serialize()</literal> と <literal>__unserialize()</literal>
   機構をサポートしました。
   これによって、古いPHPバージョンでシリアル化されたペイロードはまだ復元可能であることを意味しますが、PHP
   7.4
   で生成された新しいペイロードを、古いバージョンは理解しないことを意味します。
  </para>
 </sect2>

 <sect2 xml:id="migration74.incompatible.tokenizer">
  <title>Tokenizer</title>

  <para>
   <function>token_get_all</function>
   関数は、トークンストリームに穴を開けるのではなく、<constant>T_BAD_CHARACTER</constant>
   トークンを生成するようになりました。
  </para>
 </sect2>

 <sect2 xml:id="migration74.incompatible.cookie-decode">
  <title>外部から入力されるCookie</title>

  <para>
   PHP 7.4.11 以降は、セキュリティ上の理由により、
   外部から入力される Cookie の
   <emphasis>名前</emphasis> はurlデコードされなくなりました。
  </para>
 </sect2>

</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
