<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: b890f28c0c6d2856eadcdc34b3faf83a846b3d79 Maintainer: takagi Status: ready -->
<!-- CREDITS: hirokawa,mumumu -->
<refentry xml:id="function.pcntl-signal" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>pcntl_signal</refname>
  <refpurpose>シグナルハンドラを設定する</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>pcntl_signal</methodname>
   <methodparam><type>int</type><parameter>signal</parameter></methodparam>
   <methodparam><type class="union"><type>callable</type><type>int</type></type><parameter>handler</parameter></methodparam>
   <methodparam choice="opt"><type>bool</type><parameter>restart_syscalls</parameter><initializer>&true;</initializer></methodparam>
  </methodsynopsis>
  <para>
   <function>pcntl_signal</function> 関数は、<parameter>signal</parameter>
   が指すシグナルに関するハンドラを新たに設定するか、既存のハンドラを置き換えます。
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>signal</parameter></term>
     <listitem>
      <para>
       シグナル番号。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>handler</parameter></term>
     <listitem>
      <para>
       シグナルハンドラ。<type>callable</type> を渡すと、それを実行してシグナルを処理します。
       あるいは、グローバル定数 <constant>SIG_IGN</constant> または <constant>SIG_DFL</constant>
       を渡すこともできます。それぞれ、シグナルを無視することとデフォルトのシグナルハンドラを復活させることを表します。
      </para>
      <para>
       <type>callable</type> を渡す場合は、次のシグネチャを実装したものでなければいけません。
      </para>
      <para>
       <methodsynopsis>
        <type>void</type><methodname><replaceable>handler</replaceable></methodname>
        <methodparam><type>int</type><parameter>signo</parameter></methodparam>
        <methodparam><type>mixed</type><parameter>siginfo</parameter></methodparam>
       </methodsynopsis>
       <variablelist>
        <varlistentry>
         <term><parameter>signal</parameter></term>
         <listitem>
          <simpara>
           処理するシグナル。
          </simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><parameter>siginfo</parameter></term>
         <listitem>
          <simpara>
           OS が siginfo_t 構造体をサポートしている場合、
           これはシグナルに依存するシグナル情報の配列になります。
          </simpara>
         </listitem>
        </varlistentry>
       </variablelist>
      </para>
      <note>
       <para>
        オブジェクトのメソッドをハンドラとして指定した場合には、
        そのハンドラを別のものに変えたりスクリプトが終了したりするまでは
        オブジェクトのリファレンスカウントが増加したままであることに注意しましょう。
       </para>
      </note>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>restart_syscalls</parameter></term>
     <listitem>
      <para>
       再起動のシステムコールに対応するかどうかを設定します。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>7.1.0</entry>
       <entry>
        PHP 7.1.0 以降、
        ハンドラコールバックは特定のシグナルの
        siginfo を含む 2 番目の引数を受け付けるようになりました。
        このデータは、OS が siginfo_t 構造体を持つ場合のみ提供されます。
        OS が siginfo_t を実装していない場合は NULL が提供されます。
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>pcntl_signal</function> の例</title>
    <programlisting role="php">
<![CDATA[
<?php
// tick を使用しなければなりません
declare(ticks = 1);

// シグナルハンドラ関数
function sig_handler($signo)
{

     switch ($signo) {
         case SIGTERM:
             // シャットダウンの処理
             exit;
             break;
         case SIGHUP:
             // 再起動の処理
             break;
         case SIGUSR1:
             echo "SIGUSR1 を受け取りました...\n";
             break;
         default:
             // それ以外のシグナルの処理
     }

}

echo "シグナルハンドラを設定します...\n";

// シグナルハンドラを設定します
pcntl_signal(SIGTERM, "sig_handler");
pcntl_signal(SIGHUP,  "sig_handler");
pcntl_signal(SIGUSR1, "sig_handler");

// あるいは、オブジェクトも指定できます
// pcntl_signal(SIGUSR1, array($obj, "do_something"));

echo "自分自身に SIGUSR1 シグナルを送信します...\n";

// SIGUSR1 をカレントのプロセス ID に送信します
// posix_* 関数を使うには posix 拡張モジュールが必要です
posix_kill(posix_getpid(), SIGUSR1);

echo "終了\n";

?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes"><!-- {{{ -->
  &reftitle.notes;
  <para>
   <function>pcntl_signal</function> は、既存のシグナルハンドラがある場合にはそれを上書きします。
  </para>
 </refsect1><!-- }}} -->

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>pcntl_fork</function></member>
    <member><function>pcntl_waitpid</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
