<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 310963ad9ab1c2ca315361ff94314a21fa65f8b8 Maintainer: takagi Status: ready -->
<!-- CREDITS: hirokawa,mumumu -->
<refentry xml:id="function.curl-setopt" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>curl_setopt</refname>
  <refpurpose>cURL 転送用オプションを設定する</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>curl_setopt</methodname>
   <methodparam><type>CurlHandle</type><parameter>handle</parameter></methodparam>
   <methodparam><type>int</type><parameter>option</parameter></methodparam>
   <methodparam><type>mixed</type><parameter>value</parameter></methodparam>
  </methodsynopsis>
  <para>
   指定した cURL セッションハンドルのオプションを設定します。
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    &curl.ch.description;
    <varlistentry>
     <term><parameter>option</parameter></term>
     <listitem>
      <para>
       設定したい <literal>CURLOPT_XXX</literal> オプション。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>value</parameter></term>
     <listitem>
      <para>
       <parameter>option</parameter> に設定する値。
      </para>
      <para>
       <parameter>value</parameter> には、
       <parameter>option</parameter> の以下の値に関して
       bool 値を指定する必要があります。
       <informaltable>
        <tgroup cols="3">
         <thead>
          <row>
           <entry valign="top">オプション</entry>
           <entry valign="top"><parameter>value</parameter> への設定値</entry>
           <entry valign="top">注記</entry>
          </row>
         </thead>
         <tbody>
          <row>
           <entry valign="top"><constant>CURLOPT_AUTOREFERER</constant></entry>
           <entry valign="top">
            &true; を設定すると、<literal>Location:</literal> によるリダイレクトを
            たどる際には自動的に <literal>Referer:</literal> フィールドをリクエストに
            追加します。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_COOKIESESSION</constant></entry>
           <entry valign="top">
            &true; を設定すると、クッキーの "セッション" を新しく開始します。
            以前のセッションで読み込まれていた "セッションクッキー" は無視するよう、
            libcurl に指示します。デフォルトでは、それがセッションクッキーであるか
            どうかにかかわらず libcurl はすべてのクッキーを読み込んで保存します。
            セッションクッキーとは、有効期限が指定されておらず "セッション" の間のみ
            有効であるクッキーのことです。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_CERTINFO</constant></entry>
           <entry valign="top">
            &true; を設定すると、セキュアな転送時に SSL 証明書の情報を
            <constant>STDERR</constant> に出力します。
           </entry>
           <entry valign="top">
            cURL 7.19.1 で追加されました。
            これを使うには、<constant>CURLOPT_VERBOSE</constant>
            を on にしておかなければなりません。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_CONNECT_ONLY</constant></entry>
           <entry valign="top">
            &true; を設定すると、プロキシの認証や接続の確立などをすべて行いますが、データは転送しません。
            このオプションは、HTTP や SMTP そして POP3 用に実装されています。
           </entry>
           <entry valign="top">
            cURL 7.15.2 で追加されました。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_CRLF</constant></entry>
           <entry valign="top">
            &true; を設定すると、転送時に Unix 形式の改行を CRLF 形式に変換します。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_DISALLOW_USERNAME_IN_URL</constant></entry>
           <entry valign="top">
            ユーザー名をURLに含めてはいけない場合に &true; にします。
            デフォルトは 0 で、ユーザー名は許可されています。
           </entry>
           <entry valign="top">
            cURL 7.61.0 で追加されました。
            PHP 7.3.0 以降で利用可能です。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_DNS_SHUFFLE_ADDRESSES</constant></entry>
           <entry valign="top">
            名前が解決され、ひとつ以上のIPアドレスが返された際、
            ランダムな順番でそれらを利用するために、
            返されたアドレスの順番をシャッフルする場合に &true; にします。
            これによって、IPv6 アドレスの前に IPv4 アドレスが使われるなどの事象が起こるかもしれません。
           </entry>
           <entry valign="top">
            cURL 7.60.0 で追加されました。
            PHP 7.3.0 以降で利用可能です。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_HAPROXYPROTOCOL</constant></entry>
           <entry valign="top">
            HAProxy Proxy プロトコル v1 ヘッダを接続の開始時に送信する場合に &true; にします。
            デフォルトではこのヘッダは送信されません。
           </entry>
           <entry valign="top">
            cURL 7.60.0 で追加されました。
            PHP 7.3.0 以降で利用可能です。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_SSH_COMPRESSION</constant></entry>
           <entry valign="top">
            ビルトインの SSH 圧縮を有効にする場合に &true; にします。
            これはリクエストであり、命令ではありません。
            つまり、圧縮されるかどうかはサーバー次第です。
           </entry>
           <entry valign="top">
            cURL 7.56.0 で追加されました。
            PHP 7.3.0 以降で利用可能です。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_DNS_USE_GLOBAL_CACHE</constant></entry>
           <entry valign="top">
            &true; を設定すると、グローバル DNS キャッシュを利用します。
            このオプションはスレッドセーフではありません。
            また、PHP がスレッドセーフでない用途でビルドされている場合
            (CLI, FCGI, Apache2-Prefork など) には、デフォルトで有効になっています。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_FAILONERROR</constant></entry>
           <entry valign="top">
            &true; を設定すると、HTTP で 400 以上のコードが返ってきた際に
            処理失敗と判断します。デフォルトでは、コードの値を無視して
            ページの内容を取得します。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_SSL_FALSESTART</constant></entry>
           <entry valign="top">
            &true; にすると、TLS false start を有効にします。
           </entry>
           <entry valign="top">
            cURL 7.42.0 で追加されました。PHP 7.0.7 以降で使用可能です。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_FILETIME</constant></entry>
           <entry valign="top">
            &true; を設定すると、ドキュメントの更新日時を取得しようと試みます。
            この値を取得するには、<function>curl_getinfo</function> で
            <constant>CURLINFO_FILETIME</constant> オプションを用います。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_FOLLOWLOCATION</constant></entry>
           <entry valign="top">
            &true; を設定すると、サーバーが HTTP ヘッダの一部として送ってくる
            <literal>"Location: "</literal> ヘッダの内容をたどります。
            <constant>CURLOPT_MAXREDIRS</constant> も参照ください。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_FORBID_REUSE</constant></entry>
           <entry valign="top">
            &true; を設定すると、処理が終了した際に明示的に接続を切断します。
            接続を再利用しません。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_FRESH_CONNECT</constant></entry>
           <entry valign="top">
            &true; を設定すると、キャッシュされている接続を利用せずに
            新しい接続を確立します。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_FTP_USE_EPRT</constant></entry>
           <entry valign="top">
            &true; を設定すると、FTP のダウンロードに EPRT（および LPRT）
            を利用します。&false; の場合は EPRT・LPRT を無効にして PORT
            を利用します。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_FTP_USE_EPSV</constant></entry>
           <entry valign="top">
            &true; を設定すると、FTP 転送の際にまず EPSV コマンドの利用を
            試みます。失敗した場合は PASV を利用します。&false; を設定すると、
            EPSV を無効にします。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_FTP_CREATE_MISSING_DIRS</constant></entry>
           <entry valign="top">
            &true; を設定すると、FTP の操作中にパスが存在しなかったときに
            ディレクトリを作成します。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_FTPAPPEND</constant></entry>
           <entry valign="top">
            &true; を設定すると、リモートファイルを上書きせずに追記します。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_TCP_NODELAY</constant></entry>
           <entry valign="top">
            &true; にすると、TCP の Nagle アルゴリズムを解除します。解除すると、小さなパケットがネットワーク上を流れる回数をできるだけ減らそうと試みます。
           </entry>
           <entry valign="top">
            libcurl 7.11.2 以降と組み合わせてコンパイルしたときに利用可能です。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_FTPASCII</constant></entry>
           <entry valign="top">
            <constant>CURLOPT_TRANSFERTEXT</constant> のエイリアスです。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_FTPLISTONLY</constant></entry>
           <entry valign="top">
            &true; を設定すると、FTP でディレクトリ名のみ表示します。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_HEADER</constant></entry>
           <entry valign="top">
            &true; を設定すると、ヘッダの内容も出力します。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLINFO_HEADER_OUT</constant></entry>
           <entry valign="top">
            &true; を設定すると、リクエスト文字列を追跡します。
           </entry>
           <entry valign="top">
            プレフィックスが <constant>CURLINFO_</constant>
            となっているのは意図的なものです。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_HTTP09_ALLOWED</constant></entry>
           <entry valign="top">
            HTTP/0.9 形式のレスポンスを許可するかどうか。libcurl 7.66.0 以降のデフォルトは &false; です。
            それより前のバージョンのデフォルトは &true; でした。
           </entry>
           <entry valign="top">
            PHP 7.3.15 と 7.4.3 以降 および cURL &gt;= 7.64.0 をビルドした場合に使用可能です。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_HTTPGET</constant></entry>
           <entry valign="top">
            &true; を設定すると、HTTP のリクエスト形式を GET に戻します。
            GET はデフォルト設定なので、リクエスト形式が変更されている
            場合にのみ必要となります。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_HTTPPROXYTUNNEL</constant></entry>
           <entry valign="top">
            &true; にすると、指定された HTTP プロキシを介してトンネルします。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_HTTP_CONTENT_DECODING</constant></entry>
           <entry valign="top">
            &false; を設定すると、生の HTTP レスポンスボディを取得します。
           </entry>
           <entry valign="top">
            libcurl &gt;= 7.16.2 とビルドした場合に利用可能です。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_KEEP_SENDING_ON_ERROR</constant></entry>
           <entry valign="top">
            返されたHTTPコードが300以上であっても、リクエストボディを送信し続ける場合は &true; にします。
            デフォルトのアクションはリクエストボディの送信を止め、
            ストリームまたは接続を閉じます。
            手動でNTLM認証を行う場合に、このオプションは適切です。
            ほとんどのアプリケーションは、このオプションは不要です。
           </entry>
           <entry valign="top">
            PHP 7.3.0 以降で、libcurl &gt;= 7.51.0 とビルドした場合に利用可能です。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_MUTE</constant></entry>
           <entry valign="top">
            &true; を設定すると、cURL 関数に関連する出力を完全に抑えます。
           </entry>
           <entry valign="top">
            cURL 7.15.5 で削除されました (かわりに CURLOPT_RETURNTRANSFER が使えます)
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_NETRC</constant></entry>
           <entry valign="top">
            &true; を設定すると、リモートサイトと接続を確立する際に用いる
            ユーザー名やパスワードを、<filename>~/.netrc</filename> から取得します。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_NOBODY</constant></entry>
           <entry valign="top">
            &true; を設定すると、出力から本文を削除します。
            リクエストメソッドは HEAD となります。これを &false;
            に変更してもリクエストメソッドは GET には変わりません。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_NOPROGRESS</constant></entry>
           <entry valign="top"><para>
            &true; を設定すると、cURL 転送の進捗状況表示を無効にします。
            <note>
             <para>
              PHP は、このオプションを自動的に &true; に設定します。
              これを変更するのは、デバッグ時のみにすべきです。
             </para>
            </note>
           </para></entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_NOSIGNAL</constant></entry>
           <entry valign="top">
            &true; を設定すると、cURL 関数が PHP プロセスに送信するシグナルを
            無視します。マルチスレッド SAPI ではデフォルトで on となっており、
            そのためタイムアウトオプションもまだ利用されています。
           </entry>
           <entry valign="top">
            cURL 7.10 で追加されました。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_PATH_AS_IS</constant></entry>
           <entry valign="top">
            &true; にすると、ドットの連続を処理しません。
           </entry>
           <entry valign="top">
            cURL 7.42.0 で追加されました。PHP 7.0.7 以降で使用可能です。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_PIPEWAIT</constant></entry>
           <entry valign="top">
            &true; にすると、パイプライン化/多重化を待ちます。
           </entry>
           <entry valign="top">
            cURL 7.42.0 で追加されました。PHP 7.0.7 以降で使用可能です。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_POST</constant></entry>
           <entry valign="top">
            &true; を設定すると、HTTP POST を行います。POST は、
            <literal>application/x-www-form-urlencoded</literal> 形式で
            行われます。これは一般的な HTML のフォームと同じ形式です。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_PUT</constant></entry>
           <entry valign="top">
            &true; を設定すると、HTTP PUT を行います。PUT するファイルは
            <constant>CURLOPT_INFILE</constant> および
            <constant>CURLOPT_INFILESIZE</constant>
            で指定されている必要があります。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_RETURNTRANSFER</constant></entry>
           <entry valign="top">
            &true; を設定すると、<function>curl_exec</function> の戻り値を
            文字列で返します。通常はデータを直接出力します。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_SASL_IR</constant></entry>
           <entry valign="top">
            &true; にすると、最初のパケット内の最初のレスポンスの送信を有効にします。
           </entry>
           <entry valign="top">
            cURL 7.31.0 で追加されました。PHP 7.0.7 以降で使用可能です。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_SSL_ENABLE_ALPN</constant></entry>
           <entry valign="top">
            &false; にすると、SSL ハンドシェイクの際の ALPN を無効にします
            (SSL バックエンドの libcurl がそれに対応するビルドである場合)。
            これは、http2 ネゴシエーションに使えます。
           </entry>
           <entry valign="top">
            cURL 7.36.0 で追加されました。PHP 7.0.7 以降で使用可能です。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_SSL_ENABLE_NPN</constant></entry>
           <entry valign="top">
            &false; にすると、SSL ハンドシェイクの際の NPN を無効にします
            (SSL バックエンドの libcurl がそれに対応するビルドである場合)。
            これは、http2 ネゴシエーションに使えます。
           </entry>
           <entry valign="top">
            cURL 7.36.0 で追加されました。PHP 7.0.7 以降で使用可能です。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_SSL_VERIFYPEER</constant></entry>
           <entry valign="top">
            &false; を設定すると、cURL はサーバー証明書の検証を行いません。
            別の証明書を <constant>CURLOPT_CAINFO</constant> オプションで
            指定するか、<constant>CURLOPT_CAPATH</constant> オプションで
            証明ディレクトリを指定します。
           </entry>
           <entry valign="top">
            cURL 7.10 以降、デフォルト値は &true; です。また、
            cURL 7.10 以降、デフォルトでインストールされています。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_SSL_VERIFYSTATUS</constant></entry>
           <entry valign="top">
            &true; にすると、証明書のステータスを検証します。
           </entry>
           <entry valign="top">
            cURL 7.41.0 で追加されました。PHP 7.0.7 以降で使用可能です。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_PROXY_SSL_VERIFYPEER</constant></entry>
           <entry valign="top">
            &false; を設定すると、cURL がピアの証明書の検証を行わなくなります。
            別の証明書を検証するには、<constant>CURLOPT_CAINFO</constant> オプションで指定するか、
            <constant>CURLOPT_CAPATH</constant> を使って証明書のディレクトリを指定するやり方が使えます。
            &false; を指定すると、ピアの証明書の検証はオプションに関係なく成功します。
           </entry>
           <entry valign="top">
            &true; がデフォルトです。
            PHP 7.3.0 以降で、libcurl &gt;= 7.52.0 とビルドした場合に利用可能です。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_SAFE_UPLOAD</constant></entry>
           <entry valign="top">
            この値は常に &true; になります。
            <constant>CURLOPT_POSTFIELDS</constant>
            を使ってファイルをアップロードする際に、
            プレフィックス <literal>@</literal> のサポートを無効にします。
            これは、<literal>@</literal>
            で始まる値を安全にフィールドに渡せるということです。
            <classname>CURLFile</classname> も代わりに使えます。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_SUPPRESS_CONNECT_HEADERS</constant></entry>
           <entry valign="top">
            &true; を設定すると、
            <constant>CURLOPT_HTTPPROXYTUNNEL</constant> を使って CONNECT リクエストが生成された場合に、
            ユーザーのコールバック関数
            <constant>CURLOPT_HEADERFUNCTION</constant> および <constant>CURLOPT_WRITEFUNCTION</constant>
            では proxy CONNECT のレスポンスヘッダを抑制します。
           </entry>
           <entry valign="top">
            cURL 7.54.0 で追加されました。PHP 7.3.0 以降で使用可能です。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_TCP_FASTOPEN</constant></entry>
           <entry valign="top">
            &true; にすると、TCP Fast Open を有効にします。
           </entry>
           <entry valign="top">
            cURL 7.49.0 で追加されました。PHP 7.0.7 以降で使用可能です。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_TFTP_NO_OPTIONS</constant></entry>
           <entry valign="top">
            &true; にすると、TFTP オプションリクエストを送信しません。
           </entry>
           <entry valign="top">
            cURL 7.48.0 で追加されました。PHP 7.0.7 以降で使用可能です。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_TRANSFERTEXT</constant></entry>
           <entry valign="top">
            &true; を設定すると、FTP 転送を ASCII モードで行います。
            LDAP の場合は、データを HTML ではなくプレーンテキストで取得します。
            Windows システムでは <constant>STDOUT</constant>
            に対してバイナリモードを設定しないでください。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_UNRESTRICTED_AUTH</constant></entry>
           <entry valign="top">
            &true; を設定すると、（<constant>CURLOPT_FOLLOWLOCATION</constant>
            を利用して）場所をたどっていく際にユーザー名とパスワードを送信し続けます。
            これは、たとえホスト名が変わっても続けられます。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_UPLOAD</constant></entry>
           <entry valign="top">
            &true; を設定すると、アップロードの準備をします。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_VERBOSE</constant></entry>
           <entry valign="top">
            &true; を設定すると、詳細な情報を出力します。情報は
            <constant>STDERR</constant> か、または
            <constant>CURLOPT_STDERR</constant>
            で指定したファイルに出力されます。
           </entry>
           <entry valign="top">
           </entry>
          </row>
         </tbody>
        </tgroup>
       </informaltable>
      </para>
      <para>
       <parameter>value</parameter> には、
       <parameter>option</parameter> の以下の値に関して
       整数値を指定する必要があります。
       <informaltable>
        <tgroup cols="3">
         <thead>
          <row>
           <entry>オプション</entry>
           <entry><parameter>value</parameter> への設定値</entry>
           <entry>注記</entry>
          </row>
         </thead>
         <tbody>
          <row>
           <entry valign="top"><constant>CURLOPT_BUFFERSIZE</constant></entry>
           <entry valign="top">
            1 回の読み込みに用いるバッファのサイズ。しかしながら、必ず
            このバッファいっぱいまで読み込まれることを保証するものではありません。
           </entry>
           <entry valign="top">
            cURL 7.10 で追加されました。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_CONNECTTIMEOUT</constant></entry>
           <entry valign="top">
            接続の試行を待ち続ける秒数。0 は永遠に待ち続けることを意味します。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_CONNECTTIMEOUT_MS</constant></entry>
           <entry valign="top">
            接続の試行を待ち続けるミリ秒数。0 は永遠に待ち続けることを意味します。
            <!-- http://curl.haxx.se/libcurl/c/curl_easy_setopt.html -->
            システムの標準の名前解決を使うように libcurl をビルドしている場合は、
            接続のタイムアウトは秒単位の精度となり、最小のタイムアウトは 1 秒となります。
           </entry>
           <entry valign="top">
            cURL 7.16.2 で追加されました。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_DNS_CACHE_TIMEOUT</constant></entry>
           <entry valign="top">
            DNS エントリをメモリ内に保持し続ける秒数。デフォルトでは
            120（2 分）に設定されています。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_EXPECT_100_TIMEOUT_MS</constant></entry>
           <entry valign="top">
            <literal>Expect: 100-continue</literal> のレスポンスを待つタイムアウト。
            ミリ秒で指定します。
            デフォルトは1000ミリ秒です。
           </entry>
           <entry valign="top">
            cURL 7.36.0 で追加されました。PHP 7.0.7 以降で使用可能です。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_HAPPY_EYEBALLS_TIMEOUT_MS</constant></entry>
           <entry valign="top">
            Happy Eyeballs アルゴリズムで IPv6 接続を優先して開始します。
            Happy Eyeballs アルゴリズムは、
            デュアルスタックホストのために IPv4 と IPv6アドレス両方に接続を試みますが、
            IPv6 を優先して扱い、そのタイムアウトをミリ秒単位で指定します。
            デフォルトは CURL_HET_DEFAULT であり、現状は200ミリ秒です。
           </entry>
           <entry valign="top">
            cURL 7.59.0 で追加されました。PHP 7.3.0 以降で使用可能です。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_FTPSSLAUTH</constant></entry>
           <entry valign="top">
            （使用可能な場合の）FTP 認証方法。
            <constant>CURLFTPAUTH_SSL</constant>（まず SSL を試す）、
            <constant>CURLFTPAUTH_TLS</constant>（まず TLS を試す）あるいは
            <constant>CURLFTPAUTH_DEFAULT</constant>（cURL が決める）のいずれかです。
           </entry>
           <entry valign="top">
            cURL 7.12.2 で追加されました。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_HEADEROPT</constant></entry>
           <entry valign="top">
            <para>
             ヘッダをどう扱うかを指定します。
             次の定数のうち、一つを指定できます:
             <variablelist>
              <varlistentry>
               <term>CURLHEADER_UNIFIED</term>
               <listitem>
                <simpara>
                 <constant>CURLOPT_HTTPHEADER</constant> で指定されたヘッダが、
                 サーバーとプロキシ双方のリクエストに対して使われます。
                 このオプションが有効な場合、
                 <constant>CURLOPT_PROXYHEADER</constant> は効果がありません。
                </simpara>
               </listitem>
              </varlistentry>
              <varlistentry>
               <term>CURLHEADER_SEPARATE</term>
               <listitem>
                <simpara>
                 <constant>CURLOPT_HTTPHEADER</constant> で指定されたヘッダは、
                 プロキシには送られず、サーバーにのみ送られます。
                 プロキシに送るヘッダは、
                 <constant>CURLOPT_PROXYHEADER</constant> を設定しなければなりません。
                 CONNECT でないリクエストがプロキシに送信された場合、
                 libcurl はサーバーとプロキシ両方にヘッダを送信することに注意してください。
                 CONNECT リクエストを送信する場合、
                 libcurl は <constant>CURLOPT_PROXYHEADER</constant> 
                 をプロキシのみに送り、
                 <constant>CURLOPT_HTTPHEADER</constant> をサーバーにのみ送信します。
                </simpara>
               </listitem>
              </varlistentry>
             </variablelist>
            </para>
            <simpara>
             cURL 7.42.1 以降は
             <constant>CURLHEADER_SEPARATE</constant> がデフォルトで、
             それより前では、
             <constant>CURLHEADER_UNIFIED</constant> がデフォルトでした。
            </simpara>
           </entry>
           <entry valign="top">
            cURL 7.37.0 で追加されました。PHP 7.0.7 以降で利用可能です。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_HTTP_VERSION</constant></entry>
           <entry valign="top">
            <constant>CURL_HTTP_VERSION_NONE</constant> (デフォルト。
            使用するバージョンを決めるのは cURL にまかせる)、
            <constant>CURL_HTTP_VERSION_1_0</constant> (HTTP/1.0 を使用する)、
            あるいは <constant>CURL_HTTP_VERSION_1_1</constant> (HTTP/1.1 を使用する)
            <constant>CURL_HTTP_VERSION_2_0</constant> (HTTP 2 の使用を試みる),
            <constant>CURL_HTTP_VERSION_2</constant> (<constant>CURL_HTTP_VERSION_2_0</constant> のエイリアス),
            <constant>CURL_HTTP_VERSION_2TLS</constant> (TLS (https) の場合のみ HTTP 2 の使用を試みる) または
            <constant>CURL_HTTP_VERSION_2_PRIOR_KNOWLEDGE</constant> (HTTP 1.1 へのアップグレードを行わず、HTTP/2 を使って TLS でないリクエストを発行する)
            のいずれかです。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_HTTPAUTH</constant></entry>
           <entry valign="top">
            <para>
             使用する HTTP 認証方法。以下の中から選びます。
             <constant>CURLAUTH_BASIC</constant>、
             <constant>CURLAUTH_DIGEST</constant>、
             <constant>CURLAUTH_GSSNEGOTIATE</constant>、
             <constant>CURLAUTH_NTLM</constant>、
             <constant>CURLAUTH_AWS_SIGV4</constant>、
             <constant>CURLAUTH_ANY</constant> および
             <constant>CURLAUTH_ANYSAFE</constant>。
            </para>
            <para>
             2 つ以上の方法を組み合わせるには、ビット演算子 <literal>|</literal>（or）
             を使用します。このような場合、cURL はサーバーがサポートしている方法を
             問い合わせたうえで最適な方法を選択します。
            </para>
            <para>
             <constant>CURLAUTH_ANY</constant> は、全てのビットを設定します。
             この場合 cURL は、もっともセキュアなものを自動で選択します。
            </para>
            <para>
             <constant>CURLAUTH_ANYSAFE</constant> は、
             <constant>CURLAUTH_BASIC</constant> 以外の全てのビットを設定します。
             この場合 cURL は、もっともセキュアなものを自動で選択します。
            </para>
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_INFILESIZE</constant></entry>
           <entry valign="top">
            ファイルをリモートサイトにアップロードする際のファイルサイズ。
            このオプションを指定しても、libcurl がそれ以上のデータを送信するのは止められないことに注意しましょう。
            実際に何が送信されるのかは
            <constant>CURLOPT_READFUNCTION</constant> に依存します。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_LOW_SPEED_LIMIT</constant></entry>
           <entry valign="top">
            1 秒あたりのバイト数で、転送速度がこれより遅い期間が
            <constant>CURLOPT_LOW_SPEED_TIME</constant> 秒以上続いた場合に
            PHP は転送を終了します。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_LOW_SPEED_TIME</constant></entry>
           <entry valign="top">
            転送速度が <constant>CURLOPT_LOW_SPEED_LIMIT</constant>
            より遅い期間がどれだけ続いた場合に転送を異常終了させるかを、
            秒単位で指定します。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_MAIL_RCPT_ALLLOWFAILS</constant></entry>
           <entry valign="top">
            送信先によっては、RCPT TO コマンドが失敗することを許可します。
           </entry>
           <entry valign="top">
            複数の送信先にデータを送る場合、
            デフォルトで cURL は RCPT TO コマンドが送信先のうちひとつでも失敗すると、SMTP の通信を中止します。
            このオプションは cURL にエラーを無視し、
            有効な送信先の処理は続行するように指示します。
            すべての送信先の RCPT TO コマンドが失敗した場合にこのフラグが設定されていた場合は、cURL は SMTP の通信を中止し、最後に実行された RCPT TO コマンドから受け取ったエラーを返します。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_MAXAGE_CONN</constant></entry>
           <entry valign="top">
            既存の接続を再利用して良いとみなす、アイドル時間の最大値。
            デフォルトは <literal>118</literal> 秒に設定されています。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_MAXFILESIZE_LARGE</constant></entry>
           <entry valign="top">
            ダウンロードできるファイルの最大サイズをバイト単位で設定します。
            この値より大きなファイルがリクエストされた場合、
            通信は開始されず、<constant>CURLE_FILESIZE_EXCEEDED</constant>
            が返されます。
            ダウンロードが始まる前にファイルサイズが常にわかっているわけではないので、ファイルの転送量が指定された最大サイズよりも結局大きかった場合は、このオプションは意味がありません。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_MAXLIFETIME_CONN</constant></entry>
           <entry valign="top">
            接続が作成されてから、
            既存の接続を再利用してもよいと見なすまでの時間の最大値。
            秒単位で指定します。
            接続がキャッシュに存在し、この値より古いことがわかった場合、
            転送中の通信が完了した場合に接続は一度クローズされます。
            デフォルトは0です。つまり、
            このオプションは無効になっており、
            あらゆる接続が再利用の対象になります。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_MAXCONNECTS</constant></entry>
           <entry valign="top">
            許可される持続的接続の最大数。もしこの値に達した場合、
            オープンされている接続数が増えるのを避けるため、
            キャッシュされている接続のうち一番古いものを閉じます。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_MAXREDIRS</constant></entry>
           <entry valign="top">
            HTTP のリダイレクト先を追いかける最大値。
            <constant>CURLOPT_FOLLOWLOCATION</constant> とあわせて使用します。
            リダイレクトループを避けるため、
            デフォルト値として <literal>20</literal> が設定されています。
            <literal>-1</literal> を設定すると、リダイレクトループを許可します。
            <literal>0</literal> を指定すると、全てのリダイレクトを拒否します。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_PORT</constant></entry>
           <entry valign="top">
            接続先のポート番号。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_POSTREDIR</constant></entry>
           <entry valign="top">
            <constant>CURLOPT_FOLLOWLOCATION</constant> が設定されているときに、
            どの形式のリダイレクトの場合に HTTP POST メソッドを維持するのかを、
            1 (301 Moved Permanently)、2 (302 Found)、4 (303 See Other) のビットマスクで指定します。
           </entry>
           <entry valign="top">
            cURL 7.19.1 で追加されました。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_PROTOCOLS</constant></entry>
           <entry valign="top">
            <para>
             <constant>CURLPROTO_*</constant> の値のビットマスク。使用すると、
             転送時に libcurl がどのプロトコルを使用するのかに制約を加えます。
             さまざまなプロトコルに対応するよう libcurl をビルドしていた場合でも、
             これによって特定の転送プロトコルのみを使用するように制限することができます。
             デフォルトでは、libcurl がサポートしているすべてのプロトコルの使用を許可します。
             <constant>CURLOPT_REDIR_PROTOCOLS</constant> も参照ください。
            </para>
            <para>
             使用できるプロトコルオプションは次のとおりです。
             <constant>CURLPROTO_HTTP</constant>,
             <constant>CURLPROTO_HTTPS</constant>,
             <constant>CURLPROTO_FTP</constant>,
             <constant>CURLPROTO_FTPS</constant>,
             <constant>CURLPROTO_SCP</constant>,
             <constant>CURLPROTO_SFTP</constant>,
             <constant>CURLPROTO_TELNET</constant>,
             <constant>CURLPROTO_LDAP</constant>,
             <constant>CURLPROTO_LDAPS</constant>,
             <constant>CURLPROTO_DICT</constant>,
             <constant>CURLPROTO_FILE</constant>,
             <constant>CURLPROTO_TFTP</constant>,
             <constant>CURLPROTO_MQTT</constant>,
             <constant>CURLPROTO_ALL</constant>
            </para>
           </entry>
           <entry valign="top">
            cURL 7.19.4 で追加されました。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_PROXYAUTH</constant></entry>
           <entry valign="top">
            プロキシ接続に使用する HTTP 認証の方法。
            <constant>CURLOPT_HTTPAUTH</constant> で説明したのと同じオプションを
            指定可能です。プロキシ認証でサポートされているのは、今のところ
            <constant>CURLAUTH_BASIC</constant> および
            <constant>CURLAUTH_NTLM</constant> のみです。
           </entry>
           <entry valign="top">
            cURL 7.10.7 で追加されました。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_PROXYPORT</constant></entry>
           <entry valign="top">
            プロキシ接続のポート番号。このポート番号は、
            <constant>CURLOPT_PROXY</constant> で指定することも可能です。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_PROXYTYPE</constant></entry>
           <entry valign="top">
            <parameter>CURLPROXY_HTTP</parameter>（デフォルト）、
            <constant>CURLPROXY_SOCKS4</constant>、
            <constant>CURLPROXY_SOCKS5</constant>、
            <constant>CURLPROXY_SOCKS4A</constant> あるいは
            <constant>CURLPROXY_SOCKS5_HOSTNAME</constant>。
           </entry>
           <entry valign="top">
            cURL 7.10 で追加されました。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_REDIR_PROTOCOLS</constant></entry>
           <entry valign="top">
            <constant>CURLPROTO_*</constant> の値のビットマスク。使用すると、
            <constant>CURLOPT_FOLLOWLOCATION</constant> が有効な場合のリダイレクト時の転送に
            libcurl がどのプロトコルを使用するのかに制約を加えます。これによって、
            リダイレクト時に特定の転送プロトコルのみを使用するように制限することができます。
            デフォルトでは、libcurl がサポートしているすべてのプロトコルのうち
            FILE と SCP 以外のすべての使用を許可します。この挙動は 7.19.4
            より前のバージョンとは異なります。7.19.4 より前のバージョンでは、
            サポートするすべてのプロトコルを無条件に許可していました。
            プロトコル定数の値は <constant>CURLOPT_PROTOCOLS</constant> を参照ください。
           </entry>
           <entry valign="top">
            cURL 7.19.4 で追加されました。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_RESUME_FROM</constant></entry>
           <entry valign="top">
            転送を途中から再開する場合のバイトオフセット。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_SOCKS5_AUTH</constant></entry>
           <entry valign="top">
            <para>
             利用する SOCKS5 認証方法。以下が指定できます:
             <constant>CURLAUTH_BASIC</constant>,
             <constant>CURLAUTH_GSSAPI</constant>,
             <constant>CURLAUTH_NONE</constant>
            </para>
            <para>
             一つ以上の認証方法を組み合わせるために ビット演算子 <literal>|</literal> (or) が使えます。
             これを使うと、cURL がどの方法をサポートしているかをポーリングし、もっとも良いものを選択します。
            </para>
            <para>
             <constant>CURLAUTH_BASIC</constant> を指定すると、ユーザー名/パスワード による認証ができます。
            </para>
            <para>
             <constant>CURLAUTH_GSSAPI</constant> を指定すると、GSS-API 認証ができます。
            </para>
            <para>
             <constant>CURLAUTH_NONE</constant> を指定すると、認証は行われません。
            </para>
            <para>
            デフォルトは <literal>CURLAUTH_BASIC|CURLAUTH_GSSAPI</literal> です。
            実際のユーザー名とパスワードは <constant>CURLOPT_PROXYUSERPWD</constant> オプションを使って設定してください。
            </para>
           </entry>
           <entry valign="top">
            PHP 7.3.0 以降 および curl &gt;= 7.55.0 で利用可能です。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_SSL_OPTIONS</constant></entry>
           <entry valign="top">
            <para>
             SSL 関連の振る舞いのオプションを設定します。
             以下に示す定数のビットマスクの組み合わせです:
             <variablelist>
              <varlistentry>
               <term>CURLSSLOPT_ALLOW_BEAST</term>
               <listitem>
                <simpara>
                 SSL3 や TLS1.0 プロトコルのセキュリティ上の欠陥を回避するあらゆる手段を使わない。
                </simpara>
               </listitem>
              </varlistentry>
              <varlistentry>
               <term>CURLSSLOPT_NO_REVOKE</term>
               <listitem>
                <simpara>
                 証明書の失効チェックを行うSSLバックエンドについて、それを無効にする。
                </simpara>
               </listitem>
              </varlistentry>
              <varlistentry>
               <term>CURLSSLOPT_AUTO_CLIENT_CERT</term>
               <listitem>
                <simpara>
                 クライアント証明書を認証のために自動で配置し、
                 サーバーからリクエストがあったときは利用します。
                 このオプションは Schannel (native Windows SSL library) でのみサポートされています。
                </simpara>
               </listitem>
              </varlistentry>
              <varlistentry>
               <term>CURLSSLOPT_NATIVE_CA</term>
               <listitem>
                <simpara>
                 オペレーティングシステムのネイティブなCAストアを、
                 証明書の検証に用います。これは OpenSSL を Windows でビルドしたときにのみ使えます。
                </simpara>
                <note>
                 <simpara>
                  このオプションは実験的なものであり、振る舞いが変更される可能性があります。
                 </simpara>
                </note>
               </listitem>
              </varlistentry>
              <varlistentry>
               <term>CURLSSLOPT_NO_PARTIALCHAIN</term>
               <listitem>
                <simpara>
                 "部分的な" 証明書チェインを許可しません。
                 この点以外は、cURL のデフォルトの振る舞いをします。
                 このオプションは、OpenSSL でのみサポートされています。
                 証明書チェインがルート証明書ではなく、
                 中間証明書で終わっていた場合は、証明書の検証が失敗します。
                </simpara>
               </listitem>
              </varlistentry>
              <varlistentry>
               <term>CURLSSLOPT_REVOKE_BEST_EFFORT</term>
               <listitem>
                <simpara>
                 配布ポイントがオフラインであったり、存在しない場合に、証明書の失効チェックを無視します。
                 このオプションは Schannel (native Windows SSL library) でのみサポートされています。
                </simpara>
                <note>
                 <simpara>
                  <constant>CURLSSLOPT_NO_REVOKE</constant> と組み合わせて使った場合、後に設定した方が優先されます。
                 </simpara>
                </note>
               </listitem>
              </varlistentry>
             </variablelist>
            </para>
           </entry>
           <entry valign="top">
            cURL 7.25.0 で追加されました。PHP 7.0.7 以降で利用可能です。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_SSL_VERIFYHOST</constant></entry>
           <entry valign="top">
            <literal>2</literal> は、SSL ピア証明書の Subject Alternate Name フィールド、
            または Common Name フィールドの値が、指定されたホスト名にマッチするかを調べます。
            <literal>0</literal> は、名前をチェックしません。
            <literal>1</literal> は、使うべきではありません。
            本番環境では、このオプションの値は常に
            <literal>2</literal> (デフォルト値) にしておかなければなりません。
           </entry>
           <entry valign="top">
            値 <literal>1</literal> は、cURL 7.28.1 以降では使えなくなりました。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_SSLVERSION</constant></entry>
           <entry valign="top">
            <para>
             以下のうちの、いずれかの値です。
             <simplelist type="inline">
              <member><constant>CURL_SSLVERSION_DEFAULT</constant></member>
              <member><constant>CURL_SSLVERSION_TLSv1</constant></member>
              <member><constant>CURL_SSLVERSION_SSLv2</constant></member>
              <member><constant>CURL_SSLVERSION_SSLv3</constant></member>
              <member><constant>CURL_SSLVERSION_TLSv1_0</constant></member>
              <member><constant>CURL_SSLVERSION_TLSv1_1</constant></member>
              <member><constant>CURL_SSLVERSION_TLSv1_2</constant></member>
              <member><constant>CURL_SSLVERSION_TLSv1_3</constant></member>
             </simplelist>
            </para>
            <simpara>
             TLSバージョンの最大値は、定数 <constant>CURL_SSLVERSION_MAX_<replaceable>*</replaceable></constant> で設定できます。
            </simpara>
            <para>
             定数 <constant>CURL_SSLVERSION_MAX_<replaceable>*</replaceable></constant> のうちのひとつと、
             定数 <constant>CURL_SSLVERSION_<replaceable>*</replaceable></constant> のうちのひとつを OR で設定することもできます。
             <simplelist type="inline">
              <member><constant>CURL_SSLVERSION_MAX_DEFAULT</constant> (the maximum version supported by the library)</member>
              <member><constant>CURL_SSLVERSION_MAX_TLSv1_0</constant></member>
              <member><constant>CURL_SSLVERSION_MAX_TLSv1_1</constant></member>
              <member><constant>CURL_SSLVERSION_MAX_TLSv1_2</constant></member>
              <member><constant>CURL_SSLVERSION_MAX_TLSv1_3</constant></member>
             </simplelist>
            </para>
            <warning>
             <simpara>
              この値は何も設定せず、デフォルトに任せるのが最適です。
              <constant>CURL_SSLVERSION_SSLv2</constant> や
              <constant>CURL_SSLVERSION_SSLv3</constant> を設定すると、
              SSLv2 および SSLv3 の既知の脆弱性の影響を受けるため、非常に危険です。
             </simpara>
            </warning>
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_PROXY_SSL_OPTIONS</constant></entry>
           <entry valign="top">
            <para>
             HTTPSプロキシの振る舞いを設定するオプションです。
             これは以下の定数のうち、任意のものを組み合わせたビットマスクです:
             <variablelist>
              <varlistentry>
               <term>CURLSSLOPT_ALLOW_BEAST</term>
               <listitem>
                <simpara>
                 SSL3 と TLS1.0 プロトコルに存在する脆弱性を回避するための回避策を使いません。
                </simpara>
               </listitem>
              </varlistentry>
              <varlistentry>
               <term>CURLSSLOPT_NO_REVOKE</term>
               <listitem>
                <simpara>
                 SSLバックエンドの証明書の失効チェックを無効にします。
                 但し、そうした振る舞いが存在した場合に限ります(curl &gt;= 7.44.0)
                </simpara>
               </listitem>
              </varlistentry>
              <varlistentry>
               <term>CURLSSLOPT_NO_PARTIALCHAIN</term>
               <listitem>
                <simpara>
                 "部分的な"証明書チェインを許可しません。
                 デフォルトでは許可されています(curl &gt;= 7.68.0)
                </simpara>
               </listitem>
              </varlistentry>
             </variablelist>
            </para>
           </entry>
           <entry valign="top">
            PHP 7.3.0 以降 および cURL &gt;= 7.52.0 をビルドした場合に使用可能です。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_PROXY_SSL_VERIFYHOST</constant></entry>
           <entry valign="top">
            HTTPSプロキシの証明書の名前フィールドをプロキシ名と突き合わせて検証する場合 
            <literal>2</literal> を設定します。
            <literal>0</literal> を設定すると、証明書でどのような名前が使われていようと、接続は成功します。
            注意して使用してください!
            <literal>1</literal> は curl 7.28.0 以前ではデバッグオプションとして扱われていました。
            curl 7.28.1 から 7.65.3 までは <constant>CURLE_BAD_FUNCTION_ARGUMENT</constant> が返されていました。
            curl 7.66.0 以降では <literal>1</literal> と <literal>2</literal> は同じ値として扱われます。
            本番環境では、このオプションの値は (デフォルトの) <literal>2</literal> であるべきです。
           </entry>
           <entry valign="top">
            PHP 7.3.0 以降 および cURL &gt;= 7.52.0 をビルドした場合に使用可能です。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_PROXY_SSLVERSION</constant></entry>
           <entry valign="top">
            <para>
             以下のうちのひとつが指定できます
             <simplelist type="inline">
              <member><constant>CURL_SSLVERSION_DEFAULT</constant></member>
              <member><constant>CURL_SSLVERSION_TLSv1</constant></member>
              <member><constant>CURL_SSLVERSION_TLSv1_0</constant></member>
              <member><constant>CURL_SSLVERSION_TLSv1_1</constant></member>
              <member><constant>CURL_SSLVERSION_TLSv1_2</constant></member>
              <member><constant>CURL_SSLVERSION_TLSv1_3</constant></member>
              <member><constant>CURL_SSLVERSION_MAX_DEFAULT</constant></member>
              <member><constant>CURL_SSLVERSION_MAX_TLSv1_0</constant></member>
              <member><constant>CURL_SSLVERSION_MAX_TLSv1_1</constant></member>
              <member><constant>CURL_SSLVERSION_MAX_TLSv1_2</constant></member>
              <member><constant>CURL_SSLVERSION_MAX_TLSv1_3</constant></member>
              <member><constant>CURL_SSLVERSION_SSLv3</constant></member>
             </simplelist>
            </para>
            <warning>
             <simpara>
              最も良い選択は、このオプションを設定せず、
              デフォルトの <constant>CURL_SSLVERSION_DEFAULT</constant> を使うことです。
              このオプションは、リモートのSSLプロトコルのバージョンを見つけようとします。
             </simpara>
            </warning>
           </entry>
           <entry valign="top">
            PHP 7.3.0 以降 および cURL &gt;= 7.52.0 をビルドした場合に使用可能です。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_STREAM_WEIGHT</constant></entry>
           <entry valign="top">
            ストリームの重みを数値で設定します(1 から 256 までの数値)
           </entry>
           <entry valign="top">
            cURL 7.46.0 で追加されました。PHP 7.0.7 以降で利用可能です。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_TCP_KEEPALIVE</constant></entry>
           <entry valign="top">
            この値を <literal>1</literal> に設定すると、TCP keepalive のプローブが送信されます。
            これらのプローブを送信する頻度と遅延時間は オペレーティングシステムがサポートしていれば
            <constant>CURLOPT_TCP_KEEPIDLE</constant> と <constant>CURLOPT_TCP_KEEPINTVL</constant> で制御可能です。
            <literal>0</literal> に設定すると(デフォルト)、keepalive のプローブは送信されません。
           </entry>
           <entry valign="top">
            cURL 7.25.0 で追加されました。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_TCP_KEEPIDLE</constant></entry>
           <entry valign="top">
            <constant>CURLOPT_TCP_KEEPALIVE</constant> が有効になっている場合に、
            keepalive のプローブを送信する前に、接続をアイドルなままにしてオペレーティングシステムを待たせる
            遅延時間を秒単位で設定します。
            全てのオペレーティングシステムがこのオプションをサポートしているわけではありません。
            デフォルトは <literal>60</literal> です。
           </entry>
           <entry valign="top">
            cURL 7.25.0 で追加されました。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_TCP_KEEPINTVL</constant></entry>
           <entry valign="top">
            <constant>CURLOPT_TCP_KEEPALIVE</constant> が有効になっている場合に、
            keepalive のプローブを送信する前に、オペレーティングシステムが待つ間隔を秒単位で設定します。
            全てのオペレーティングシステムがこのオプションをサポートしているわけではありません。
            デフォルトは <literal>60</literal> です。
           </entry>
           <entry valign="top">
            cURL 7.25.0 で追加されました。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_TIMECONDITION</constant></entry>
           <entry valign="top">
            <constant>CURLOPT_TIMEVALUE</constant> の扱いを決定します。
            <constant>CURLOPT_TIMEVALUE</constant> で指定した時刻以降に
            変更されたページのみを返す場合は
            <constant>CURL_TIMECOND_IFMODSINCE</constant> を使用します。
            <constant>CURLOPT_HEADER</constant> が &true; だと仮定すると、
            ページが変更されていない場合は
            <literal>"304 Not Modified"</literal> ヘッダが返されます。
            <constant>CURL_TIMECOND_IFUNMODSINCE</constant> は反対の意味です。
           </entry>
           <entry valign="top">
            cURL 7.46.0 より前のバージョンでは、
            <constant>CURL_TIMECOND_IFMODSINCE</constant> がデフォルトでした。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_TIMEOUT</constant></entry>
           <entry valign="top">
            cURL 関数の実行にかけられる時間の最大値。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_TIMEOUT_MS</constant></entry>
           <entry valign="top">
            cURL 関数の実行にかけられる最大のミリ秒数。
            <!-- http://curl.haxx.se/libcurl/c/curl_easy_setopt.html -->
            システムの標準の名前解決を使うように libcurl をビルドしている場合は、
            接続のタイムアウトは秒単位の精度となり、最小のタイムアウトは 1 秒となります。
           </entry>
           <entry valign="top">
            cURL 7.16.2 で追加されました。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_TIMEVALUE</constant></entry>
           <entry valign="top">
            1970 年 1 月 1 日からの経過秒数。この値は
            <constant>CURLOPT_TIMECONDITION</constant> で使用されます。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_TIMEVALUE_LARGE</constant></entry>
           <entry valign="top">
            1970年1月1日からの経過時刻を秒単位で示します。
            この値は <constant>CURLOPT_TIMECONDITION</constant> によって使われます。
            デフォルトは0です。
            このオプションと <constant>CURLOPT_TIMEVALUE</constant> の違いは引数の型です。
            'long' が 32ビット長しかないシステムでは、
            2038年以降の日付を設定するためにこのオプションを使わなければいけません。
           </entry>
           <entry valign="top">
            cURL 7.59.0 で追加されました。PHP 7.3.0 以降で使用可能です。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_UPKEEP_INTERVAL_MS</constant></entry>
           <entry valign="top">
            プロトコルによっては、
            "connection upkeep" (接続を維持する) 仕組みを備えているものがあります。
            通常、この仕組みは接続を維持するため、既存の接続に対して少量のトラフィックを送信します。
            このオプションは、接続を維持するためのトラフィックを送信する間隔を指定します。
            こうした接続を維持する仕組みは、現状 HTTP/2 の接続でのみ利用できます。
            この接続を維持するための間隔を超えた場合、HTTP/2 PING フレームが送信されます。デフォルトは <literal>60</literal> 秒です。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_UPLOAD_BUFFERSIZE</constant></entry>
           <entry valign="top">
            cURL のアップロードバッファの好ましいサイズを、
            バイト単位で指定します。
            アップロードのバッファサイズは、デフォルトでは 64キロバイトです。
            バッファサイズの最大値は、2メガバイトになっています。
            バッファサイズの最小値は、16キロバイトになっています。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_MAX_RECV_SPEED_LARGE</constant></entry>
           <entry valign="top">
            ダウンロード速度 (単位は「バイト/秒」) の転送中累加平均がこの値を超えると、
            転送を一時停止して、平均速度がこのパラメータの値以下に落ちるまで待ちます。
            デフォルトは無制限です。
           </entry>
           <entry valign="top">
            cURL 7.15.5 で追加されました。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_MAX_SEND_SPEED_LARGE</constant></entry>
           <entry valign="top">
            アップロード速度 (単位は「バイト/秒」) の転送中累加平均がこの値を超えると、
            転送を一時停止して、平均速度がこのパラメータの値以下に落ちるまで待ちます。
            デフォルトは無制限です。
           </entry>
           <entry valign="top">
            cURL 7.15.5 で追加されました。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_SSH_AUTH_TYPES</constant></entry>
           <entry valign="top">
            <constant>CURLSSH_AUTH_PUBLICKEY</constant>, 
            <constant>CURLSSH_AUTH_PASSWORD</constant>, 
            <constant>CURLSSH_AUTH_HOST</constant>, 
            <constant>CURLSSH_AUTH_KEYBOARD</constant>
            のビットマスク。
            <constant>CURLSSH_AUTH_ANY</constant> にすると libcurl がいずれかひとつを選択します。
           </entry>
           <entry valign="top">
            cURL 7.16.1 で追加されました。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_IPRESOLVE</constant></entry>
           <entry valign="top">
            ホスト名の解決にどの形式の IP アドレスを使うのかを、アプリケーションが選べるようにします。
            複数のバージョンの IP アドレスで解決できるホスト名のときに使うもので、指定できる値は
            <constant>CURL_IPRESOLVE_WHATEVER</constant>、
            <constant>CURL_IPRESOLVE_V4</constant> そして
            <constant>CURL_IPRESOLVE_V6</constant> です。
            デフォルトは <constant>CURL_IPRESOLVE_WHATEVER</constant> です。
           </entry>
           <entry valign="top">
            cURL 7.10.8 で追加されました。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_FTP_FILEMETHOD</constant></entry>
           <entry valign="top">
            FTP(S) サーバー上のファイルに到達するために使う方法を curl に伝えます。利用可能な値は
            <constant>CURLFTPMETHOD_DEFAULT</constant>、
            <constant>CURLFTPMETHOD_MULTICWD</constant>、
            <constant>CURLFTPMETHOD_NOCWD</constant> および
            <constant>CURLFTPMETHOD_SINGLECWD</constant> です。
           </entry>
           <entry valign="top">
            cURL 7.15.1 で追加されました。
           </entry>
          </row>
         </tbody>
        </tgroup>
       </informaltable>
      </para>
      <para>
       <parameter>value</parameter> は、
       <parameter>option</parameter> パラメータの
       以下の値に関して文字列である必要があります。
       <informaltable>
        <tgroup cols="3">
         <thead>
          <row>
           <entry>オプション</entry>
           <entry><parameter>value</parameter> への設定値</entry>
           <entry>注記</entry>
          </row>
         </thead>
         <tbody>
          <row>
           <entry valign="top"><constant>CURLOPT_ABSTRACT_UNIX_SOCKET</constant></entry>
           <entry valign="top">
            ホストにTCP接続する代わりに、抽象化されたUnixドメインソケットの使用を有効にし、
            パスを指定された <type>string</type> に設定します。
            このオプションは <constant>CURLOPT_UNIX_SOCKET_PATH</constant>
            と同じセマンティクスを共有しています。
            これらのふたつのオプションは同じストレージを共有するので、
            ハンドルごとにそれらのうちのひとつだけを設定できます。
           </entry>
           <entry valign="top">
            cURL 7.53.0 で追加されました。PHP 7.3.0 以降で利用可能です。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_ALTSVC</constant></entry>
           <entry valign="top">
            Alt-Svc キャッシュとして使うファイル名を cURL に指定します。
            これは既存のキャッシュコンテンツを読み取る目的で使います。
            また、通信が完了した後に書き込む可能性があります。
            書き込むのは、<constant>CURLALTSVC_READONLYFILE</constant>
            が <constant>CURLOPT_ALTSVC_CTRL</constant>
            経由で設定されていない場合に限ります。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_ALTSVC_CTRL</constant></entry>
           <entry valign="top">
            このハンドルを使って転送する際に、Alt-Svc をどう扱うかを
            cURL に指示するために、有効な機能をまとめてビットマスクで指定します。
            cURL は Alt-Svc ヘッダを HTTPS の場合にのみ受け入れます。
            origin が HTTPS で適切にホストされている場合にのみ、cURL は別のオリジンへのリクエストも完了できます。
            以下のいずれかのビットを設定すると、Alt-Svc エンジンは有効になります。
            オプションは以下のとおりです:
            <constant>CURLALTSVC_H1</constant>,
            <constant>CURLALTSVC_H2</constant>,
            <constant>CURLALTSVC_H3</constant> および
            <constant>CURLALTSVC_READONLYFILE</constant>
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_AWS_SIGV4</constant></entry>
           <entry valign="top">
            <para>
             AWS V4 signature authentication を、HTTP(S) ヘッダで指定します。
            </para>
            <para>
             このオプションは、<constant>CURLOPT_HTTPAUTH</constant>
             で設定されている他のあらゆる認証タイプを上書きします。
             このメソッドは、他の認証タイプと組み合わせることができません。
            </para>
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_CAINFO</constant></entry>
           <entry valign="top">
            接続先を検証するための証明書を保持するファイル名。
            これは <constant>CURLOPT_SSL_VERIFYPEER</constant> を使用する場合に
            のみ意味を持ちます。
           </entry>
           <entry valign="top">
            絶対パスで指定しなければならないでしょう。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_CAINFO_BLOB</constant></entry>
           <entry valign="top">
            接続先を検証するための、ひとつ以上の証明書保持するPEMファイルの名前。
            このオプションは、<constant>CURLOPT_CAINFO</constant>
            を上書きします。
           </entry>
           <entry valign="top">
            PHP 8.2.0 と、cURL 7.77.0 以降で利用可能です。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_CAPATH</constant></entry>
           <entry valign="top">
            複数の証明書ファイルを保持するディレクトリ。このオプションは
            <constant>CURLOPT_SSL_VERIFYPEER</constant> とともに使用します。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_COOKIE</constant></entry>
           <entry valign="top">
            HTTP リクエストにおける
            <literal>"Cookie: "</literal> ヘッダの内容。
            クッキーが複数ある場合は、セミコロンとスペースで区切られる
            (例 "<literal>fruit=apple; colour=red</literal>")
            ことに注意しましょう。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_COOKIEFILE</constant></entry>
           <entry valign="top">
            クッキーのデータを保持するファイルの名前。クッキーファイルは、
            Netscape フォーマットあるいは
            HTTP ヘッダを単純にファイルにダンプしたものが使用可能です。
            名前が空文字列の場合はクッキーを読み込みませんが、クッキーの処理は有効なままです。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_COOKIEJAR</constant></entry>
           <entry valign="top">
            <simpara>
             ハンドルのデストラクタがコールされた際に、
             すべての内部クッキーを保存するファイルの名前。
            </simpara>
            <warning>
             <simpara>
              PHP 8.0.0 以降では、<function>curl_close</function>
              をコールしても何もしなくなり、ハンドルを破棄<emphasis>しなくなりました。</emphasis>
              ハンドルが自動で破棄される前にクッキーを書き込みたい場合、
              ハンドルに対して <function>unset</function> をコールします。
             </simpara>
            </warning>
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_COOKIELIST</constant></entry>
           <entry valign="top">
            内部的な Cookie ストアに追加するCookie文字列(つまり、NetScape/Mozilla フォーマット または
            HTTP形式の Set-Cookieヘッダ)。
            <literal>"ALL"</literal> の場合、メモリに保持している全てのクッキーを削除します。
            <literal>"SESS"</literal> の場合、メモリに保持している全てのセッションクッキーを削除します。
            <literal>"FLUSH"</literal> の場合、<constant>CURLOPT_COOKIEJAR</constant> で指定されたファイルに全ての既知の Cooie を書き込みます。
            <literal>"RELOAD"</literal> の場合、<constant>CURLOPT_COOKIEFILE</constant> で指定されたファイルから全てのクッキーを読み込みます。
           </entry>
           <entry valign="top">
            cURL 7.14.1 以降で利用可能です。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_CUSTOMREQUEST</constant></entry>
           <entry valign="top"><para>
            HTTP リクエストで
            <literal>"GET"</literal> あるいは <literal>"HEAD"</literal> 以外に
            使用するカスタムメソッド。これが有用なのは、<literal>"DELETE"</literal>
            やその他のあまり知られていない HTTP リクエストを実行する場合です。
            使用可能な値は <literal>"GET"</literal>、
            <literal>"POST"</literal>、<literal>"CONNECT"</literal> などです。
            HTTP リクエストの内容をすべて指定するわけではありません。つまり、
            <literal>"GET /index.html HTTP/1.0\r\n\r\n"</literal> のような
            記述は間違いだということです。
            <note>
             <para>
              使用しようとしているメソッドをサーバーがサポートしていることを
              確かめるまで、これを使用しないでください。
             </para>
            </note>
           </para></entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_DEFAULT_PROTOCOL</constant></entry>
           <entry valign="top"><para>
            URL にスキーム名がなかった場合のデフォルトのプロトコル
           </para></entry>
           <entry valign="top">
            cURL 7.45.0 で追加されました。PHP 7.0.7 以降で利用可能です。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_DNS_INTERFACE</constant></entry>
           <entry valign="top"><para>
            DNS リゾルバがバインドするべきネットワークインターフェイス名を設定します。
            これは、(アドレスではなく)インターフェイス名でなければなりません。
            </para></entry>
           <entry valign="top">
            cURL 7.33.0 で追加されました。PHP 7.0.7 以降で利用可能です。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_DNS_LOCAL_IP4</constant></entry>
           <entry valign="top"><para>
            リゾルバがバインドするべきローカルの IPv4 アドレスを設定します。
            この値は、数値の IPv4 アドレスを文字列で含めるべきです。
            </para></entry>
           <entry valign="top">
            cURL 7.33.0 で追加されました。PHP 7.0.7 以降で利用可能です。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_DNS_LOCAL_IP6</constant></entry>
           <entry valign="top"><para>
            リゾルバがバインドするべきローカルの IPv6 アドレスを設定します。
            この値は、数値の IPv6 アドレスを文字列で含めるべきです。
            </para></entry>
           <entry valign="top">
            cURL 7.33.0 で追加されました。PHP 7.0.7 以降で利用可能です。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_EGDSOCKET</constant></entry>
           <entry valign="top">
            <constant>CURLOPT_RANDOM_FILE</constant> と似ていますが、
            Entropy Gathering Daemon ソケットを使用してファイル名を生成する点が
            違います。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_ENCODING</constant></entry>
           <entry valign="top">
            <literal>"Accept-Encoding: "</literal> ヘッダの内容。
            これにより、応答のデコードを可能にします。サポートされる
            エンコーディングは <literal>"identity"</literal>、
            <literal>"deflate"</literal> および <literal>"gzip"</literal>
            です。もし空文字列 <literal>""</literal> が指定された場合、
            サポートされるエンコーディングをすべて含むヘッダが送信されます。
           </entry>
           <entry valign="top">
            cURL 7.10 で追加されました。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_FTPPORT</constant></entry>
           <entry valign="top">
            FTP で "PORT" を使用するための IP アドレスを取得する際に使用される値。
            "PORT" は、リモートサーバーに対してこちらが指定した IP アドレスに
            接続するよう指示します。この値に設定できる内容は IP アドレス、ホスト名、
            ネットワークインターフェイス名（Unix）、あるいは単に '-' を指定する
            ことでシステムのデフォルト IP アドレスを指定します。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_HSTS</constant></entry>
           <entry valign="top">
            <para>
             HSTS (HTTP Strict Transport Security) が用いるキャッシュファイル名
            </para>
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_HSTS_CTRL</constant></entry>
           <entry valign="top">
            <para>
             HSTS (HTTP Strict Transport Security) の振る舞いを制御します。
             このハンドルを使って転送する際に、HSTS をどう扱うかを
             cURL に指示するために、有効な機能をまとめてビットマスクで指定します。
             <constant>CURLHSTS_ENABLE</constant>
             を使うと、インメモリのキャッシュが有効になります。
             HSTS のキャッシュファイルが指定されると、
             <constant>CURLHSTS_READONLYFILE</constant>
             を使うことで、ファイルを読み取り専用にできます。
            </para>
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_INTERFACE</constant></entry>
           <entry valign="top">
            使用するネットワークインターフェイスの名前。
            インターフェイス名、IP アドレスあるいはホスト名が指定可能です。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_KEYPASSWD</constant></entry>
           <entry valign="top">
            <constant>CURLOPT_SSLKEY</constant>
            あるいは <constant>CURLOPT_SSH_PRIVATE_KEYFILE</constant> 秘密鍵を使うときに必須となるパスワード。
           </entry>
           <entry valign="top">
            cURL 7.16.1 で追加されました。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_KRB4LEVEL</constant></entry>
           <entry valign="top">
            KRB4（Kerberos 4）セキュリティレベル。以下の値のいずれか
            （セキュリティの低い順です）が指定可能です。
            <literal>"clear"</literal>、
            <literal>"safe"</literal>、
            <literal>"confidential"</literal>、
            <literal>"private"</literal>。
            文字列がこれらのどれでもなかった場合は、
            <literal>"private"</literal> が使用されます。このオプションを &null;
            にすると KRB4 セキュリティを無効にします。現時点では、KRB4
            セキュリティは FTP 転送にのみ使用可能です。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_LOGIN_OPTIONS</constant></entry>
           <entry valign="top">
            プロトコル特有のログインオプションを設定するために使えます。
            たとえば好ましい認証メカニズムが "AUTH=NTLM" とか "AUTH=*" の場合で、
            <constant>CURLOPT_USERNAME</constant> オプションと組み合わせて使うべき場合です。
           </entry>
           <entry valign="top">
            cURL 7.34.0 で追加されました。PHP 7.0.7 以降で利用可能です。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_PINNEDPUBLICKEY</constant></entry>
           <entry valign="top">
             ピン止めされた公開鍵を設定します。
             ピン止めされた公開鍵のファイル名ファイル名を文字列として指定できます。
             期待されているファイルフォーマットは "PEM" または "DER" 形式です。
             文字列は、 base64 エンコードされた sha256 ハッシュで、
             "sha256//" が先頭に付いたものです。これを任意の数だけ指定でき、
             ";" で区切られます。
           </entry>
           <entry valign="top">
            cURL 7.39.0 で追加されました。PHP 7.0.7 以降で利用可能です。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_POSTFIELDS</constant></entry>
           <entry valign="top">
            <simpara>
             HTTP "POST" で送信するすべてのデータ。
             このパラメータは
             '<literal>para1=val1&amp;para2=val2&amp;...</literal>'
             のように url エンコードされた文字列形式で渡すこともできますし、
             フィールド名をキー、データを値とする配列で渡すこともできます。
             <parameter>value</parameter> が配列の場合、
             <literal>Content-Type</literal> ヘッダには
             <literal>multipart/form-data</literal> を設定します。
            </simpara>
            <simpara>
             ファイルは <classname>CURLFile</classname> または <classname>CURLStringFile</classname> を使って送信することが出来ます。
             この場合、<parameter>value</parameter> は配列でなければなりません。
            </simpara>
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_PRIVATE</constant></entry>
           <entry valign="top">
            この cURL ハンドルに関連づけるデータ。ここで関連づけたデータは、
            <function>curl_getinfo</function> の
            <constant>CURLINFO_PRIVATE</constant> オプションで取得できます。
            cURL はデータを一切加工しません。
            cURL マルチハンドルを使う場合は一般的に、この値が cURL ハンドルを特定する一意なキーとなります。
           </entry>
           <entry valign="top">
            cURL 7.10.3 で追加されました。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_PRE_PROXY</constant></entry>
           <entry valign="top">
            <constant>CURLOPT_PROXY</constant> で指定された HTTP(S) プロキシにcurlが接続する前に、
            事前に接続する preproxy を設定します。
            この値には、ホスト名またはドットで区切られた数値のIPアドレスを設定します。
            preproxy は SOCKS プロキシだけがなることができ、
            どの socks を使うかを指定するために <literal>[scheme]://</literal> を先頭に付けます。
            数値の IPv6 アドレスは 角括弧 "[]" 内に書かなければいけません。
            preproxy にから文字列を設定すると、明示的に preproxy を無効にできます。
            この文字列にポート番号を設定するには、
            ホスト名の最後に <literal>:[port]</literal> を追加します。
            プロキシのポート番号は別のオプション <constant>CURLOPT_PROXYPORT</constant>
            で指定しても構いません。ポート番号を指定しない場合は、
            デフォルトでは 1080 を使います。
           </entry>
           <entry valign="top">
            PHP 7.3.0 以降 および cURL &gt;= 7.52.0 をビルドした場合に使用可能です。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_PROXY</constant></entry>
           <entry valign="top">
            リクエストを経由させる HTTP プロキシ。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_PROXY_SERVICE_NAME</constant></entry>
           <entry valign="top">
            プロキシ認証サービス名
           </entry>
           <entry valign="top">
            HTTP プロキシについては、cURL 7.43.0 で追加されました。
            SOCKS5 プロキシについては、cURL 7.49.0 で追加されました。
            PHP 7.0.7 以降で利用可能です。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_PROXY_CAINFO</constant></entry>
           <entry valign="top">
            プロキシの Certificate Authority (CA) バンドルのパスを指定します。
            HTTPS プロキシを検証するための証明書をひとつ以上持つ、ファイルの名前を文字列で設定します。
            このオプションは HTTPS プロキシに接続するためのものであって、
            HTTPS サーバーに接続するためのものではありません。
            デフォルトは、libcurl が cacert バンドルを保存していると想定しているシステムパスに設定されています。
           </entry>
           <entry valign="top">
            PHP 7.3.0 以降 および cURL &gt;= 7.52.0 をビルドした場合に使用可能です。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_PROXY_CAINFO_BLOB</constant></entry>
           <entry valign="top">
            HTTPS プロキシを検証するための証明書をひとつ以上持つ、PEMファイルの名前を設定します。
            このオプションは HTTPS プロキシに接続するためのものであって、
            HTTPS サーバーに接続するためのものではありません。
            デフォルトは、libcurl が cacert バンドルを保存していると想定しているシステムパスに設定されています。
           </entry>
           <entry valign="top">
            PHP 8.2.0 以降および、cURL &gt;= 7.77.0 をビルドした場合に使用可能です。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_PROXY_CAPATH</constant></entry>
           <entry valign="top">
            HTTPSプロキシを検証するための複数のCA証明書が置かれたディレクトリ。
           </entry>
           <entry valign="top">
            PHP 7.3.0 以降 および cURL &gt;= 7.52.0 をビルドした場合に使用可能です。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_PROXY_CRLFILE</constant></entry>
           <entry valign="top">
            PEMフォーマットの CRL (Certificate Revocation List, 証明書失効リスト)
            を連結したファイル名を設定します。
            これはSSL通信の際に行われる証明書の検証に使います。
           </entry>
           <entry valign="top">
            PHP 7.3.0 以降 および cURL &gt;= 7.52.0 をビルドした場合に使用可能です。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_PROXY_KEYPASSWD</constant></entry>
           <entry valign="top">
            <constant>CURLOPT_PROXY_SSLKEY</constant> で設定する秘密鍵で使う、
            必須のパスワードを設定します。
            証明書を読み込むのにパスフレーズは不要ですが、
            秘密鍵を読み込むにはパスフレーズが必要です。
            このオプションはHTTPSプロキシに接続するために必要です。
            HTTPSサーバーに接続するためのものではありません。
           </entry>
           <entry valign="top">
            PHP 7.3.0 以降 および cURL &gt;= 7.52.0 をビルドした場合に使用可能です。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_PROXY_PINNEDPUBLICKEY</constant></entry>
           <entry valign="top">
            HTTPSプロキシ向けの pinned public key を設定します。
            pinned public key のファイル名を文字列で設定できます。
            ファイルフォーマットは "PEM" または "DER" です。
            base64 エンコードされた sha256 ハッシュ を任意の数だけ
            "sha256//" の後に続けることもできます。このハッシュは ";" で区切ります。
           </entry>
           <entry valign="top">
            PHP 7.3.0 以降 および cURL &gt;= 7.52.0 をビルドした場合に使用可能です。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_PROXY_SSLCERT</constant></entry>
           <entry valign="top">
            HTTPSプロキシに接続する時に使うクライアント証明書のフォーマット。
            デフォルトは Secure Transport の場合 "P12" で、
            それ以外のエンジンでは "PEM" ですが、
            <constant>CURLOPT_PROXY_SSLCERTTYPE</constant> でも変更できます。
            NSS や Secure transport では、
            セキュリティデータベースで名付けられた証明書のニックネームも設定できます。
            現在のディレクトリにあるファイルを使いたい場合は、
            ニックネームとの混乱を避けるため "./" をプレフィックスとして付けてください。
           </entry>
           <entry valign="top">
            PHP 7.3.0 以降 および cURL &gt;= 7.52.0 をビルドした場合に使用可能です。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_PROXY_SSLCERTTYPE</constant></entry>
           <entry valign="top">
            HTTPSプロキシに接続する時に使うクライアント証明書のフォーマット。
            サポートされているのは "PEM" と "DER" ですが、
            Secure Transport はこれらをサポートしていません。
            OpenSSL (0.9.3 以降) と Secure Transport 
            (iOS 5 以降, または OS X 10.7 以降) では PKCS#12-encoded ファイル向けに
            "P12" もサポートしています。デフォルトは "PEM" です。
           </entry>
           <entry valign="top">
            PHP 7.3.0 以降 および cURL &gt;= 7.52.0 をビルドした場合に使用可能です。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_PROXY_SSL_CIPHER_LIST</constant></entry>
           <entry valign="top">
            HTTPSプロキシと接続を確立するために使う暗号スイートの一覧。
            この一覧はひとつ以上の暗号スイートの文字列がコロンで区切られており、
            構文的に正しくなければなりません。
            コンマやスペースも区切り文字としては有効ですが、通常はコロンが使われます。
            !, - および + が演算子として使えます。
           </entry>
           <entry valign="top">
            PHP 7.3.0 以降 および cURL &gt;= 7.52.0 をビルドした場合に使用可能です。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_PROXY_TLS13_CIPHERS</constant></entry>
           <entry valign="top">
            TLS 1.3 接続をプロキシと確立するために使う暗号スイートの一覧。
            この一覧はひとつ以上の暗号スイートの文字列がコロンで区切られており、
            構文的に正しくなければなりません。
            現状、このオプションはcurlが OpenSSL 1.1.1 以降とビルドされた時にだけ使われています。
            OpenSSL 以外のSSLバックエンドを使っている場合は、
            <constant>CURLOPT_PROXY_SSL_CIPHER_LIST</constant> オプションを使って
            TLS 1.3 の暗号スイートを設定できます。
           </entry>
           <entry valign="top">
            PHP 7.3.0 以降 および cURL &gt;= 7.61.0 と OpenSSL &gt;= 1.1.1 をビルドした場合に使用可能です。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_PROXY_SSLKEY</constant></entry>
           <entry valign="top">
            HTTPSプロキシに接続するのに使う秘密鍵のファイル名。
            デフォルトのフォーマットは "PEM" で、
            そのフォーマットは <constant>CURLOPT_PROXY_SSLKEYTYPE</constant> で変更できます。
            (iOS と Mac OS X のみ) Secure Transport を使って curl がビルドされている場合、
            このオプションは無視されます。
           </entry>
           <entry valign="top">
            PHP 7.3.0 以降 および cURL &gt;= 7.61.0 をビルドした場合、
            かつ TLS が有効な場合にのみ使用可能です。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_PROXY_SSLKEYTYPE</constant></entry>
           <entry valign="top">
            秘密鍵のフォーマット。"PEM", "DER" および "ENG" がサポートされています。
           </entry>
           <entry valign="top">
            PHP 7.3.0 以降 および cURL &gt;= 7.52.0 をビルドした場合に使用可能です。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_PROXY_TLSAUTH_PASSWORD</constant></entry>
           <entry valign="top">
            <constant>CURLOPT_PROXY_TLSAUTH_TYPE</constant> オプションで指定したTLS認証メソッド
            で使うパスワード。
            <constant>CURLOPT_PROXY_TLSAUTH_USERNAME</constant> オプションも設定する必要があります。
           </entry>
           <entry valign="top">
            PHP 7.3.0 以降 および cURL &gt;= 7.52.0 をビルドした場合に使用可能です。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_PROXY_TLSAUTH_TYPE</constant></entry>
           <entry valign="top">
            <simpara>
             HTTPS接続で使うTLS認証メソッド。
             <literal>"SRP"</literal> がサポートされています。
            </simpara>
            <note>
             <para>
              TLS の Secure Remote Password (SRP) 認証は、
              ローカルとリモートの双方が共通のシークレットを持っている場合に、
              お互いを認証する方法を提供します。
              TLS-SRP を使うためには、
              <constant>CURLOPT_PROXY_TLSAUTH_USERNAME</constant> と
              <constant>CURLOPT_PROXY_TLSAUTH_PASSWORD</constant> オプションも設定する必要があります。
             </para>
            </note>
           </entry>
           <entry valign="top">
            PHP 7.3.0 以降 および cURL &gt;= 7.52.0 をビルドした場合に使用可能です。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_PROXY_TLSAUTH_USERNAME</constant></entry>
           <entry valign="top">
            <constant>CURLOPT_PROXY_TLSAUTH_TYPE</constant> オプションで指定された
            HTTPSプロキシのTLS認証メソッドで使うユーザー名。
            <constant>CURLOPT_PROXY_TLSAUTH_PASSWORD</constant> オプションも設定する必要があります。
           </entry>
           <entry valign="top">
            PHP 7.3.0 以降 および cURL &gt;= 7.52.0 をビルドした場合に使用可能です。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_PROXYUSERPWD</constant></entry>
           <entry valign="top">
            プロキシに接続するためのユーザー名とパスワード。
            <literal>"[username]:[password]"</literal> 形式で指定します。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_RANDOM_FILE</constant></entry>
           <entry valign="top">
            使用するファイル名を、SSL の乱数生成器を使用して作成します。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_RANGE</constant></entry>
           <entry valign="top">
            取得するデータの範囲を
            <literal>"X-Y"</literal> 形式で指定します。X あるいは Y は省略可能です。
            HTTP 転送では、いくつかの範囲をカンマで区切った
            <literal>"X-Y,N-M"</literal> のような形式もサポートしています。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_REFERER</constant></entry>
           <entry valign="top">
            HTTP リクエストで使用される <literal>"Referer: "</literal>
            ヘッダの内容。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_SASL_AUTHZID</constant></entry>
           <entry valign="top">
            通信に用いる authorization identity (authzid) を指定します。
            PLAIN SASL 認証メカニズムの場合にのみ適用できますが、これはオプションです。
            指定されない場合は、
            ユーザー名のみを指定した authentication identity(authcid) のみを、パスワードと一緒にサーバーに送信します。
            サーバーは authzid が指定されない場合、authcid から authzid を導出し、内部的に用います。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_SERVICE_NAME</constant></entry>
           <entry valign="top">
            認証サービス名
           </entry>
           <entry valign="top">
            cURL 7.43.0 で追加されました。PHP 7.0.7 以降で利用可能です。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_SSH_HOST_PUBLIC_KEY_MD5</constant></entry>
           <entry valign="top">
            32 桁の十六進文字列。この文字列は、リモートホストの公開鍵の MD5 チェックサムでなければなりません。
            md5sum がマッチしない限り、libcurl はホストとの接続を拒否します。
            このオプションは、SCP および SFTP でのみ有効です。
           </entry>
           <entry valign="top">
            cURL 7.17.1 で追加されました。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_SSH_HOST_PUBLIC_KEY_SHA256</constant></entry>
           <entry valign="top">
            リモートホストの公開鍵を、Base64 エンコードされた SHA256 ハッシュ形式で指定します。
            指定されたハッシュがリモートホストが提供するそれと一致しない場合、
            通信は失敗します。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_SSH_PUBLIC_KEYFILE</constant></entry>
           <entry valign="top">
            公開鍵のファイル名。指定しなかった場合、libcurl はデフォルトの場所を探します。デフォルトは、
            環境変数 HOME が設定されていれば $HOME/.ssh/id_dsa.pub、設定されていなければ
            カレントディレクトリの "id_dsa.pub" です。
           </entry>
           <entry valign="top">
            cURL 7.16.1 で追加されました。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_SSH_PRIVATE_KEYFILE</constant></entry>
           <entry valign="top">
            秘密鍵のファイル名。指定しなかった場合、libcurl はデフォルトの場所を探します。デフォルトは、
            環境変数 HOME が設定されていれば $HOME/.ssh/id_dsa、設定されていなければ
            カレントディレクトリの "id_dsa" です。
            ファイルがパスワードで保護されている場合は、パスワードを
            <constant>CURLOPT_KEYPASSWD</constant> に設定します。
           </entry>
           <entry valign="top">
            cURL 7.16.1 で追加されました。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_SSL_CIPHER_LIST</constant></entry>
           <entry valign="top">
            SSL で使用する暗号のリスト。例えば
            <literal>RC4-SHA</literal> および <literal>TLSv1</literal> が
            使用可能です。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_SSL_EC_CURVES</constant></entry>
           <entry valign="top">
            楕円曲線暗号のアルゴリズムの一覧を、コロンで区切って指定します。
            たとえば、<literal>X25519:P-521</literal> は、
            有効な楕円曲線暗号の一覧です。
            このオプションは、
            cURL のSSLバックエンドがそのサポートを用いるようにビルドされている場合に、
            SSL ハンドシェイクで使われるクライアントの鍵交換アルゴリズムを定義します。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_SSLCERT</constant></entry>
           <entry valign="top">
            PEM フォーマットの証明書を含むファイルの名前。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_SSLCERTPASSWD</constant></entry>
           <entry valign="top">
            <constant>CURLOPT_SSLCERT</constant>
            証明書を使用する際に必要なパスワード。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_SSLCERTTYPE</constant></entry>
           <entry valign="top">
            証明書の形式。サポートされるフォーマットは
            <literal>"PEM"</literal>（デフォルト）、<literal>"DER"</literal>
            および <literal>"ENG"</literal> です。
            OpenSSL 0.9.3 以降では、
            <literal>"P12"</literal> (PKCS#12 でエンコードされたファイル) もサポートしています。
           </entry>
           <entry valign="top">
            cURL 7.9.3 で追加されました。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_SSLENGINE</constant></entry>
           <entry valign="top">
            <constant>CURLOPT_SSLKEY</constant> で指定した SSL 秘密鍵の
            暗号化エンジンの ID 。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_SSLENGINE_DEFAULT</constant></entry>
           <entry valign="top">
            非対称暗号化で使用する暗号化エンジンの ID 。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_SSLKEY</constant></entry>
           <entry valign="top">
            SSL 秘密鍵を含むファイルの名前。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_SSLKEYPASSWD</constant></entry>
           <entry valign="top"><para>
            <constant>CURLOPT_SSLKEY</constant> で指定した SSL 秘密鍵を
            使用するために必要なパスワード。
            <note>
             <para>
              このオプションには重要なパスワードが含まれます。PHP スクリプトを
              安全な状態におくことを忘れないでください。
             </para>
            </note>
           </para></entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_SSLKEYTYPE</constant></entry>
           <entry valign="top">
            <constant>CURLOPT_SSLKEY</constant> で指定した SSL 秘密鍵の
            形式。サポートされる型は以下のとおりです。
            <literal>"PEM"</literal>（デフォルト）、<literal>"DER"</literal>
            および <literal>"ENG"</literal> 。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_TLS13_CIPHERS</constant></entry>
           <entry valign="top">
            TLS 1.3 接続を確立するために使う暗号スイートの一覧。
            この一覧はひとつ以上の暗号スイートの文字列がコロンで区切られており、
            構文的に正しくなければなりません。
            このオプションは現状、OpenSSL 1.1.1 以降でcurlがビルドされている場合にだけ使われています。
            他のSSLバックエンドを使っている場合、
            <constant>CURLOPT_SSL_CIPHER_LIST</constant> を使うと TLS 1.3 の暗号スイートを設定できます。
           </entry>
           <entry valign="top">
            PHP 7.3.0 以降 および cURL &gt;= 7.61.0 と OpenSSL &gt;= 1.1.1 をビルドした場合に使用可能です。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_UNIX_SOCKET_PATH</constant></entry>
           <entry valign="top">
            接続のエンドポイントとして Unixドメインソケットの利用を有効にし、
            ドメインソケットのパスを与えられた <type>string</type> として設定します。
           </entry>
           <entry valign="top">
            cURL 7.40.0 で追加されました。
            PHP 7.0.7 以降で利用可能です。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_URL</constant></entry>
           <entry valign="top">
            取得する URL 。<function>curl_init</function> でセッションを
            初期化する際に指定することも可能です。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_USERAGENT</constant></entry>
           <entry valign="top">
            HTTP リクエストで使用される <literal>"User-Agent: "</literal>
            ヘッダの内容。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_USERNAME</constant></entry>
           <entry valign="top">
            認証に使うユーザー名
           </entry>
           <entry valign="top">
            cURL 7.19.1 で追加されました。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_PASSWORD</constant></entry>
           <entry valign="top">
            認証に使うパスワード
           </entry>
           <entry valign="top">
            cURL 7.19.1 で追加されました。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_USERPWD</constant></entry>
           <entry valign="top">
            接続に使用するユーザー名とパスワード。
            <literal>"[username]:[password]"</literal> 形式で指定します。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_XOAUTH2_BEARER</constant></entry>
           <entry valign="top">
            OAuth 2.0 のアクセストークンを指定します。
           </entry>
           <entry valign="top">
            cURL 7.33.0 で追加されました。PHP 7.0.7 以降で利用可能です。
           </entry>
          </row>
         </tbody>
        </tgroup>
       </informaltable>
      </para>
      <para>
       <parameter>value</parameter> には、
       <parameter>option</parameter> の以下の値に関して
       配列を指定する必要があります。
       <informaltable>
        <tgroup cols="3">
         <thead>
          <row>
           <entry>オプション</entry>
           <entry><parameter>value</parameter> への設定値</entry>
           <entry>注記</entry>
          </row>
         </thead>
         <tbody>
          <row>
           <entry valign="top"><constant>CURLOPT_CONNECT_TO</constant></entry>
           <entry valign="top">
            URL で指定されたホストとポートのかわりに接続する、
            特定のホストとポート。
            <literal>HOST:PORT:CONNECT-TO-HOST:CONNECT-TO-PORT</literal>
            というフォーマット文字列の配列を受け入れます。
           </entry>
           <entry valign="top">
            cURL 7.49.0 で追加されました。
            PHP 7.0.7 以降で利用可能です。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_HTTP200ALIASES</constant></entry>
           <entry valign="top">
            エラーではなく正常な応答として扱われる、HTTP 200 レスポンスの配列。
           </entry>
           <entry valign="top">
            cURL 7.10.3 で追加されました。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_HTTPHEADER</constant></entry>
           <entry valign="top">
            設定する HTTP ヘッダフィールドの配列。
            <code>
             array('Content-type: text/plain', 'Content-length: 100')
            </code>
            形式。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_POSTQUOTE</constant></entry>
           <entry valign="top">
            FTP リクエストの実行後に、サーバー上で実行する FTP コマンドの配列。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_PROXYHEADER</constant></entry>
           <entry valign="top">
            プロキシに渡すカスタムHTTPヘッダの配列
           </entry>
           <entry valign="top">
            cURL 7.37.0 で追加されました。
            PHP 7.0.7 以降で利用可能です。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_QUOTE</constant></entry>
           <entry valign="top">
            FTP リクエストの前にサーバー上で実行する FTP コマンドの配列。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_RESOLVE</constant></entry>
           <entry valign="top">
            特定のホストとポートのペアのための、カスタムアドレスを指定します。
            ホスト名、ポート、そして IP アドレスの文字列の配列です。
            それぞれの要素はコロンで区切る必要があります。
            以下のようなフォーマットになります:
            <code>
             array("example.com:80:127.0.0.1")
            </code>
           </entry>
           <entry valign="top">
            cURL 7.21.3 で追加されました。
           </entry>
          </row>
         </tbody>
        </tgroup>
       </informaltable>
      </para>
      <para>
       <parameter>value</parameter> はストリームリソース（例えば
       <function>fopen</function> が作成するもの）であり、以下の
       <parameter>option</parameter> パラメータに設定します。
       <informaltable>
        <tgroup cols="3">
         <thead>
          <row>
           <entry>オプション</entry>
           <entry><parameter>value</parameter> に設定する内容</entry>
          </row>
         </thead>
         <tbody>
          <row>
           <entry valign="top"><constant>CURLOPT_FILE</constant></entry>
           <entry valign="top">
            転送内容が書き込まれるファイル。デフォルトは <constant>STDOUT</constant>
            （ブラウザウィンドウ）。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_INFILE</constant></entry>
           <entry valign="top">
            アップロード時に転送内容を読み込むファイル。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_STDERR</constant></entry>
           <entry valign="top">
            <constant>STDERR</constant> の代わりにエラーを出力する場所。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_WRITEHEADER</constant></entry>
           <entry valign="top">
            転送のヘッダ部分が書き込まれるファイル。
           </entry>
           <entry></entry>
          </row>
         </tbody>
        </tgroup>
       </informaltable>
      </para>
      <para>
       <parameter>value</parameter> には、
       <parameter>option</parameter> の以下の値に関して
       有効な関数あるいはクロージャの名前を指定する必要があります。
       <informaltable>
        <tgroup cols="3">
         <thead>
          <row>
           <entry>オプション</entry>
           <entry><parameter>value</parameter> への設定値</entry>
           <entry>備考</entry>
          </row>
         </thead>
         <tbody>
          <row>
           <entry valign="top"><constant>CURLOPT_HEADERFUNCTION</constant></entry>
           <entry valign="top">
            二つのパラメータをとるコールバック。
            最初のパラメータは CURL リソースで、2 番目は書き込む
            ヘッダデータの文字列です。このコールバック関数を使用するにあたり、
            ヘッダデータを書き込む処理を実装するのはあなたの役目となります。
            書き込んだデータのバイト数を返します。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_PASSWDFUNCTION</constant></entry>
           <entry valign="top">
            三つのパラメータをとるコールバック。
            最初のパラメータは CURL リソースで、2 番目はパスワード
            プロンプトの文字列、そして 3 番目はパスワードの最大長です。
            入力されたパスワードを文字列で返します。
           </entry>
           <entry>PHP 7.3.0 で削除されました。</entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_PROGRESSFUNCTION</constant></entry>
           <entry valign="top">
            <para>
             五つのパラメータをとるコールバック。
             最初のパラメータは cURL 利ソールで、2 番目はこの転送でダウンロードしようとしている総バイト数、
             3 番目はこれまでにダウンロードしたバイト数、4 番目はこの転送でアップロードしようとしている総バイト数、
             そして 5 番目はこれまでにアップロードしたバイト数です。
            </para>
            <note>
             <para>
              このコールバックが呼ばれるのは、<constant>CURLOPT_NOPROGRESS</constant>
              が &false; の場合だけです。
             </para>
            </note>
            <para>
             ゼロ以外の値を返すと、転送を強制終了できます。このとき、この転送にはエラー
             <constant>CURLE_ABORTED_BY_CALLBACK</constant>
             が設定されます。
            </para>
           </entry>
           <entry></entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_READFUNCTION</constant></entry>
           <entry valign="top">
            三つのパラメータをとるコールバック。
            最初のパラメータは CURL リソースで、2 番目は
            <constant>CURLOPT_INFILE</constant> で cURL に渡したストリームリソース、
            そして最後が読み込むデータの最大量です。
            コールバックは、要求したデータ量以下の長さの文字列を返さなければなりません。
            一般的には、渡されたストリームリソースから読み込んだデータを返します。
            <literal>EOF</literal> を伝えるには空文字列を返さなければなりません。
           </entry>
           <entry></entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_WRITEFUNCTION</constant></entry>
           <entry valign="top">
            二つのパラメータをとるコールバック。
            最初のパラメータは CURL リソースで、2 番目は書き込む
            データの文字列です。データの保存には、
            このコールバック関数を使わなければなりません。
            書き込んだデータの正確なバイト数を返す必要があります。
            返さなければ、エラーで転送が異常終了します。
           </entry>
           <entry></entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_XFERINFOFUNCTION</constant></entry>
           <entry valign="top">
            二つのパラメータをとるコールバック。
            <constant>CURLOPT_PROGRESSFUNCTION</constant>
            と目的は似ていますが、
            cURL の観点からはこちらの方がモダンで、好ましいオプションです。
           </entry>
           <entry valign="top">
            cURL 7.32.0 で追加されました。
            PHP 8.2.0 以降で利用可能です。
           </entry>
          </row>
         </tbody>
        </tgroup>
       </informaltable>
      </para>
      <para>
       その他の値
       <informaltable>
        <tgroup cols="3">
         <thead>
          <row>
           <entry>オプション</entry>
           <entry><parameter>value</parameter> への設定値</entry>
          </row>
         </thead>
         <tbody>
          <row>
           <entry valign="top"><constant>CURLOPT_SHARE</constant></entry>
           <entry valign="top">
            <function>curl_share_init</function> の結果。
            この cURL ハンドルに、共有ハンドルからのデータを使わせるようにします。
           </entry>
          </row>
         </tbody>
        </tgroup>
       </informaltable>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      &curl.changelog.handle-param;
      <row>
       <entry>7.3.15, 7.4.3</entry>
       <entry>
        <constant>CURLOPT_HTTP09_ALLOWED</constant> が追加されました。
       </entry>
      </row>
      <row>
       <entry>7.3.0</entry>
       <entry>
        <constant>CURLOPT_ABSTRACT_UNIX_SOCKET</constant>, <constant>CURLOPT_KEEP_SENDING_ON_ERROR</constant>,
        <constant>CURLOPT_PRE_PROXY</constant>, <constant>CURLOPT_PROXY_CAINFO</constant>,
        <constant>CURLOPT_PROXY_CAPATH</constant>, <constant>CURLOPT_PROXY_CRLFILE</constant>,
        <constant>CURLOPT_PROXY_KEYPASSWD</constant>, <constant>CURLOPT_PROXY_PINNEDPUBLICKEY</constant>,
        <constant>CURLOPT_PROXY_SSLCERT</constant>, <constant>CURLOPT_PROXY_SSLCERTTYPE</constant>,
        <constant>CURLOPT_PROXY_SSL_CIPHER_LIST</constant>, <constant>CURLOPT_PROXY_SSLKEY</constant>,
        <constant>CURLOPT_PROXY_SSLKEYTYPE</constant>, <constant>CURLOPT_PROXY_SSL_OPTIONS</constant>,
        <constant>CURLOPT_PROXY_SSL_VERIFYHOST</constant>, <constant>CURLOPT_PROXY_SSL_VERIFYPEER</constant>,
        <constant>CURLOPT_PROXY_SSLVERSION</constant>, <constant>CURLOPT_PROXY_TLSAUTH_PASSWORD</constant>,
        <constant>CURLOPT_PROXY_TLSAUTH_TYPE</constant>, <constant>CURLOPT_PROXY_TLSAUTH_USERNAME</constant>,
        <constant>CURLOPT_SOCKS5_AUTH</constant>, <constant>CURLOPT_SUPPRESS_CONNECT_HEADERS</constant>,
        <constant>CURLOPT_DISALLOW_USERNAME_IN_URL</constant>, <constant>CURLOPT_DNS_SHUFFLE_ADDRESSES</constant>,
        <constant>CURLOPT_HAPPY_EYEBALLS_TIMEOUT_MS</constant>, <constant>CURLOPT_HAPROXYPROTOCOL</constant>,
        <constant>CURLOPT_PROXY_TLS13_CIPHERS</constant>, <constant>CURLOPT_SSH_COMPRESSION</constant>,
        <constant>CURLOPT_TIMEVALUE_LARGE</constant> および <constant>CURLOPT_TLS13_CIPHERS</constant> が追加されました。
       </entry>
      </row>
      <row>
       <entry>7.0.7</entry>
       <entry>
        <constant>CURL_HTTP_VERSION_2</constant>, <constant>CURL_HTTP_VERSION_2_PRIOR_KNOWLEDGE</constant>,
        <constant>CURL_HTTP_VERSION_2TLS</constant>, <constant>CURL_REDIR_POST_301</constant>,
        <constant>CURL_REDIR_POST_302</constant>, <constant>CURL_REDIR_POST_303</constant>,
        <constant>CURL_REDIR_POST_ALL</constant>, <constant>CURL_VERSION_KERBEROS5</constant>,
        <constant>CURL_VERSION_PSL</constant>, <constant>CURL_VERSION_UNIX_SOCKETS</constant>,
        <constant>CURLAUTH_NEGOTIATE</constant>, <constant>CURLAUTH_NTLM_WB</constant>,
        <constant>CURLFTP_CREATE_DIR</constant>, <constant>CURLFTP_CREATE_DIR_NONE</constant>,
        <constant>CURLFTP_CREATE_DIR_RETRY</constant>, <constant>CURLHEADER_SEPARATE</constant>,
        <constant>CURLHEADER_UNIFIED</constant>, <constant>CURLMOPT_CHUNK_LENGTH_PENALTY_SIZE</constant>,
        <constant>CURLMOPT_CONTENT_LENGTH_PENALTY_SIZE</constant>, <constant>CURLMOPT_MAX_HOST_CONNECTIONS</constant>,
        <constant>CURLMOPT_MAX_PIPELINE_LENGTH</constant>, <constant>CURLMOPT_MAX_TOTAL_CONNECTIONS</constant>,
        <constant>CURLOPT_CONNECT_TO</constant>, <constant>CURLOPT_DEFAULT_PROTOCOL</constant>,
        <constant>CURLOPT_DNS_INTERFACE</constant>, <constant>CURLOPT_DNS_LOCAL_IP4</constant>,
        <constant>CURLOPT_DNS_LOCAL_IP6</constant>, <constant>CURLOPT_EXPECT_100_TIMEOUT_MS</constant>,
        <constant>CURLOPT_HEADEROPT</constant>, <constant>CURLOPT_LOGIN_OPTIONS</constant>,
        <constant>CURLOPT_PATH_AS_IS</constant>, <constant>CURLOPT_PINNEDPUBLICKEY</constant>,
        <constant>CURLOPT_PIPEWAIT</constant>, <constant>CURLOPT_PROXY_SERVICE_NAME</constant>,
        <constant>CURLOPT_PROXYHEADER</constant>, <constant>CURLOPT_SASL_IR</constant>,
        <constant>CURLOPT_SERVICE_NAME</constant>, <constant>CURLOPT_SSL_ENABLE_ALPN</constant>,
        <constant>CURLOPT_SSL_ENABLE_NPN</constant>, <constant>CURLOPT_SSL_FALSESTART</constant>,
        <constant>CURLOPT_SSL_VERIFYSTATUS</constant>, <constant>CURLOPT_STREAM_WEIGHT</constant>,
        <constant>CURLOPT_TCP_FASTOPEN</constant>, <constant>CURLOPT_TFTP_NO_OPTIONS</constant>,
        <constant>CURLOPT_UNIX_SOCKET_PATH</constant>, <constant>CURLOPT_XOAUTH2_BEARER</constant>,
        <constant>CURLPROTO_SMB</constant>, <constant>CURLPROTO_SMBS</constant>,
        <constant>CURLPROXY_HTTP_1_0</constant>, <constant>CURLSSH_AUTH_AGENT</constant>,
        <constant>CURLSSLOPT_NO_REVOKE</constant>
        が追加されました。
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>
 
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>新規に cURL セッションを初期化、ウェブページを取得する</title>
    <programlisting role="php">
<![CDATA[
<?php
// 新しい cURL リソースを作成します
$ch = curl_init();

// URL その他のオプションを適切に設定します
curl_setopt($ch, CURLOPT_URL, "http://www.example.com/");
curl_setopt($ch, CURLOPT_HEADER, false);

// URL の内容を取得し、ブラウザに渡します
curl_exec($ch);

// cURL リソースを閉じ、システムリソースを開放します
curl_close($ch);
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>
 
 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <para>
    配列を <constant>CURLOPT_POSTFIELDS</constant> に渡すと、データを
    <emphasis>multipart/form-data</emphasis> でエンコードします。
    一方 URL エンコードされた文字列を渡すと、データを
    <emphasis>application/x-www-form-urlencoded</emphasis> でエンコードします。
   </para>
  </note>
 </refsect1>
 
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>curl_setopt_array</function></member>
    <member><classname>CURLFile</classname></member>
    <member><classname>CURLStringFile</classname></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
