<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: a4fe8cf4c7712c4af6d2b0dc2e3d7090f53f4e21 Maintainer: takagi Status: ready -->

<refentry xml:id="function.eio-readdir" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>eio_readdir</refname>
  <refpurpose>ディレクトリ全体を読み込む</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>resource</type><methodname>eio_readdir</methodname>
   <methodparam><type>string</type><parameter>path</parameter></methodparam>
   <methodparam><type>int</type><parameter>flags</parameter></methodparam>
   <methodparam><type>int</type><parameter>pri</parameter></methodparam>
   <methodparam><type>callable</type><parameter>callback</parameter></methodparam>
   <methodparam
   choice="opt"><type>string</type><parameter>data</parameter><initializer>NULL</initializer></methodparam>
  </methodsynopsis>
  <para>
   ディレクトリ全体を (<literal>opendir</literal> や <literal>readdir</literal>、
   <literal>closedir</literal> といったシステムコールを使って) 読み込み、
   ファイル名あるいは配列 (<parameter>flags</parameter> で指定する) を
   <parameter>callback</parameter> 関数の <parameter>result</parameter> 引数で返します。
  </para>

 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term><parameter>path</parameter></term>
    <listitem>
     <para>
      ディレクトリのパス。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>flags</parameter></term>
    <listitem>
     <para>
      <emphasis>EIO_READDIR_*</emphasis> 定数の組み合わせ。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>pri</parameter></term>
    <listitem>
     &eio.request.pri.values;
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>callback</parameter></term>
    <listitem>
      &eio.callback.proto;
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>data</parameter></term>
    <listitem>
     <para>
      <parameter>callback</parameter> に渡す任意の引数。
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   <function>eio_readdir</function>
   は、成功した場合にリクエストリソースを返します。&return.falseforfailure;。
   <parameter>callback</parameter> 関数の <parameter>result</parameter>
   に設定される内容は <parameter>flags</parameter> によって変わります。
  </para>

  <para>
   <variablelist>

    <!--{{{ EIO_READDIR_* -->
    <varlistentry>
     <term>
      <constant>EIO_READDIR_DENTS</constant>
      (<type>int</type>)
     </term>
     <listitem>
      <simpara>
       <function>eio_readdir</function> のフラグ。指定すると、コールバックの result 引数が次のキーを持つ配列になります。
       <literal>'names'</literal> - ディレクトリ名の配列／
       <literal>'dents'</literal> - <literal>struct eio_dirent</literal> 風の配列で、
       それぞれがさらに以下のキーを持ちます (
       <literal>'name'</literal> - ディレクトリ名／
       <literal>'type'</literal> - <emphasis>EIO_DT_*</emphasis> 定数のいずれか／
       <literal>'inode'</literal> - inode 番号。存在しない場合は不定
       )
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <constant>EIO_READDIR_DIRS_FIRST</constant>
      (<type>int</type>)
     </term>
     <listitem>
      <simpara>
      このフラグを指定すると、ディレクトリをまず最初に返して
      stat に最適化した順に返します。
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <constant>EIO_READDIR_STAT_ORDER</constant>
      (<type>int</type>)
     </term>
     <listitem>
      <simpara>
      このフラグを指定すると、名前を返すときの順序が
      各ファイルを <literal>stat</literal> するのに適した順となります。
      指定したディレクトリにあるすべてのファイルを
      <function>stat</function> するつもりなら、この順にしておけば最速になります。
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <constant>EIO_READDIR_FOUND_UNKNOWN</constant>
      (<type>int</type>)
     </term>
     <listitem>
      <simpara>

      </simpara>
     </listitem>
    </varlistentry>
<!--}}}-->

   </variablelist>
  </para>

  <para>ノード型
   <variablelist>

<!--{{{ EIO_DT_* -->
    <varlistentry>
     <term>
      <constant>EIO_DT_UNKNOWN</constant>
      (<type>int</type>)
     </term>
     <listitem>
      <simpara>
      不明なノード型 (ありがち)。さらに <function>stat</function> が必要です。
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <constant>EIO_DT_FIFO</constant>
      (<type>int</type>)
     </term>
     <listitem>
      <simpara>
      FIFO ノード型
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <constant>EIO_DT_CHR</constant>
      (<type>int</type>)
     </term>
     <listitem>
      <simpara>
      ノード型
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <constant>EIO_DT_MPC</constant>
      (<type>int</type>)
     </term>
     <listitem>
      <simpara>
      多重化キャラクタデバイス (v7+coherent) ノード型
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <constant>EIO_DT_DIR</constant>
      (<type>int</type>)
     </term>
     <listitem>
      <simpara>
      ディレクトリノード型
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <constant>EIO_DT_NAM</constant>
      (<type>int</type>)
     </term>
     <listitem>
      <simpara>
      Xenix 名前付きファイルノード型
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <constant>EIO_DT_BLK</constant>
      (<type>int</type>)
     </term>
     <listitem>
      <simpara>
      ノード型
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <constant>EIO_DT_MPB</constant>
      (<type>int</type>)
     </term>
     <listitem>
      <simpara>
      多重化ブロックデバイス (v7+coherent)
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <constant>EIO_DT_REG</constant>
      (<type>int</type>)
     </term>
     <listitem>
      <simpara>
      ノード型
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <constant>EIO_DT_NWK</constant>
      (<type>int</type>)
     </term>
     <listitem>
      <simpara>
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <constant>EIO_DT_CMP</constant>
      (<type>int</type>)
     </term>
     <listitem>
      <simpara>
      HP-UX ネットワークノード型
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <constant>EIO_DT_LNK</constant>
      (<type>int</type>)
     </term>
     <listitem>
      <simpara>
      リンクノード型
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <constant>EIO_DT_SOCK</constant>
      (<type>int</type>)
     </term>
     <listitem>
      <simpara>
      ソケットノード型
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <constant>EIO_DT_DOOR</constant>
      (<type>int</type>)
     </term>
     <listitem>
      <simpara>
      Solaris door ノード型
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <constant>EIO_DT_WHT</constant>
      (<type>int</type>)
     </term>
     <listitem>
      <simpara>
      ノード型
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <constant>EIO_DT_MAX</constant>
      (<type>int</type>)
     </term>
     <listitem>
      <simpara>
      ノード型の最大値
      </simpara>
     </listitem>
    </varlistentry>
 
 <!--}}}-->
 
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title><function>eio_readdir</function> の例</title>
   <programlisting role="php">
<![CDATA[
<?php
/* eio_readdir() が終わったら呼ばれます */
function my_readdir_callback($data, $result) {
    echo __FUNCTION__, " called\n";
    echo "data: "; var_dump($data);
    echo "result: "; var_dump($result);
    echo "\n";
}

eio_readdir("/var/spool/news", EIO_READDIR_STAT_ORDER | EIO_READDIR_DIRS_FIRST,
  EIO_PRI_DEFAULT, "my_readdir_callback");
eio_event_loop();
?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
<![CDATA[
my_readdir_callback called
data: NULL
result: array(2) {
 ["names"]=>
  array(7) {
   [0]=>
    string(7) "archive"
    [1]=>
    string(8) "articles"
    [2]=>
    string(8) "incoming"
    [3]=>
    string(7) "innfeed"
    [4]=>
    string(8) "outgoing"
    [5]=>
    string(8) "overview"
    [6]=>
    string(3) "tmp"
  }
 ["dents"]=>
  array(7) {
   [0]=>
    array(3)
    {
     ["name"]=>
      string(7)
      "archive"
      ["type"]=>
      int(4)
      ["inode"]=>
      int(393265)
    }
   [1]=>
    array(3)
    {
     ["name"]=>
      string(8)
      "articles"
      ["type"]=>
      int(4)
      ["inode"]=>
      int(393266)
    }
   [2]=>
    array(3)
    {
     ["name"]=>
      string(8)
      "incoming"
      ["type"]=>
      int(4)
      ["inode"]=>
      int(393267)
    }
   [3]=>
    array(3)
    {
     ["name"]=>
      string(7)
      "innfeed"
      ["type"]=>
      int(4)
      ["inode"]=>
      int(393269)
    }
   [4]=>
    array(3)
    {
     ["name"]=>
      string(8)
      "outgoing"
      ["type"]=>
      int(4)
      ["inode"]=>
      int(393270)
    }
   [5]=>
    array(3)
    {
     ["name"]=>
      string(8)
      "overview"
      ["type"]=>
      int(4)
      ["inode"]=>
      int(393271)
    }
   [6]=>
    array(3)
    {
     ["name"]=>
      string(3)
      "tmp"
      ["type"]=>
      int(4)
      ["inode"]=>
      int(393272)
    }
  }
}
]]>
   </screen>
  </example>
 </refsect1>


</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
