<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 9ee9eccf455188ab6eb352194eb6f9eb99e15606 Maintainer: takagi Status: ready -->

 <sect1 xml:id="language.oop5.late-static-bindings" xmlns="http://docbook.org/ns/docbook">
  <title>遅延静的束縛 (Late Static Bindings)</title>
  <para>
   PHP には、遅延静的束縛と呼ばれる機能が搭載されています。
   これを使用すると、静的継承のコンテキストで呼び出し元のクラスを参照できるようになります。
  </para>

  <para>
   より正確に言うと、遅延静的束縛は直近の "非転送コール" のクラス名を保存します。
   staticメソッドの場合、これは明示的に指定されたクラス (通常は
   <link linkend="language.oop5.paamayim-nekudotayim"><literal>::</literal></link>
   演算子の左側に書かれたもの) となります。staticメソッド以外の場合は、そのオブジェクトのクラスとなります。
   "転送コール" とは、<literal>self::</literal> や
   <literal>parent::</literal>、<literal>static::</literal> による :: 演算子を使ったコール。
   あるいはクラス階層の中での <function>forward_static_call</function> によるコールのことです。
   <!-- technically, static:: may be non forwarding, but it's irrelevant -->
   
   <function>get_called_class</function> 関数を使うとコール元のクラス名を文字列で取得できます。
   <literal>static::</literal> はこのクラスのスコープとなります。
  </para>
  
  <para>
   この "遅延静的束縛" という機能名は、内部動作を考慮してつけられたものです。
   "遅延束縛 (Late binding)" の由来は、メソッドを定義しているクラス名を使用しても
   <literal>static::</literal> の解決ができないことによります。
   その代わりに、実行時情報をもとに解決するようになります。

   "静的束縛 (static binding)" の由来は、
   staticメソッドのコールに使用できることによります
   (ただし、staticメソッド以外でも使用可能です)。
  </para>

  <sect2 xml:id="language.oop5.late-static-bindings.self">
   <title><literal>self::</literal> の制限</title>
   <para>
    <literal>self::</literal> あるいは <literal>__CLASS__</literal>
    による現在のクラスへの静的参照は、
    そのメソッドが属するクラス (つまり、
    そのメソッドが定義されているクラス) に解決されます。
   </para>
   <example>
    <title><literal>self::</literal> の使用例</title>
    <programlisting role="php">
<![CDATA[
<?php
class A {
    public static function who() {
        echo __CLASS__;
    }
    public static function test() {
        self::who();
    }
}

class B extends A {
    public static function who() {
        echo __CLASS__;
    }
}

B::test();
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
A
]]>
    </screen>
   </example>

  </sect2>

  <sect2 xml:id="language.oop5.late-static-bindings.usage">
   <title>遅延静的束縛の使用法</title>

   <para>
    遅延静的束縛は、この制限を解決するためのキーワードを導入し、
    実行時に最初にコールされたクラスを参照するようにしています。
    このキーワードを使用すると、先ほどの例における
    <literal>test()</literal> から <literal>B</literal>
    を参照できるようになります。
    このキーワードは新たに追加したものではなく、すでに予約済みである
    <literal>static</literal> を使用しています。
   </para>

   <example>
    <title><literal>static::</literal> のシンプルな使用法</title>
    <programlisting role="php">
<![CDATA[
<?php
class A {
    public static function who() {
        echo __CLASS__;
    }
    public static function test() {
        static::who(); // これで、遅延静的束縛が行われます
    }
}

class B extends A {
    public static function who() {
        echo __CLASS__;
    }
}

B::test();
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
B
]]>
    </screen>
   </example>
   <note>
    <para>
     静的でないコンテキストでは、呼び出されるクラスはそのオブジェクトのクラスと同じになります。
     <literal>$this-></literal> は private メソッドを同じスコープからコールしようとするので、
     <literal>static::</literal> を使うと異なる結果となります。もうひとつの相違点は、
     <literal>static::</literal> はstaticプロパティしか参照できないということです。
    </para>
   </note>
   <example>
    <title>非静的コンテキストにおける <literal>static::</literal> の使用法</title>
    <programlisting role="php">
<![CDATA[
<?php
class A {
    private function foo() {
        echo "success!\n";
    }
    public function test() {
        $this->foo();
        static::foo();
    }
}

class B extends A {
   /* foo() が B にコピーされるので、メソッドのスコープは A のままとなり、
    * コールは成功します */
}

class C extends A {
    private function foo() {
        /* もとのメソッドが置き換えられるので、新しいメソッドのスコープは C となります */
    }
}

$b = new B();
$b->test();
$c = new C();
$c->test();   //fails
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
success!
success!
success!


Fatal error:  Call to private method C::foo() from context 'A' in /tmp/test.php on line 9
]]>
    </screen>
   </example>
   <note>
    <para>
     遅延静的束縛の解決は、:: を使ったコールが代替なしに完全に解決された時点で終了します。
     一方、<literal>parent::</literal> や <literal>self::</literal>
     といったキーワードを使用するコールは、コール元の情報を転送します。
    </para>
    <example>
     <title>転送するコールと転送しないコール</title>
     <programlisting role="php">
<![CDATA[
<?php
class A {
    public static function foo() {
        static::who();
    }

    public static function who() {
        echo __CLASS__."\n";
    }
}

class B extends A {
    public static function test() {
        A::foo();
        parent::foo();
        self::foo();
    }

    public static function who() {
        echo __CLASS__."\n";
    }
}
class C extends B {
    public static function who() {
        echo __CLASS__."\n";
    }
}

C::test();
?>
]]>
     </programlisting>
     &example.outputs;
     <screen>
<![CDATA[
A
C
C
]]>
     </screen>
    </example>
   </note>
  </sect2>
 </sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
