<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 351500 $ -->
<!-- EN-Revision: 12b1d4704ea448b55ec155619be1e50c0e67e9f9 Maintainer: mumumu Status: ready -->

<sect1 xml:id="migration80.incompatible" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>下位互換性のない変更点</title>

 <sect2 xml:id="migration80.incompatible.core">
  <title>PHP コア</title>

  <sect3 xml:id="migration80.incompatible.core.string-number-comparision">
   <title>文字列と数値の比較</title>

   <para>
    (厳密でないやり方で)数値と非数値文字列を比較する場合、
    数値を文字列にキャストし、文字列と比較するようになりました。
    数値と数値形式の文字列の比較は、以前と同じ振る舞いをします。
    注意すべきなのは、これによって、
    <code>0 == "not-a-number"</code> が &false; と見なされるようになったことです。
    <informaltable>
     <tgroup cols="3">
      <thead>
       <row>
        <entry>比較</entry>
        <entry>変更前</entry>
        <entry>変更後</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry><code>0 == "0"</code></entry>
        <entry>&true;</entry>
        <entry>&true;</entry>
       </row>
       <row>
        <entry><code>0 == "0.0"</code></entry>
        <entry>&true;</entry>
        <entry>&true;</entry>
       </row>
       <row>
        <entry><code>0 == "foo"</code></entry>
        <entry>&true;</entry>
        <entry>&false;</entry>
       </row>
       <row>
        <entry><code>0 == ""</code></entry>
        <entry>&true;</entry>
        <entry>&false;</entry>
       </row>
       <row>
        <entry><code>42 == "   42"</code></entry>
        <entry>&true;</entry>
        <entry>&true;</entry>
       </row>
       <row>
        <entry><code>42 == "42foo"</code></entry>
        <entry>&true;</entry>
        <entry>&false;</entry>
       </row>
      </tbody>
     </tgroup>
    </informaltable>
    <!-- RFC: https://wiki.php.net/rfc/string_to_number_comparison -->
   </para>
  </sect3>

  <sect3 xml:id="migration80.incompatible.core.other">
   <title>その他の下位互換性のない変更</title>

   <itemizedlist>
    <listitem>
     <para>
      <literal>match</literal> が予約語になりました。
     </para>
    </listitem>
    <listitem>
     <para>
      アサーションに失敗すると、デフォルトで例外をスローするようになりました。
      古い振る舞いを望む場合、php.ini で <code>assert.exception=0</code> と設定できます。
     </para>
    </listitem>
    <listitem>
     <para>
      クラス名と同じ名前のメソッドは、コンストラクタと解釈されなくなりました。
      <link linkend="object.construct">__construct()</link> メソッドを代わりに使って下さい。
     </para>
    </listitem>
    <listitem>
     <para>
      静的でないメソッドを静的に呼ぶことができる機能が削除されました。
      静的でないメソッドをクラス名を使ってチェックした場合、
      <function>is_callable</function> は失敗します。
      (オブジェクトのインスタンスを使ってチェックしなければいけません)
     </para>
    </listitem>
    <listitem>
     <para>
      <code>(real)</code> と <code>(unset)</code> キャストが削除されました。
     </para>
    </listitem>
    <listitem>
      <para>
       <link linkend="ini.track-errors">track_errors</link> ini ディレクティブは削除されました。
       つまり、<varname>php_errormsg</varname> が利用できなくなったということです。
       代わりに <function>error_get_last</function> 関数が使えます。
      </para>
    </listitem>
    <listitem>
     <para>
      大文字小文字を区別しない定数を定義できる機能が削除されました。
      <function>define</function> 関数の第3引数はもはや &true; ではありません。
     </para>
    </listitem>
    <listitem>
     <para>
      <function>__autoload</function> 関数を使ってオートローダーを指定する機能は削除されました。
      代わりに <function>spl_autoload_register</function> を使うべきです。
     </para>
    </listitem>
    <listitem>
     <para>
      <function>set_error_handler</function> 関数で設定されるカスタムエラーハンドラには、
      <parameter>errcontext</parameter> 引数は渡されなくなりました。
     </para>
    </listitem>
    <listitem>
     <para>
      <function>create_function</function> 関数は削除されました。
      無名関数が代わりに使えます。
     </para>
    </listitem>
    <listitem>
     <para>
      <function>each</function> 関数は削除されました。
      代わりに &foreach; や <classname>ArrayIterator</classname> を使うべきです。
     </para>
    </listitem>
    <listitem>
     <para>
      <methodname>Closure::fromCallable</methodname> や
      <methodname>ReflectionMethod::getClosure</methodname> を使って
      メソッドから生成されたクロージャーから
      <varname>this</varname> の束縛を解除できる機能は削除されました。
     </para>
    </listitem>
    <listitem>
     <para>
      <varname>this</varname> を使っている適切なクロージャーから、
      <varname>this</varname> の束縛を解除する機能も削除されています。
     </para>
    </listitem>
    <listitem>
     <para>
      オブジェクトに対して <function>array_key_exists</function>
      関数を使える機能は削除されました。
      <function>isset</function> または <function>property_exists</function>
      を代わりに使えます。
     </para>
    </listitem>
    <listitem>
     <para>
      <function>array_key_exists</function> 関数の引数 <parameter>key</parameter>
      の型に関する振る舞いが、
      <function>isset</function> 関数や配列アクセスの場合と一貫したものになりました。
      全てのキーの型は通常の強制が行われ、配列やオブジェクトのキーは
      <classname>TypeError</classname> がスローされるようになりました。
     </para>
    </listitem>
    <listitem>
     <para>
      はじめの数値のキーとして <replaceable>n</replaceable> を持つ配列は、
      たとえ <replaceable>n</replaceable> が負の値であっても、
      次の暗黙のキーは <replaceable>n+1</replaceable> を使うようになります。
      <!-- RFC: https://wiki.php.net/rfc/negative_array_index -->
     </para>
    </listitem>
    <listitem>
     <para>
      デフォルトの error_reporting のレベルは <constant>E_ALL</constant> になりました。
      これより前のバージョンでは、 
      <constant>E_ALL</constant> から
      <constant>E_NOTICE</constant> と <constant>E_DEPRECATED</constant> が除かれていました。
     </para>
    </listitem>
    <listitem>
     <para>
      <link linkend="ini.display-startup-errors">display_startup_errors</link> は、
      デフォルトで有効になりました。
     </para>
    </listitem>
    <listitem>
     <para>
      親クラスがないクラスの内部で <type>parent</type> を使うと、
      致命的なコンパイルエラーが発生するようになりました。
     </para>
    </listitem>
    <listitem>
     <para>
      <literal>@</literal> 演算子は、致命的なエラー
      (<constant>E_ERROR</constant>, <constant>E_CORE_ERROR</constant>,
      <constant>E_COMPILE_ERROR</constant>, <constant>E_USER_ERROR</constant>,
      <constant>E_RECOVERABLE_ERROR</constant>, <constant>E_PARSE</constant>)
      を隠さなくなりました。
      <literal>@</literal> を使う時に、
      error_reporting が <literal>0</literal> であることを期待しているエラーハンドラは、
      代わりにマスクチェックを調整すべきです:
     </para>
     <para>
      <programlisting role="php">
<![CDATA[
<?php
// こういうエラーハンドラは
function my_error_handler($err_no, $err_msg, $filename, $linenum) {
    if (error_reporting() == 0) {
        return false; // Silenced
    }
    // ...
}

// 以下に置き換えましょう
function my_error_handler($err_no, $err_msg, $filename, $linenum) {
    if (!(error_reporting() & $err_no)) {
        return false; // Silenced
    }
    // ...
}
?>
]]>
      </programlisting>
     </para>
     <para>
      さらに、実運用環境で表示されていなかった、
      情報のリークに繋がるエラーメッセージにも注意を払うべきです。
      エラーのロギングと併せて、
      <code>display_errors=Off</code> となっていることを確認するようにして下さい。
     </para>
    </listitem>
    <listitem>
     <para>
      <literal>#[</literal> は、コメントの開始として解釈されなくなりました。
      この文法は、アトリビュート として使われるようになっているからです。
      <!-- RFC: https://wiki.php.net/rfc/shorter_attribute_syntax_change -->
     </para>
    </listitem>
    <listitem>
     <para>
      非互換なメソッドのシグネチャによる継承エラー(リスコフの置換原則違反)については、
      常に致命的なエラーが生成されるようになりました。
      これより前のバージョンでは、警告が生成される場合がありました。
      <!-- RFC: https://wiki.php.net/rfc/lsp_errors -->
     </para>
    </listitem>
    <listitem>
     <para>
      ビットシフトや加算、減算に対する連結演算子の優先順位が変更されました。
     </para>
     <para>
      <programlisting role="php">
<![CDATA[
<?php
echo "Sum: " . $a + $b;
// 上記は、以前のバージョンでは以下のように解釈されていました:
echo ("Sum: " . $a) + $b;
// PHP 8.0.0 からは、以下のように解釈されます:
echo "Sum:" . ($a + $b);
?>
]]>
      </programlisting>
      <!-- RFC: https://wiki.php.net/rfc/concatenation_precedence -->
     </para>
    </listitem>
    <listitem>
     <para>
      実行時に &null; に解決されるデフォルト値を持つ引数は、
      引数の型を暗黙のうちに nullable とマークすることはなくなりました。
      明示的に nullable と宣言するか、
      明示的にデフォルト値を &null; と宣言しなければなりません。
     </para>
     <para>
      <programlisting role="php">
<![CDATA[
<?php
// 以下のようなコードは
function test(int $arg = CONST_RESOLVING_TO_NULL) {}
// このように置き換えるか
function test(?int $arg = CONST_RESOLVING_TO_NULL) {}
// こう書きましょう
function test(int $arg = null) {}
?>
]]>
      </programlisting>
     </para>
    </listitem>
    <listitem>
     <para>
      たくさんの警告が <classname>Error</classname> 例外に変換されるようになりました:
     </para>
     <para>
      <simplelist>
       <member>
        オブジェクトでない値にプロパティを書き込もうとした場合。
        これより前のバージョンでは、
        &null; については stdClass オブジェクトが暗黙のうちに作られ、
        空文字列については &false; となっていました。
       </member>
       <member>
        PHP_INT_MAX キーが既に使われている配列に対して、
        要素を追加しようとした場合。
       </member>
       <member>
        不正な型(配列やオブジェクト)
        を配列のキーや文字列のオフセットとして使おうとした場合。
       </member>
       <member>スカラー値に配列のインデックスを書き込もうとした場合</member>
       <member>配列やTraversable でない値をアンパックしようとした場合</member>
       <member>
        未定義の、非修飾の定数にアクセスしようとした場合。
        これより前のバージョンでは、
        非修飾の定数にアクセスしようとすると、警告が発生し、
        文字列として解釈されていました。
       </member>
      </simplelist>
     </para>
     <para>
      多くの notice が警告に変換されるようになりました:
     </para>
     <para>
      <simplelist>
       <member>未定義の変数を読み取ろうとした場合</member>
       <member>未定義のプロパティを読み取ろうとした場合</member>
       <member>未定義の配列のキーを読み取ろうとした場合</member>
       <member>オブジェクトでない値のプロパティを読み取ろうとした場合</member>
       <member>配列でない値のインデックスにアクセスしようとした場合</member>
       <member>配列を文字列に変換しようとした場合</member>
       <member>リソースを配列のキーとして使おうとした場合</member>
       <member>null や bool 値や float の値を文字列オフセットとして使おうとした場合</member>
       <member>境界を超えて文字列のオフセットを読み取ろうとした場合</member>
       <member>文字列のオフセットに空文字列を割り当てようとした場合</member>
      </simplelist>
      <!-- RFC: https://wiki.php.net/rfc/engine_warnings -->
     </para>
    </listitem>
    <listitem>
     <para>
      文字列のオフセットに複数バイトを割り当てようとすると、警告が発生するようになりました。
     </para>
    </listitem>
    <listitem>
     <para>
      ソースファイル中に(文字列の範囲外のNUL バイトのような)
      想定外の文字が含まれていた場合、
      コンパイル時に警告を出す代わりに、
      <classname>ParseError</classname> がスローされるようになりました。
     </para>
    </listitem>
    <listitem>
     <para>
      例外がキャッチされなかった場合、
      "クリーンなシャットダウン" が行われます。
      これは、例外がキャッチされなかった後、
      デストラクタが呼ばれるということです。
     </para>
    </listitem>
    <listitem>
     <para>
      コンパイル時の致命的なエラー
      "Only variables can be passed by reference" は、
      実行時まで遅延され、
      "Argument cannot be passed by reference"
      という <classname>Error</classname> 例外に変換されるようになりました。
     </para>
    </listitem>
    <listitem>
     <para>
      "Only variables should be passed by reference" という警告は、
      "Argument cannot be passed by reference"
      という例外に変換されるようになりました。
     </para>
    </listitem>
    <listitem>
     <para>
      無名クラスのために生成される名前が変更されました。
      最初の親クラスやインターフェイスの名前が含まれるようになっています:
     </para>
     <para>
      <programlisting role="php">
<![CDATA[
<?php
new class extends ParentClass {};
// -> ParentClass@anonymous
new class implements FirstInterface, SecondInterface {};
// -> FirstInterface@anonymous
new class {};
// -> class@anonymous
?>
]]>
      </programlisting>
     </para>
     <para>
      上で示した名前の後に、NULバイトやユニークなサフィックスが続きます。
     </para>
    </listitem>
    <listitem>
     <para>
      トレイトのエイリアス調整において、
      クラス名を指定していないメソッド参照は、
      曖昧でないことが必須になりました:
     </para>
     <para>
      <programlisting role="php">
<![CDATA[
<?php
class X {
    use T1, T2 {
        func as otherFunc;
    }
    function func() {}
}
?>
]]>
      </programlisting>
     </para>
     <para>
      <code>T1::func()</code> と <code>T2::func()</code>
      が両方存在している場合、
      PHP 8.0.0 より前のバージョンでは、
      このコードは黙って動作し、func は
      <code>T1::func</code> を参照するものと想定されていました。
      PHP 8.0.0 からは、このコードは致命的なエラーが発生します。
      <code>T1::func</code> または <code>T2::func</code> 
      を明示的に書く必要があります。
     </para>
    </listitem>
    <listitem>
     <para>
      トレイトで定義される抽象メソッドのシグネチャは
      それを実装するクラスのメソッド側で、
      一致しているかがチェックされるようになりました:
     </para>
     <para>
      <programlisting role="php">
<![CDATA[
<?php
trait MyTrait {
    abstract private function neededByTrait(): string;
}

class MyClass {
    use MyTrait;

    // エラー。戻り値の型が一致しません。
    private function neededByTrait(): int { return 42; }
}
?>
]]>
      </programlisting>
      <!-- RFC: https://wiki.php.net/rfc/abstract_trait_method_validation -->
     </para>
    </listitem>
    <listitem>
     <para>
      無効にされている関数は、存在しない関数であるかのように扱われるようになりました。
      無効にされている関数を呼び出しても unknown と報告されますし、
      無効にされている関数を再定義することも可能になっています。
     </para>
    </listitem>
    <listitem>
     <para>
      <literal>data://</literal> ストリームラッパーは書き込み可能ではなくなりました。
      これは、ドキュメント化されている振る舞いに一致します。
     </para>
    </listitem>
    <listitem>
     <para>
      算術演算子とビット演算子
      <literal>+</literal>, <literal>-</literal>,
      <literal>*</literal>, <literal>/</literal>,
      <literal>**</literal>, <literal>%</literal>,
      <literal>&lt;&lt;</literal>, <literal>&gt;&gt;</literal>,
      <literal>&amp;</literal>,
      <literal>|</literal>, <literal>^</literal>,
      <literal>~</literal>, <literal>++</literal>,
      <literal>--</literal> は、オペランドのひとつが配列だったり、
      &resource; だったり、オーバーロードされた &object; でない場合に
      一貫して
      <classname>TypeError</classname> をスローするようになりました。
      これに対する唯一の例外は、配列と配列を
      <literal>+</literal> でマージする操作で、
      これはまだサポートされています。
      <!-- RFC: https://wiki.php.net/rfc/arithmetic_operator_type_checks -->
     </para>
    </listitem>
    <listitem>
     <para>
      float 型から文字列型へのキャストは、
      ロケールに依存しないように常に振る舞うようになります。
     </para>
     <para>
      <programlisting role="php">
<![CDATA[
<?php
setlocale(LC_ALL, "de_DE");
$f = 3.14;
echo $f, "\n";
// PHP 8.0.0 より前のバージョン: 3,14
// PHP 8.0.0 以降:        3.14
?>
]]>
      </programlisting>
     </para>
     <para>
      数値のフォーマットをカスタマイズする方法については、
      <function>printf</function>, <function>number_format</function> 関数
      および <methodname>NumberFormatter</methodname> メソッドを参照して下さい。
      <!-- RFC: https://wiki.php.net/rfc/locale_independent_float_to_string -->
     </para>
    </listitem>
    <listitem>
     <para>
      推奨されなくなっていた、
      オフセットを指定してアクセスするための波括弧のサポートが削除されました。
     </para>
     <para>
      <programlisting role="php">
<![CDATA[
<?php
// 以下ではなく:
$array{0};
$array{"key"};
// このように書いて下さい:
$array[0];
$array["key"];
?>
]]>
      </programlisting>
      <!-- RFC: https://wiki.php.net/rfc/deprecate_curly_braces_array_access -->
     </para>
    </listitem>
    <listitem>
     <para>
      private メソッドに final 修正子を指定した場合、
      そのメソッドがコンストラクタでない限り、警告が発生するようになります。
      <!-- FC: https://wiki.php.net/rfc/inheritance_private_methods -->
     </para>
    </listitem>
    <listitem>
     <para>
      オブジェクトのコンストラクタで
      <function>exit</function> が呼び出された場合、
      オブジェクトのデストラクタはコールされなくなりました。
      これは、コンストラクタが例外を投げたときの振る舞いと一致します。
     </para>
    </listitem>
    <listitem>
     <para>
      名前空間に含まれる名前には、
      ホワイトスペースを含めることができなくなりました。
      つまり、<code>Foo\Bar</code> は名前空間の名前として認識されますが
      <code>Foo \ Bar</code> は認識されなくなったということです。
      逆に、予約語のキーワードは名前空間の一部として許されるようになりました。
      これによって、コードの解釈が変わるかもしれません。
      <code>new\x</code> は <code>constant('new\x')</code> と同じですが、
      <code>new \x()</code> とは異なります。
      <!-- RFC: https://wiki.php.net/rfc/namespaced_names_as_token -->
     </para>
    </listitem>
    <listitem>
     <para>
      三項演算子をネストする場合、明示的に括弧が必要になりました。
      <!-- RFC: https://wiki.php.net/rfc/ternary_associativity -->
     </para>
    </listitem>
    <listitem>
     <para>
      <function>debug_backtrace</function> と
      <methodname>Exception::getTrace</methodname> メソッド
      は、引数にリファレンスを取らなくなりました。
      これにより、バックトレースを通じて、関数の引数を変更できなくなります。
     </para>
    </listitem>
    <listitem>
     <para>
      数値形式の文字列の扱いが、より直感的で間違いにくいものに変更されました。
      ホワイトスペースが前に付いている場合の扱いと一貫性を持たせるため、
      数値形式の文字列の後にホワイトスペースを付けることが許されるようになりました。
      これがもっとも影響するのは以下です:
     </para>
     <para>
      <simplelist>
       <member><function>is_numeric</function> 関数</member>
       <member>文字列同士の比較</member>
       <member>型宣言</member>
       <member>インクリメントとデクリメント演算</member>
      </simplelist>
     </para>
     <para>
      "数値が始めに来る文字列" の概念は殆どなくなっています;
      このケースは、移行を容易にするために存在しています。

      "A non well-formed numeric value encountered" という
      <constant>E_NOTICE</constant> が発生する文字列
      は、"A non-numeric value encountered" という
      <constant>E_WARNING</constant> が発生するようになっています。
      そして、"A non-numeric value encountered" という
      <constant>E_WARNING</constant> が発生していた全ての文字列は、
      <classname>TypeError</classname> が発生するようになりました。

      これが最も影響するのは、以下の場合です:
     </para>
     <para>
      <simplelist>
       <member>代数演算</member>
       <member>ビット演算</member>
      </simplelist>
     </para>
     <para>
      この <constant>E_WARNING</constant> から
      <classname>TypeError</classname> への変更は、
      不正な文字列オフセットの場合に発生する
      "Illegal string offset 'string'" という <constant>E_WARNING</constant>
      にも影響します。
      文字列から int/float に明示的にキャストする場合の振る舞いは変更されていません
      <!-- RFC: https://wiki.php.net/rfc/saner-numeric-strings -->
     </para>
    </listitem>
    <listitem>
     <para>
      マジックメソッドは引数と戻り値の型を持ち、
      宣言された場合はチェックが行われるようになりました。
      シグネチャは次の一覧と一致させるべきです:
     </para>
     <para>
      <simplelist>
       <member><code>__call(string $name, array $arguments): mixed</code></member>
       <member><code>__callStatic(string $name, array $arguments): mixed</code></member>
       <member><code>__clone(): void</code></member>
       <member><code>__debugInfo(): ?array</code></member>
       <member><code>__get(string $name): mixed</code></member>
       <member><code>__invoke(mixed $arguments): mixed</code></member>
       <member><code>__isset(string $name): bool</code></member>
       <member><code>__serialize(): array</code></member>
       <member><code>__set(string $name, mixed $value): void</code></member>
       <member><code>__set_state(array $properties): object</code></member>
       <member><code>__sleep(): array</code></member>
       <member><code>__unserialize(array $data): void</code></member>
       <member><code>__unset(string $name): void</code></member>
       <member><code>__wakeup(): void</code></member>
      </simplelist>
      <!-- RFC: https://wiki.php.net/rfc/magic-methods-signature -->
     </para>
    </listitem>
    <listitem>
     <para>
      <function>call_user_func_array</function> 関数に渡される
      配列のキーは、引数名として解釈されるようになりました。
      これより前のバージョンでは、静かに無視されていました。
     </para>
    </listitem>
    <listitem>
     <para>
      名前空間の内部で <literal>assert()</literal> と呼ばれる関数を宣言する
      ことは許されなくなり、
      <constant>E_COMPILE_ERROR</constant> が発生するようになりました。
      <function>assert</function> 関数は
      PHP エンジンによって特別扱いを受けることになっているので、
      名前空間の内部で同じ名前が定義されていると、
      動作が一貫しなくなる原因になるからです。
     </para>
    </listitem>
   </itemizedlist>
  </sect3>
 </sect2>

 <sect2 xml:id="migration80.incompatible.resource2object">
  <title>リソースからオブジェクトへの移行</title>

  <para>
   いくつかの &resource; が、&object; に移行しました。
   <function>is_resource</function> 関数を使って戻り値をチェックしているコードは、
   &false; を返すことをチェックするコードに置き換えるべきです。
  </para>
  <itemizedlist>
    <listitem>
     <para>
      <function>curl_init</function> 関数は
      &resource; ではなく、<classname>CurlHandle</classname>
      オブジェクトを返すようになりました。
      <function>curl_close</function> 関数はもはや意味をなしません。
      <classname>CurlHandle</classname> インスタンスは、
      参照されなくなった場合に、自動的に破棄されます。
     </para>
    </listitem>
    <listitem>
     <para>
      <function>curl_multi_init</function> 関数は
      &resource; ではなく、<classname>CurlMultiHandle</classname>
      オブジェクトを返すようになりました。
      <function>curl_multi_close</function> 関数はもはや意味をなしません。
      <classname>CurlMultiHandle</classname> インスタンスは、
      参照されなくなった場合に、自動的に破棄されます。
     </para>
    </listitem>
    <listitem>
     <para>
      <function>curl_share_init</function> 関数は
      &resource; ではなく、<classname>CurlShareHandle</classname>
      オブジェクトを返すようになりました。
      <function>curl_share_close</function> 関数はもはや意味をなしません。
      <classname>CurlShareHandle</classname> インスタンスは、
      参照されなくなった場合に、自動的に破棄されます。
     </para>
    </listitem>
   <listitem>
    <para>
     <function>enchant_broker_init</function> 関数は
     &resource; ではなく、<classname>EnchantBroker</classname>
     オブジェクトを返すようになりました。
    </para>
   </listitem>
   <listitem>
    <para>
     <function>enchant_broker_request_dict</function> と
     <function>enchant_broker_request_pwl_dict</function> 関数は
     &resource; ではなく、<classname>EnchantDictionary</classname> 
     オブジェクトを返すようになりました。
    </para>
   </listitem>
   <listitem>
    <para>
     GD 拡張機能は 画像の基本的なデータ構造として
     &resource; ではなく、<classname>GdImage</classname> 
     オブジェクトを使うようになりました。
     <function>imagedestroy</function> 関数はもはや意味をなしません。
     <classname>GdImage</classname> インスタンスは、
     参照されなくなった場合に、自動的に破棄されます。
    </para>
   </listitem>
   <listitem>
    <para>
     <function>openssl_x509_read</function> と
     <function>openssl_csr_sign</function> 関数は
     &resource; ではなく、<classname>OpenSSLCertificate</classname> 
     オブジェクトを返すようになりました。
     <function>openssl_x509_free</function> 関数は非推奨となり、
     もはや意味をなしません。
     <classname>OpenSSLCertificate</classname> インスタンスは、
     参照されなくなった場合に、自動的に破棄されます。
    </para>
   </listitem>
   <listitem>
    <para>
     <function>openssl_csr_new</function> 関数は
     &resource; ではなく、<classname>OpenSSLCertificateSigningRequest</classname> 
     オブジェクトを返すようになりました。
    </para>
   </listitem>
   <listitem>
    <para>
     <function>openssl_pkey_new</function> 関数は
     &resource; ではなく、<classname>OpenSSLAsymmetricKey</classname> 
     オブジェクトを返すようになりました。
     <function>openssl_pkey_free</function> 関数は非推奨となり、
     もはや意味をなしません。
     <classname>OpenSSLAsymmetricKey</classname> インスタンスは、
     参照されなくなった場合に、自動的に破棄されます。
    </para>
   </listitem>
   <listitem>
     <para>
      <function>shmop_open</function> 関数は
      &resource; ではなく、<classname>Shmop</classname> 
      オブジェクトを返すようになりました。
      <function>shmop_close</function> 関数は非推奨となり、
      もはや意味をなしません。
      <classname>Shmop</classname> インスタンスは、
      参照されなくなった場合に、自動的に破棄されます。
     </para>
    </listitem>
   <listitem>
    <para>
     <function>socket_create</function>, <function>socket_create_listen</function>,
     <function>socket_accept</function>, <function>socket_import_stream</function>,
     <function>socket_addrinfo_connect</function>, <function>socket_addrinfo_bind</function>,
     <function>socket_wsaprotocol_info_import</function> 関数は
     &resource; ではなく、<classname>Socket</classname> 
     オブジェクトを返すようになりました。
     <function>socket_addrinfo_lookup</function> 関数は
     &resource; ではなく、<classname>AddressInfo</classname> 
     オブジェクトを返すようになりました。
    </para>
   </listitem>
   <listitem>
    <para>
     <function>msg_get_queue</function> 関数は
     &resource; ではなく、<classname>SysvMessageQueue</classname> 
     オブジェクトを返すようになりました。
    </para>
   </listitem>
   <listitem>
    <para>
     <function>sem_get</function> 関数は
     &resource; ではなく、<classname>SysvSemaphore</classname> 
     オブジェクトを返すようになりました。
    </para>
   </listitem>
   <listitem>
    <para>
     <function>shm_attach</function> 関数は
     &resource; ではなく、<classname>SysvSharedMemory</classname> 
     オブジェクトを返すようになりました。
    </para>
   </listitem>
   <listitem>
    <para>
     <function>xml_parser_create</function> と
     <function>xml_parser_create_ns</function> 関数は
     &resource; ではなく、<classname>XMLParser</classname> 
     オブジェクトを返すようになりました。
     <function>xml_parser_free</function> 関数はもはや意味をなしません。
     XMLParser インスタンスは、
     参照されなくなった場合に、自動的に破棄されます。
    </para>
   </listitem>
   <listitem>
    <para>
     <link linkend="book.xmlwriter">XMLWriter 関数</link> は
     &resource; ではなく、<classname>XMLWriter</classname>
     オブジェクトを受け入れ、返すようになりました。
    </para>
   </listitem>
   <listitem>
    <para>
     <function>inflate_init</function> 関数は
     &resource; ではなく、<classname>InflateContext</classname> 
     オブジェクトを返すようになりました。
    </para>
   </listitem>
   <listitem>
    <para>
     <function>deflate_init</function> 関数は
     &resource; ではなく、<classname>DeflateContext</classname> 
     オブジェクトを返すようになりました。
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.com">
  <title>COM および .Net (Windows)</title>

  <para>
   タイプライブラリ から
   大文字小文字を区別せずに定数をインポートする機能は削除されました。
   <function>com_load_typelib</function> 関数の第二引数は
   もはや &false; ではありません。
   <link linkend="ini.com.autoregister-casesensitive">com.autoregister_casesensitive</link> はもはや無効ではなくなりました。
   つまり、<link linkend="ini.com.typelib-file">com.typelib_file</link>
   の #case_insensitive マーカーは無視されます。
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.curl">
  <title>CURL</title>

  <para>
   <constant>CURLOPT_POSTFIELDS</constant> は、
   オブジェクトを配列として受け入れなくなりました。
   オブジェクトを配列として解釈させるためには、
   明示的に <code>(array)</code> キャストを行って下さい。
   配列を受け入れる他のオプションにも、同じことが当てはまります。
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.datetime">
  <title>日付と時刻</title>

  <para>
   <function>mktime</function> と
   <function>gmmktime</function> 関数は
   少なくともひとつ引数が必要になりました。
   現在のタイムスタンプを取得する用途には
   <function>time</function> 関数が使えます。
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.dom">
  <title>DOM</title>

  <para>
   DOM 拡張機能で実装されておらず、振る舞いも持たず、
   テストデータもないクラスが削除されました。
   これらのクラスは、最新のDOM標準からも削除されています:
  </para>
  <para>
   <simplelist>
    <member>DOMNameList</member>
    <member>DomImplementationList</member>
    <member>DOMConfiguration</member>
    <member>DomError</member>
    <member>DomErrorHandler</member>
    <member>DOMImplementationSource</member>
    <member>DOMLocator</member>
    <member>DOMUserDataHandler</member>
    <member>DOMTypeInfo</member>
   </simplelist>
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.enchant">
  <title>Enchant</title>

  <itemizedlist>
   <listitem>
    <para>
     <function>enchant_broker_list_dicts</function>,
     <function>enchant_broker_describe</function>,
     <function>enchant_dict_suggest</function> 関数は、
     &null; ではなく、空の配列を返すようになりました。
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.exif">
  <title>Exif</title>

  <para>
   <function>read_exif_data</function> 関数は削除されました。
   <function>exif_read_data</function> 関数を代わりに使うべきです。
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.filter">
  <title>フィルタ</title>

  <itemizedlist>
   <listitem>
    <para>
     <constant>FILTER_VALIDATE_URL</constant>  フラグのための定数
     <constant>FILTER_FLAG_SCHEME_REQUIRED</constant> と
     <constant>FILTER_FLAG_HOST_REQUIRED</constant> が削除されました。
     <literal>scheme</literal>
     と <literal>host</literal> は（かつてもそうでしたが) 常に必須です。
    </para>
   </listitem>
   <listitem>
    <para>
     <function>filter_input</function> 関数などで使われている定数
     <constant>INPUT_REQUEST</constant> と <constant>INPUT_SESSION</constant>
     は削除されました。
     これらは実装されたことがなく、使うと常に警告が発生していました。
    </para> 
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.gd">
  <title>GD</title>

  <itemizedlist>
   <listitem>
    <para>
     推奨されなくなっていた <function>image2wbmp</function> 関数は削除されました。 
     <!-- RFC: https://wiki.php.net/rfc/image2wbmp -->
    </para>
   </listitem>
   <listitem>
    <para>
     推奨されなくなっていた関数
     <function>png2wbmp</function> と <function>jpeg2wbmp</function>
     が削除されました。
     <!-- RFC: https://wiki.php.net/rfc/deprecate-png-jpeg-2wbmp -->
    </para>
   </listitem>
   <listitem>
    <para>
     <function>imagecropauto</function> 関数の
     <parameter>mode</parameter> 引数のデフォルトは
     <literal>-1</literal> ではなくなりました。
     <constant>IMG_CROP_DEFAULT</constant> を代わりに使うべきです。
    </para>
   </listitem>
   <listitem>
    <para>
     Windows では、<filename>php_gd2.dll</filename> の名前が、<filename>php_gd.dll</filename> に変更されました。
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.gmp">
  <title>GMP</title>

  <para>
   <function>gmp_random</function> 関数は削除されました。
   <function>gmp_random_range</function> や
   <function>gmp_random_bits</function> 関数を代わりに使うべきです。
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.iconv">
  <title>Iconv</title>

  <para>
   エラーが発生した時に
   <varname>errno</varname> を適切に設定していなかった
   iconv の実装はもはやサポートされなくなりました。
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.imap">
  <title>IMAP</title>

  <itemizedlist>
   <listitem>
    <para>
     <function>imap_headerinfo</function> 関数で
     未使用になっていた <parameter>default_host</parameter> 引数が削除されました。
    </para>
   </listitem>
   <listitem>
    <para>
     <function>imap_headerinfo</function> 関数のエイリアスだった
     <function>imap_header</function> 関数は削除されました。
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.intl">
  <title>国際化関数</title>

  <itemizedlist>
   <listitem>
    <para>
     推奨されなくなっていた定数
     <constant>INTL_IDNA_VARIANT_2003</constant> が削除されました。
     <!-- RFC: https://wiki.php.net/rfc/deprecate-and-remove-intl_idna_variant_2003 -->
    </para>
   </listitem>
   <listitem>
   <para>
    推奨されなくなっていた定数
    <constant>Normalizer::NONE</constant> が削除されました。
   </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.ldap">
  <title>LDAP</title>

  <itemizedlist>
   <listitem>
   <para>
    推奨されなくなっていた関数
    <function>ldap_sort</function>,
    <function>ldap_control_paged_result</function>,
    <function>ldap_control_paged_result_response</function> は削除されました。
   </para>
  </listitem>
  <listitem>
   <para>
    <function>ldap_set_rebind_proc</function> のインターフェイスが変更されました。
    <parameter>callback</parameter> 引数は空文字列を受け入れなくなりました。
    &null; を代わりに使うべきです。
   </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.mbstring">
  <title>マルチバイト文字列</title>

  <itemizedlist>
   <listitem>
    <para>
     INI ディレクティブ
     <link linkend="ini.mbstring.func-overload">mbstring.func_overload</link>
     は削除されました。
     関連する定数
     <constant>MB_OVERLOAD_MAIL</constant>,
     <constant>MB_OVERLOAD_STRING</constant>,
     <constant>MB_OVERLOAD_REGEX</constant> も削除されています。
     <function>mb_get_info</function> 関数の
     <literal>"func_overload"</literal> と
     <literal>"func_overload_list"</literal> エントリも削除されています。
    </para>
   </listitem>
   <listitem>
    <para>
     <function>mb_parse_str</function> は、
     結果の配列を指定しないと使えなくなりました。
    </para>
   </listitem>
   <listitem>
    <para>
     たくさんの mbregex の関数エイリアスが削除されました。
     どの関数を代わりに使うべきなのかは、以下の一覧を参照して下さい:
    </para>
    <para>
     <simplelist>
      <member><function>mbregex_encoding</function> → <function>mb_regex_encoding</function></member>
      <member><function>mbereg</function> → <function>mb_ereg</function></member>
      <member><function>mberegi</function> → <function>mb_eregi</function></member>
      <member><function>mbereg_replace</function> → <function>mb_ereg_replace</function></member>
      <member><function>mberegi_replace</function> → <function>mb_eregi_replace</function></member>
      <member><function>mbsplit</function> → <function>mb_split</function></member>
      <member><function>mbereg_match</function> → <function>mb_ereg_match</function></member>
      <member><function>mbereg_search</function> → <function>mb_ereg_search</function></member>
      <member><function>mbereg_search_pos</function> → <function>mb_ereg_search_pos</function></member>
      <member><function>mbereg_search_regs</function> → <function>mb_ereg_search_regs</function></member>
      <member><function>mbereg_search_init</function> → <function>mb_ereg_search_init</function></member>
      <member><function>mbereg_search_getregs</function> → <function>mb_ereg_search_getregs</function></member>
      <member><function>mbereg_search_getpos</function> → <function>mb_ereg_search_getpos</function></member>
      <member><function>mbereg_search_setpos</function> → <function>mb_ereg_search_setpos</function></member>
     </simplelist>
    </para>
   </listitem>
   <listitem>
    <para>
     <function>mb_ereg_replace</function> 関数の
     <literal>e</literal> 修正子が削除されました。
     <function>mb_ereg_replace_callback</function> 関数を代わりに使って下さい。
    </para>
   </listitem>
   <listitem>
    <para>
     <function>mb_ereg_replace</function> 関数に文字列でないパターン引数を渡すと、
     ASCII コードポイントではなく、文字列として解釈されるようになりました。
     以前のバージョンの振る舞いは、
     明示的に <function>chr</function> 関数を呼び出すことで復元できます。
    </para>
   </listitem>
   <listitem>
    <para>
     <function>mb_strpos</function>,
     <function>mb_strrpos</function>, <function>mb_stripos</function>,
     <function>mb_strripos</function>, <function>mb_strstr</function>,
     <function>mb_stristr</function>, <function>mb_strrchr</function>,
     <function>mb_strrichr</function> 関数の
     <parameter>needle</parameter> 引数は、空に出来るようになりました。
    </para>
   </listitem>
   <listitem>
    <para>
     <function>mb_decode_numericentity</function>
     関数で内部的に使われていなかった
     引数 <parameter>is_hex</parameter> は削除されました。
    </para>
   </listitem>
   <listitem>
    <para>
     <function>mb_strrpos</function> 関数の第三引数に、
     オフセットではなくエンコーディングを渡していた古い振る舞いは削除されました。
     明示的にオフセットに
     <literal>0</literal> を渡し、
     第四引数にエンコーディングを渡す方法を代わりに使うべきです。
    </para>
   </listitem>
   <listitem>
    <para>
     文字エンコーディング <literal>ISO_8859-*</literal> のエイリアスは
     <literal>ISO8859-*</literal> に置き換えられました。
     これは、iconv 拡張機能と相互運用性を向上させるためです。
     アンダースコア付きの mbregex の ISO 8859 aliases
     (<literal>ISO_8859_*</literal> と <literal>ISO8859_*</literal>)
     も削除されています。
    </para>
   </listitem>
   <listitem>
    <para>
     <function>mb_ereg</function> と
     <function>mb_eregi</function> 関数は、
     マッチに成功した場合に &true;  を返すようになりました。
     これより前のバージョンでは、
     <parameter>matches</parameter> が渡されなかった場合に
     整数 <literal>1</literal> が返されていました。
     <parameter>matches</parameter> が渡された場合には
     <code>max(1, strlen($matches[0]))</code> が返されていました。
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.oci8">
  <title>OCI8</title>

  <itemizedlist>
   <listitem>
    <para>
     <classname>OCI-Lob</classname> クラスは
     <classname>OCILob</classname> と呼ばれるようになり、
     <classname>OCI-Collection</classname> クラスは
     <classname>OCICollection</classname> と呼ばれるようになりました。
     これは、PHP 8 の arginfo 型アノテーションツールの
     名前に関する規約で強制されたものです。
    </para>
   </listitem>
   <listitem>
    <para>
     いくつかの関数エイリアスが推奨されなくなりました。
    </para>
   </listitem>
   <listitem>
    <para>
     <function>oci_internal_debug</function> 関数と
     そのエイリアス <function>ociinternaldebug</function> は削除されました。
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.odbc">
  <title>ODBC</title>

  <itemizedlist>
   <listitem>
    <para>
     <function>odbc_connect</function> 関数は
     接続を使い回さなくなりました。
    </para>
   </listitem>
   <listitem>
    <para>
     <function>odbc_exec</function> 関数で使われていなかった
     <parameter>flags</parameter> 引数が削除されました。
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.openssl">
  <title>OpenSSL</title>

  <itemizedlist>
   <listitem>
    <para>
     <function>openssl_seal</function> と
     <function>openssl_open</function> 関数には
     <parameter>method</parameter> を渡すことが必須になりました。
     なぜなら、以前のデフォルト値 <literal>"RC4"</literal>
     はセキュアでないと見なされているからです。
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.pcre">
  <title>正規表現 (Perl互換)</title>

  <para>
   不正なエスケープシーケンスを渡した場合、
   もはやリテラルと解釈されなくなりました。
   リテラルと解釈する振る舞いは <literal>X</literal> 修正子で必須でしたが、
   無視されるようになっています。
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.pdo">
  <title>PHP Data Objects</title>

  <itemizedlist>
   <listitem>
    <para>
     デフォルトのエラーハンドリングのモードが
     "silent" から "exceptions" に変更されました。
     詳細は <link linkend="pdo.error-handling">Errors とエラーハンドリング</link> を参照して下さい。
     <!-- RFC: https://wiki.php.net/rfc/pdo_default_errmode -->
    </para>
   </listitem>
   <listitem>
    <para>
     いくつかの PDOクラスのメソッドシグネチャが変更されました:
    </para>
    <para>
     <simplelist>
      <member><code>PDO::query(string $query, ?int $fetchMode  = null, mixed  ...$fetchModeArgs)</code></member>
      <member><code>PDOStatement::setFetchMode(int $mode, mixed ...$args)</code></member>
     </simplelist>
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.pdo-odbc">
  <title>PDO ODBC</title>

  <para>
   &php.ini; ディレクティブ
   <link linkend="ini.pdo-odbc.db2-instance-name">pdo_odbc.db2_instance_name</link> は削除されました。
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.pdo-mysql">
  <title>PDO MySQL</title>

  <para>
   <methodname>PDO::inTransaction</methodname> は、
   PDO が管理しているおおよその情報ではなく、
   実際のトランザクションの状態を報告するようになりました。
   クエリが "暗黙のコミット" に依存していた場合、
   <methodname>PDO::inTransaction</methodname> は後に &false; を返します。
   なぜなら、トランザクションが既にアクティブではないからです。
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.pgsql">
  <title>PostgreSQL</title>

  <itemizedlist>
   <listitem>
    <para>
     <function>pg_connect</function> 関数で
     推奨されなくなっていた、
     接続文字列の代わりに複数の引数を受け入れる文法は
     もはやサポートされなくなりました。
    </para>
   </listitem>
   <listitem>
    <para>
     推奨されなくなっていた
     <function>pg_lo_import</function> と
     <function>pg_lo_export</function> 関数の、
     最後の引数で接続を渡すシグネチャはサポートされなくなりました。
     代わりに、接続は最初の引数で渡すべきです。
    </para>
   </listitem>
   <listitem>
    <para>
     <function>pg_fetch_all</function> 関数
     は 結果セットの行が0行の場合に、&false; ではなく空の配列を返すようになりました。
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.phar">
  <title>Phar</title>

  <para>
   phar に関連付けられたメタデータは、自動的にアンシリアライズされなくなりました。
   これは、オブジェクトのインスタンス化やオートローディングなどに起因する、
   潜在的なセキュリティ上の脆弱性を修正するためです。
   <!-- RFC: https://wiki.php.net/rfc/phar_stop_autoloading_metadata -->
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.reflection">
  <title>リフレクション</title>

  <itemizedlist>
   <listitem>
    <para>
     メソッドシグネチャに関する変更
    </para>
    <para>
     <simplelist>
      <member><code>ReflectionClass::newInstance($args)</code></member>
      <member><code>ReflectionFunction::invoke($args)</code></member>
      <member><code>ReflectionMethod::invoke($object, $args)</code></member>
     </simplelist>
    </para>
    <para>
     は、以下のように変更されました:
    </para>
    <para>
     <simplelist>
      <member><code>ReflectionClass::newInstance(...$args)</code></member>
      <member><code>ReflectionFunction::invoke(...$args)</code></member>
      <member><code>ReflectionMethod::invoke($object, ...$args)</code></member>
     </simplelist>
    </para>
    <para>
     PHP 7 と PHP 8 の間で互換性を保たなければならないコードは、
     両方のバージョンで互換性を取るために、以下のようなシグネチャが使えます:
    </para>
    <para>
     <simplelist>
      <member><code>ReflectionClass::newInstance($arg = null, ...$args)</code></member>
      <member><code>ReflectionFunction::invoke($arg = null, ...$args)</code></member>
      <member><code>ReflectionMethod::invoke($object, $arg = null, ...$args)</code></member>
     </simplelist>
    </para>
   </listitem>
   <listitem>
    <para>
     <methodname>ReflectionType::__toString</methodname> メソッドは、
     完全な型のデバッグ用の文字列表現を返すようになり、非推奨ではなくなりました。
     特に、nullable な型に対しては、nullを代入できることを示す情報が含まれるようになります。
     返り値のフォーマットは安定しておらず、PHP のバージョンによって変わる可能性があります。
    </para>
   </listitem>
   <listitem>
    <para>
     リフレクションの export() メソッドは削除されました。
     代わりに、リフレクションオブジェクトを文字列にキャストすることができます。
    </para>
   </listitem>
   <listitem>
    <para>
     <methodname>ReflectionMethod::isConstructor</methodname> と
     <methodname>ReflectionMethod::isDestructor</methodname> メソッドは
     インターフェイスの
     <link linkend="object.construct">__construct()</link> と
     <link linkend="object.destruct">__destruct()</link> についても &true; を返すようになりました。
     これより前のバージョンでは、クラスとトレイトのメソッドに対してだけ &true; を返していました。
    </para>
   </listitem>
   <listitem>
    <para>
     <methodname>ReflectionType::isBuiltin</methodname> メソッドは、
     <classname>ReflectionNamedType</classname> クラスに移動しました。
     <classname>ReflectionUnionType</classname> クラスには存在しなくなっています。
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.sockets">
  <title>Sockets</title>

  <itemizedlist>
   <listitem>
    <para>
     推奨されなくなっていた
     <function>socket_addrinfo_lookup</function> 関数の
     <parameter>flags</parameter> に指定する
     <constant>AI_IDN_ALLOW_UNASSIGNED</constant> および
     <constant>AI_IDN_USE_STD3_ASCII_RULES</constant> は削除されました。
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.spl">
  <title>Standard PHP Library (SPL)</title>

  <itemizedlist>
   <listitem>
    <para>
     <methodname>SplFileObject::fgetss</methodname> メソッドは削除されました。
    </para>
   </listitem>
   <listitem>
    <para>
     <methodname>SplFileObject::seek</methodname> は、
     常に行の先頭にシークするようになりました。
     これより前のバージョンでは、
     <literal>=1</literal> を position に指定すると、次の行の先頭を探していました。
    </para>
   </listitem>
   <listitem>
    <para>
     <methodname>SplHeap::compare</methodname> 
     はメソッドシグネチャを指定するようになりました。
     このメソッドを実装する継承先のクラスは、
     互換性のあるメソッドシグネチャを持たなければなりません。
    </para>
   </listitem>
   <listitem>
    <para>
     <methodname>SplDoublyLinkedList::push</methodname>,
     <methodname>SplDoublyLinkedList::unshift</methodname> および
     <methodname>SplQueue::enqueue</methodname> は、&true; ではなく
     <type>void</type> を返すようになりました。
    </para>
   </listitem>
   <listitem>
    <para>
     <function>spl_autoload_register</function> 関数は、
     引数が不正な場合には常に <classname>TypeError</classname> を発生させるようになりました。
     よって、2番目の引数 <parameter>do_throw</parameter> は無視され、
     &false; を設定すると、警告が発生します。
    </para>
   </listitem>
   <listitem>
    <para>
     <classname>SplFixedArray</classname> クラスは
     <interfacename>Iterator</interfacename> ではなく
     <interfacename>IteratorAggregate</interfacename> を実装しました。

     <methodname>SplFixedArray::rewind</methodname>,
     <methodname>SplFixedArray::current</methodname>,
     <methodname>SplFixedArray::key</methodname>,
     <methodname>SplFixedArray::next</methodname>,
     <methodname>SplFixedArray::valid</methodname> は削除されました。

     代替として、<methodname>SplFixedArray::getIterator</methodname>
     が追加されました。

     SplFixedArray を通じて明示的にイテレーションを行うあらゆるコードは、
     <methodname>SplFixedArray::getIterator</methodname> メソッドを使い
     <interfacename>Iterator</interfacename> を取得しなければなりません。

     これは、<classname>SplFixedArray</classname>
     がネストされたループ中で安全に使えるようになったということです。
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.standard">
  <title>標準ライブラリ</title>

  <itemizedlist>
   <listitem>
    <para>
     <function>assert</function> 関数は
     文字列の引数を評価しなくなりました。
     代わりに、他の引数と同じように扱われます。
     <code>assert('$a == $b')</code> ではなく
     <code>assert($a == $b)</code> を使うべきです。

     INI ディレクティブ <link
     linkend="ini.assert.quiet-eval">assert.quiet_eval</link> と
     定数 <constant>ASSERT_QUIET_EVAL</constant> も削除されました。
     なぜなら、もはや何の効果も無いからです。
    </para>
   </listitem>
   <listitem>
    <para>
     <function>parse_str</function> は、
     結果の配列を指定しなければ使えなくなりました。
    </para>
   </listitem>
   <listitem>
    <para>
     <link linkend="filters.string.strip_tags">string.strip_tags</link> フィルタは削除されました。
    </para>
   </listitem>
   <listitem>
    <para>
     <function>strpos</function>,
     <function>strrpos</function>,
     <function>stripos</function>,
     <function>strripos</function>,
     <function>strstr</function>,
     <function>strchr</function>,
     <function>strrchr</function>,
     <function>stristr</function> 関数の
     <parameter>needle</parameter>
     引数は常に文字列として解釈されるようになりました。
     これより前のバージョンでは、
     文字列でない引数は ASCII コードポイントと解釈されていました。
     <function>chr</function> 関数を明示的に呼ぶことで、
     以前の振る舞いを復元できます。
    </para>
   </listitem>
   <listitem>
    <para>
     <function>strpos</function>,
     <function>strrpos</function>,
     <function>stripos</function>,
     <function>strripos</function>,
     <function>strstr</function>,
     <function>stristr</function>,
     <function>strrchr</function> 関数の
     <parameter>needle</parameter> 引数は、空に出来るようになりました。
    </para>
   </listitem>
   <listitem>
    <para>
     <function>substr</function>,
     <function>substr_count</function>,
     <function>substr_compare</function>,
     <function>iconv_substr</function> 関数の
     <parameter>length</parameter> 引数は &null; も指定できるようになりました。
     &null; を指定した場合、
     length 引数が指定されなかったことと同じように振る舞います。
     よって、この場合、空文字列ではなく、残りの文字列を返します。
    </para>
   </listitem>
   <listitem>
    <para>
     <function>array_splice</function> 関数の
     <parameter>length</parameter> 引数は &null; も指定できるようになりました。
     &null; を指定した場合、引数を省略した場合と同じ振る舞いをします。
     よって、<parameter>offset</parameter>
     から配列の最後までの全ての要素を削除する動きになります。
    </para>
   </listitem>
   <listitem>
    <para>
     <function>vsprintf</function>,
     <function>vfprintf</function>,
     <function>vprintf</function> 関数の
     <parameter>args</parameter> 引数は、配列であることが必須になりました。
     これより前のバージョンでは、あらゆる型の値を受け入れていました。
    </para>
   </listitem>
   <listitem>
    <para>
     <function>password_hash</function> 関数の
     <literal>'salt'</literal> オプションはサポートされなくなりました。
     <literal>'salt'</literal> オプションを使うと警告が生成され、
     指定された salt は無視されます。
     そして生成された salt が代わりに使われます。
    </para>
   </listitem>
   <listitem>
    <para>
     <function>quotemeta</function> 関数は、空文字列を渡すと空文字列を返すようになりました。
     これより前のバージョンでは、&false; を返していました。
    </para>
   </listitem>
   <listitem>
    <para>
     以下の関数は削除されました:
    </para>
    <para>
     <simplelist>
      <member><function>hebrevc</function></member>
      <member><function>convert_cyr_string</function></member>
      <member><function>money_format</function></member>
      <member><function>ezmlm_hash</function></member>
      <member><function>restore_include_path</function></member>
      <member><function>get_magic_quotes_gpc</function></member>
      <member><function>get_magic_quotes_runtime</function></member>
      <member><function>fgetss</function></member>
     </simplelist>
    </para>
   </listitem>
   <listitem>
    <para>
     定数 <constant>FILTER_SANITIZE_MAGIC_QUOTES</constant> は削除されました。
    </para>
   </listitem>
   <listitem>
    <para>
    <code>($pieces,
     $glue)</code> のような形で、<function>implode</function>
     関数を逆の引数の順番で呼ぶことはサポートされなくなりました。
    </para>
   </listitem>
   <listitem>
    <para>
     <function>parse_url</function> 関数は、
    query および fragment が存在しないことと、空であることを区別するようになりました:
    </para>
    <para>
     <simplelist>
      <member><code>http://example.com/foo → query = null, fragment = null</code></member>
      <member><code>http://example.com/foo? → query = "",   fragment = null</code></member>
      <member><code>http://example.com/foo# → query = null, fragment = ""</code></member>
      <member><code>http://example.com/foo?# → query = "",   fragment = ""</code></member>
     </simplelist>
      これより前のバージョンでは、上の全ての場合で、query と fragment の値が &null; になっていました。
    </para>
   </listitem>
   <listitem>
    <para>
     <function>var_dump</function> と
     <function>debug_zval_dump</function> 関数は
     INIディレクティブ <link linkend="ini.precision">precision</link>
     ではなく
     <link linkend="ini.serialize-precision">serialize_precision</link>
     を使って浮動小数点を印字するようになりました。
     デフォルトの設定では、浮動小数点はこのデバッグ関数によって
     全精度で印字されるようになるということです。
    </para>
   </listitem>
   <listitem>
    <para>
     <link linkend="object.sleep">__sleep()</link> が返す
     配列に存在しないプロパティが含まれていた場合、
     静かに無視されるようになりました。
     これより前のバージョンでは、
     そうしたプロパティは値 &null; を持つかのようにシリアライズされていました。 
    </para>
   </listitem>
   <listitem>
    <para>
     デフォルトの起動時のロケールは、常に
     <literal>"C"</literal> になりました。
     デフォルトでは、どのロケールからも環境を継承しません。
     これより前のバージョンでは、
     <constant>LC_ALL</constant> は
     <literal>"C"</literal> に設定されていましたが、
     <constant>LC_CTYPE</constant> は環境から情報を継承していました。
     しかしながら、関数によっては、明示的に
     <function>setlocale</function> を呼び出さないと
     継承した環境を尊重しないものもあります。
     ロケールをデフォルトから変えるためには、
     <function>setlocale</function> 関数を明示的に呼ぶことが常に必須になりました。
    </para>
   </listitem>
   <listitem>
    <para>
     非推奨になっていた
     <function>crypt</function> 関数が
     DES にフォールバックする振る舞いが削除されました。
     不明な salt フォーマットを <function>crypt</function> 関数に渡すと、
     弱い DES ハッシュにフォールバックするのではなく、
     <literal>*0</literal> という値になり、失敗するようになります。
    </para>
   </listitem>
   <listitem>
    <para>
     <function>crypt</function> 関数に、
     SHA256/SHA512 の範囲外の round を指定すると、
     最も近い境界値に切り詰めるのではなく、
     <literal>*0</literal> という値になり、失敗するようになりました。
     これは、glibc の振る舞いと一致します。
    </para>
   </listitem>
   <listitem>
    <para>
     配列に比較結果が等しい要素が含まれている場合、ソートを行う関数の結果が変わる可能性があります。
    </para>
   </listitem>
   <listitem>
    <para>
     コールバックを受け入れるあらゆる関数のうち、
     リファレンスの引数を受け入れるように明示的に指定して「いない」
     ものに対し、
     リファレンスを使ったコールバックを渡すと警告が発生するようになりました。
     例としては、
     <function>array_filter</function> や
     <function>array_reduce</function> 関数があります。
     これらでほとんどの関数の例を示していますが、全てではありません。
    </para>
   </listitem>
   <listitem>
    <para>
     <function>file_get_contents</function> 関数のように、
     関数が使うHTTPストリームラッパーは、
     デフォルトで HTTP/1.0 ではなく、
     HTTP/1.1 を指定するようになりました。
     これによって、クライアントの振る舞いが変わるわけではありませんが、
     サーバが異なるレスポンスを返す可能性があります。
     古い振る舞いをさせるには、
     以下のようにして <literal>'protocol_version'</literal>
     ストリームコンテキストオプションを設定して下さい。
    </para>
    <para>
     <programlisting role="php">
<![CDATA[
<?php
$ctx = stream_context_create(['http' => ['protocol_version' => '1.0']]);
echo file_get_contents('http://example.org', false, $ctx);
?>
]]>
     </programlisting>
    </para>
   </listitem>
   <listitem>
    <para>
     明示的に salt を指定せず
     <function>crypt</function> 関数を呼ぶことはサポートされなくなりました。
     自動的に生成される salt で強いハッシュを生成したい場合、
     代わりに <function>password_hash</function> を使って下さい。
    </para>
   </listitem>
   <listitem>
    <para>
    <function>substr</function>,
    <function>mb_substr</function>,
    <function>iconv_substr</function>,
    <function>grapheme_substr</function> 関数は、
    文字列の境界を越えたオフセットを一貫した形で処理するようになりました。
    これより前のバージョンでは、空文字列ではなく &false; を返す場合がありました。
    </para>
   </listitem>
   <listitem>
    <para>
     Windows では、
     シェルを使い、プログラムを実行する関数
     (<function>proc_open</function>, <function>exec</function>,
     <function>popen</function> など) は、
     一貫して <command>%comspec% /s
     /c "$commandline"</command> を使うようになりました。
     これは、(追加のクォート無しで) <command>$commandline</command> を実行することと同じです。
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.sysvsem">
  <title>Sysvsem</title>

  <itemizedlist>
   <listitem>
    <para>
     <function>sem_get</function> 関数の 
     <parameter>auto_release</parameter> 引数は、
     int ではなく bool の値を受け入れるように変更されました。
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.tidy">
  <title>Tidy</title>

  <itemizedlist>
   <listitem>
    <para>
     内部的に使われていなかった
     <parameter>use_include_path</parameter> 引数が、
     <function>tidy_repair_string</function> 関数から削除されました。
    </para>
   </listitem>
   <listitem>
    <para>
     <methodname>tidy::repairString</methodname>,
     <methodname>tidy::repairFile</methodname> が、静的メソッドになりました。
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.tokenizer">
  <title>Tokenizer</title>

  <itemizedlist>
   <listitem>
    <para>
     <literal>T_COMMENT</literal> トークンは最後の改行文字を含まなくなりました。
     改行文字はその後に続く
     <literal>T_WHITESPACE</literal> トークンに含まれるようになります。
     注意すべきなのは、
     <literal>T_COMMENT</literal> の後にホワイトスペースが続くとは限らないことです。
     <literal>T_CLOSE_TAG</literal> やファイルの終端が続く場合もありえます。
    </para>
   </listitem>
   <listitem>
    <para>
     名前空間の中にある名前は、
     <literal>T_NAME_QUALIFIED</literal>
     (<code>Foo\Bar</code>),
     <literal>T_NAME_FULLY_QUALIFIED</literal>
     (<code>\Foo\Bar</code>),
     <literal>T_NAME_RELATIVE</literal>
     (<code>namespace\Foo\Bar</code>) 
     トークンを使って表現されるようになりました。

     <literal>T_NS_SEPARATOR</literal> トークンは
     単独の名前空間の区切り文字としてだけ使われます。
     そして、グループ化されたuse宣言と一緒に使った場合にだけ文法的に合法です。
     <!-- RFC: https://wiki.php.net/rfc/namespaced_names_as_token -->
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.xmlreader">
  <title>XMLReader</title>

  <para>
   <methodname>XMLReader::open</methodname>,
   <methodname>XMLReader::xml</methodname> が 静的メソッドになりました。
   これらは、まだインスタンスメソッドとして呼び出すことが出来ますが、
   クラスを継承し、これらのメソッドをオーバーライドする場合は、
   それらは static として宣言する必要があります。
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.xmlrpc">
  <title>XML-RPC</title>

  <para>
   XML-RPC 拡張機能は PECL に移動し、PHPの一部として配布されなくなりました。
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.zip">
  <title>Zip</title>

  <para>
   <constant>ZipArchive::OPSYS_Z_CPM</constant> は削除されました(この名前は typo でした)。
   <constant>ZipArchive::OPSYS_CPM</constant> を代わりに使って下さい。
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.zlib">
  <title>Zlib</title>

  <itemizedlist>
   <listitem>
    <para>
     <function>gzgetss</function> 関数が削除されました。
    </para>
   </listitem>
   <listitem>
    <para>
     <link linkend="ini.zlib.output-compression">zlib.output_compression</link>
     は、<literal>Content-Type: image/*</literal> を自動的に無効にすることはなくなりました。
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.php-test-packs">
  <title>Windows の PHP Test Packs</title>

  <para>
   テストランナーの名前が、<filename>run-test.php</filename> から
   <filename>run-tests.php</filename> に変更されました。
   これは、php-src の名前に合わせるためです。
  </para>
 </sect2>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
