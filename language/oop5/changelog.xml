<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: c0fa5077c8862405942d8aac7360c5169558b59b Maintainer: takagi Status: ready -->
<!-- CREDITS: mumumu -->

<sect1 xml:id="language.oop5.changelog" xmlns="http://docbook.org/ns/docbook">
 <title>変更履歴</title>
 <para>
  PHP の OOP モデルの変更履歴をここに記録します。
  個々の機能の説明や注意点については、クラスとオブジェクトに関するドキュメントを参照ください。
 </para>
 <para>
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>8.4.0</entry>
      <entry>
       <link linkend="language.oop5.lazy-objects">レイジーオブジェクト</link>がサポートされました。
      </entry>
     </row>
     <row>
      <entry>8.1.0</entry>
      <entry>
       追加: クラスの定数に対して、<modifier>final</modifier> が指定できるようになりました。インターフェイスの定数も、デフォルトでオーバーライドできるようになりました。
      </entry>
     </row>
     <row>
      <entry>8.0.0</entry>
      <entry>
       追加: &null; になる可能性があるオブジェクトのメソッドやプロパティにアクセスする手段として、<link linkend="language.oop5.basic.nullsafe">nullsafe 演算子</link> <emphasis>?-&gt;</emphasis> をサポートしました。
      </entry>
     </row>
     <row>
      <entry>7.4.0</entry>
      <entry>
       変更: <function>__toString</function>
       から、例外をスローすることができるようになりました。
      </entry>
     </row>
     <row>
      <entry>7.4.0</entry>
      <entry>
       追加: 戻り値の型を制限する 共変性
       と、引数の型の 反変性 がサポートされました。
       完全な型の変位指定は、オートローディングが使われている場合のみ有効です。
       単一ファイル内では、型の参照が循環参照していない場合のみ可能です。
      </entry>
     </row>
     <row>
      <entry>7.4.0</entry>
      <entry>
       追加: クラスのプロパティは、型を宣言できるようになりました。
      </entry>
     </row>
     <row>
      <entry>7.3.0</entry>
      <entry>
       互換性のない変更:
       <classname>Traversable</classname> への引数のアンパックを &integer;
       でないキーで行うことはサポートされなくなりました。
       このような動作は意図されていなかったので、削除されました。
      </entry>
     </row>
     <row>
      <entry>7.3.0</entry>
      <entry>
       互換性のない変更:
       7.3.0 より前のバージョンでは、参照を代入することによって、
       static なプロパティが異なる値になる可能性がありました。
       この振る舞いは削除されました。
      </entry>
     </row>
     <row>
      <entry>7.3.0</entry>
      <entry>
       変更:
       <link linkend="language.operators.type">instanceof</link> 演算子が、
       最初のオペランドにリテラルを受け入れるようになりました。
       この場合、結果は常に FALSE を返します。
      </entry>
     </row>
     <row>
      <entry>7.2.0</entry>
      <entry>
       推奨されない変更:
       <function>__autoload</function> メソッドは非推奨になりました。
       <function>spl_autoload_register</function> を使うのが望ましいためです。
      </entry>
     </row>
     <row>
      <entry>7.2.0</entry>
      <entry>
       変更: 次の名前は、クラスや trait、
       インターフェイスの名前として使うことが禁止されます:
       <literal>object</literal>
      </entry>
     </row>
     <row>
      <entry>7.2.0</entry>
      <entry>
       変更:
       名前空間のグループ指定における最後のカンマが許可されるようになりました。
      </entry>
     </row>
     <row>
      <entry>7.2.0</entry>
      <entry>
       変更:
       パラメータの型の拡大変換が可能になりました。
       オーバーライドされたメソッドや、インターフェイスの実装の
       引数の型を省略できるようになりました。
      </entry>
     </row>
     <row>
      <entry>7.2.0</entry>
      <entry>
       変更:
       ある抽象クラスが別の抽象クラスを継承しているときに、 
       継承元クラスの抽象メソッドをオーバーライドできるようになりました。
      </entry>
     </row>
     <row>
      <entry>7.1.0</entry>
      <entry>
       変更:
       以下のキーワードが、
       クラスやインターフェイスやトレイトの名前として使えなくなりました:
       <literal>void</literal> と <literal>iterable</literal>
      </entry>
     </row>
     <row>
      <entry>7.1.0</entry>
      <entry>
       追加:
       <link
       linkend="language.oop5.visiblity-constants">クラス定数のアクセス範囲</link>
       を指定できるようになりました。
      </entry>
     </row>
     <row>
      <entry>7.0.0</entry>
      <entry>
       推奨されない変更:
       static 宣言されていないメソッドに対する
       <link linkend="language.oop5.static">static</link> 呼び出しが非推奨となりました。 
      </entry>
     </row>
     <row>
      <entry>7.0.0</entry>
      <entry>
       推奨されない変更:
       PHP 4 形式の
       <link linkend="language.oop5.decon">コンストラクタ</link>
       は非推奨になりました。
       つまり、クラスと同じ名前のメソッドがクラスに定義されていた場合です。
      </entry>
     </row>
     <row>
      <entry>7.0.0</entry>
      <entry>
       追加:
       <emphasis>use</emphasis> 宣言のグループ化:
       複数のクラスや関数そして定数を同じ namespace からインポートする際に、
       単一の use 文にまとめられるようになりました。
      </entry>
     </row>
     <row>
      <entry>7.0.0</entry>
      <entry>
       追加:
       <literal>new class</literal> 経由での
       <link linkend="language.oop5.anonymous">無名クラス</link>
       のサポートが追加されました。
      </entry>
     </row>
     <row>
      <entry>7.0.0</entry>
      <entry>
       互換性のない変更:
       <classname>Traversable</classname>
       ではない &object; の反復処理の挙動が、
       &array; を参照渡しで反復処理したときと同じようになりました。
      </entry>
     </row>
     <row>
      <entry>7.0.0</entry>
      <entry>
       変更:
       (互換性のある) プロパティを2つの
       <link linkend="language.oop5.traits">traits</link> で使っても
       エラーにならなくなりました。
      </entry>
     </row>
     <row>
      <entry>5.6.0</entry>
      <entry>
       追加: <link linkend="object.debuginfo">__debugInfo()</link> メソッド。
      </entry>
     </row>
     <row>
      <entry>5.5.0</entry>
      <entry>
       追加: <link linkend="language.oop5.basic.class.class">::class</link> マジック定数。
      </entry>
     </row>
     <row>
      <entry>5.5.0</entry>
      <entry>
       追加: 例外処理に <link linkend="language.exceptions">finally</link>。
      </entry>
     </row>
     <row>
      <entry>5.4.0</entry>
      <entry>
       追加: <link linkend="language.oop5.traits">トレイト</link> が追加されました。
      </entry>
     </row>
     <row>
      <entry>5.4.0</entry>
      <entry>
       変更: <link linkend="language.oop5.abstract">抽象</link>クラスで<link linkend="language.oop5.decon">
コンストラクタ</link>のシグネチャを定義している場合は、
       そのシグネチャに従うことが必須となりました。
      </entry>
     </row>
     <row>
      <entry>5.3.3</entry>
      <entry>
       変更: <link linkend="language.namespaces">名前空間</link>
       つきのクラス名の最後の部分と同じ名前のメソッドは、<link
       linkend="language.oop5.decon">コンストラクタ</link> とはみなされなくなりました。
       名前空間を使っていないクラスは今までと変わりません。
      </entry>
     </row>
     <row>
      <entry>5.3.0</entry>
      <entry>
       変更: プロトタイプでデフォルト値を指定したメソッドをもつインターフェイスを
       実装したクラスを作るときに、実装側でのデフォルト値を
       インターフェイスのデフォルト値と一致させなくてもよくなりました。
      </entry>
     </row>
     <row>
      <entry>5.3.0</entry>
      <entry>
       変更: 変数を使ってクラスを参照することができるようになりました
       (例: <literal>echo $classname::constant;</literal>)。
       この変数の値に、キーワード (<literal>self</literal> や
       <literal>parent</literal>、<literal>static</literal> など) を使うことはできません。
      </entry>
     </row>
     <row>
      <entry>5.3.0</entry>
      <entry>
       変更: <link linkend="language.oop5.overloading">オーバーロード</link> メソッドが
       <link linkend="language.oop5.static">static</link> 宣言されている場合に
       <constant>E_WARNING</constant> レベルのエラーが発生するようになりました。
       また、public 宣言することが必須となりました。
      </entry>
     </row>
     <row>
      <entry>5.3.0</entry>
      <entry>
       変更: 5.3.0 より前のバージョンでは、
       <function>__autoload</function> 関数の中で発生した例外を
       <link linkend="language.exceptions">catch</link> ブロックで捕捉することができず、
       致命的なエラーとなっていました。このバージョンからは __autoload
       関数内で発生した例外を <link linkend="language.exceptions">catch</link>
       ブロックで捕捉できるようになりましたが、ひとつ条件があります。
       独自の例外クラスをスローする場合は、その例外クラスが使用可能でなければなりません。
       __autoload 関数は、再帰的に呼び出されて独自の例外クラスを読み込もうとする可能性があります。
      </entry>
     </row>
     <row>
      <entry>5.3.0</entry>
      <entry>
       追加: <link linkend="language.oop5.overloading">__callStatic</link> メソッド。
      </entry>
     </row>
     <row>
      <entry>5.3.0</entry>
      <entry>
       追加: <link linkend="language.types.string.syntax.heredoc">ヒアドキュメント</link>
       および <link linkend="language.types.string.syntax.nowdoc">Nowdoc</link>
       の、クラス定数やプロパティの定義での使用。
       注意: ヒアドキュメントの値は、ダブルクォートで囲んだ文字列と同じ規則に従わなければなりません
       (その中で変数を使えないなど)。
      </entry>
     </row>
     <row>
      <entry>5.3.0</entry>
      <entry>
       追加: <link linkend="language.oop5.late-static-bindings">遅延静的束縛</link>。
      </entry>
     </row>
     <row>
      <entry>5.3.0</entry>
      <entry>
       追加: <link linkend="object.invoke">__invoke()</link> メソッド。
      </entry>
     </row>
     <row>
      <entry>5.2.0</entry>
      <entry>
       変更: <link linkend="object.tostring">__toString()</link>
       メソッドがコールされるのは
       <function>echo</function> や <function>print</function>
       と直接組み合わせて使った場合のみでした。このバージョンからは、任意の
       &string; コンテキスト
       (<function>printf</function> で <literal>%s</literal> 修飾子を使った場合など)
       でコールされるようになりました。ただし、他の型のコンテキスト
       (<literal>%d</literal> 修飾子を使った場合など) は除きます。
       PHP 5.2.0 以降は、<link linkend="object.tostring">__toString</link>
       メソッドを持たない &object; を &string; に変換しようとすると
       <constant>E_RECOVERABLE_ERROR</constant> レベルのエラーが発生します。
      </entry>
     </row>
     <row>
      <entry>5.1.3</entry>
      <entry>
       変更: PHP 5 の初期のバージョンでは <literal>var</literal>
       を使うことが非推奨とされており、<constant>E_STRICT</constant> レベルのエラーが発生していました。
       このバージョンからは非推奨ではなくなり、エラーが発生しなくなりました。
      </entry>
     </row>
     <row>
      <entry>5.1.0</entry>
      <entry>
       変更: <link linkend="object.set-state">__set_state()</link> メソッドが、
       <function>var_export</function> でエクスポートしたクラスに対してもコールされるようになりました。
      </entry>
     </row>
     <row>
      <entry>5.1.0</entry>
      <entry>
       追加: <link linkend="object.isset">__isset()</link> メソッドおよび
       <link linkend="object.unset">__unset()</link> メソッド。
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </para>
</sect1>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
