<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 16934048f79c6e117cd16a23c09c1b2ea502e284 Maintainer: mumumu Status: ready -->
<sect1 xml:id="language.operators.assignment">
 <title>代入演算子</title>
 <titleabbrev>代入演算子</titleabbrev>
 <simpara>
  代入演算子の基本となるものは "=" です。この演算子に関して最初に
  思い付く意味は"等しい"であるかもしれません。しかし、そうではありません。
  本当は、左オペランドに右オペランドの式の値を設定する("得て代入する")
  ことを意味します。
 </simpara>
 <para>
  代入式の値は、代入される値です。つまり、"<literal>$a = 3</literal>" の値は、3 です。
  これにより、以下のようなトリッキーなことができるようになります。
  <example>
   <title>ネストした代入</title>
   <programlisting role="php">
<![CDATA[
<?php
$a = ($b = 4) + 5; // $a は 9 に等しくなり、$b には 4 が代入されます
var_dump($a);
?>
]]>
   </programlisting>
  </example>
 </para>
 <para>
  基本代入演算子に加えて、全ての<link linkend="language.operators">
  演算子</link>、配列結合および文字列演算子に関して
  「複合演算子」があります。
  これにより、式の中の値を使用し、その値をその式の結果とすることができます。
  例えば、
  <example>
   <title>複合代入</title>
   <programlisting role="php">
<![CDATA[
<?php
$a = 3;
$a += 5; // $a を 8 にセットします。$a = $a + 5; と同じです。
$b = "Hello ";
$b .= "There!"; // $bを"Hello There!"にセットします。$b = $b . "There!";と同じです。

var_dump($a, $b);
?>
]]>
   </programlisting>
  </example>
 </para>
 <para>
  代入は、元の変数を新しい変数にコピーする(値による代入)ため、
  片方の変数に対する変更はもう片方に影響を与えないということに
  注意してください。この動作により、密なループの内側で大きな配列のようなものを
  コピーする必要がある場合には問題を生じる可能性があります。
 </para>
 <para>
  PHP では通常は値による代入になりますが、
  オブジェクトは参照で代入されます。
  オブジェクトを明示的にコピーするには
  <link linkend="language.oop5.cloning">clone</link> キーワードを使います。
 </para>

 <sect2 xml:id="language.operators.assignment.reference">
  <title>参照による代入</title>
  <para>
   参照による代入もサポートしており、
   "<computeroutput>$var = &amp;$othervar;</computeroutput>" 構文で使うことができます。
   参照による代入とは、両方の変数が同じデータを指すようにするということです。
   データのコピーは発生しません。
  </para>
  <para>
   <example>
    <title>参照による代入</title>
    <programlisting role="php">
<![CDATA[
<?php
$a = 3;
$b = &$a; // $b は $a への参照です

print "$a\n"; // 表示: 3
print "$b\n"; // 表示: 3

$a = 4; // change $a

print "$a\n"; // 表示: 4
print "$b\n"; // 表示: 4
            // $b の参照先は $a であり、その値が変わったからです
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <link linkend="language.oop5.basic.new">new</link>
   演算子は自動的に参照を返します。そのため、
   <link linkend="language.oop5.basic.new">new</link> の結果を参照で代入するとエラーが発生します。
  </para>
  <para>
   <example>
    <title>new 演算子の参照</title>
    <programlisting role="php">
<![CDATA[
<?php
class C {}

$o = &new C;
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Parse error: syntax error, unexpected token ";", expecting "("
]]>
    </screen>
   </example>
  </para>
  <para>
   参照に関する詳細な情報やその使い方については、このマニュアルの
   <link linkend="language.references">リファレンスに関する説明</link>
   をご覧ください。
  </para>
 </sect2>

 <sect2 xml:id="language.operators.assignment.arithmetic">
  <title>算術代入演算子</title>
  <informaltable>
   <tgroup cols="3">
    <thead>
     <row>
      <entry>例</entry>
      <entry>同一の結果になる操作</entry>
      <entry>演算</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>$a += $b</entry>
      <entry>$a = $a + $b</entry>
      <entry>加算</entry>
     </row>
     <row>
      <entry>$a -= $b</entry>
      <entry>$a = $a - $b</entry>
      <entry>減算</entry>
     </row>
     <row>
      <entry>$a *= $b</entry>
      <entry>$a = $a * $b</entry>
      <entry>乗算</entry>
     </row>
     <row>
      <entry>$a /= $b</entry>
      <entry>$a = $a / $b</entry>
      <entry>除算</entry>
     </row>
     <row>
      <entry>$a %= $b</entry>
      <entry>$a = $a % $b</entry>
      <entry>剰余</entry>
     </row>
     <row>
      <entry>$a **= $b</entry>
      <entry>$a = $a ** $b</entry>
      <entry>べき乗</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </sect2>

 <sect2 xml:id="language.operators.assignment.bitwise">
  <title>ビット代入演算子</title>
  <informaltable>
   <tgroup cols="3">
    <thead>
     <row>
      <entry>例</entry>
      <entry>同一の結果になる操作</entry>
      <entry>演算</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>$a &amp;= $b</entry>
      <entry>$a = $a &amp; $b</entry>
      <entry>ビット積</entry>
     </row>
     <row>
      <entry>$a |= $b</entry>
      <entry>$a = $a | $b</entry>
      <entry>ビット和</entry>
     </row>
     <row>
      <entry>$a ^= $b</entry>
      <entry>$a = $a ^ $b</entry>
      <entry>排他的論理和</entry>
     </row>
     <row>
      <entry>$a &lt;&lt;= $b</entry>
      <entry>$a = $a &lt;&lt; $b</entry>
      <entry>左シフト</entry>
     </row>
     <row>
      <entry>$a &gt;&gt;= $b</entry>
      <entry>$a = $a &gt;&gt; $b</entry>
      <entry>右シフト</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </sect2>

 <sect2 xml:id="language.operators.assignment.other">
  <title>その他の代入演算子</title>
  <informaltable>
   <tgroup cols="3">
    <thead>
     <row>
      <entry>例</entry>
      <entry>同一の結果になる操作</entry>
      <entry>演算</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>$a .= $b</entry>
      <entry>$a = $a . $b</entry>
      <entry>文字列の結合</entry>
     </row>
     <row>
      <entry>$a ??= $b</entry>
      <entry>$a = $a ?? $b</entry>
      <entry>Null合体</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </sect2>

 <sect2 role="seealso" xml:id="language.operators.assignment.see-also">
   &reftitle.seealso;
   <para>
    <simplelist>
     <member><link linkend="language.operators.arithmetic">算術演算子</link></member>
     <member><link linkend="language.operators.bitwise">ビット演算子</link></member>
     <member><link linkend="language.operators.comparison.coalesce">Null 合体演算子</link></member>
    </simplelist>
   </para>
 </sect2>
</sect1>
