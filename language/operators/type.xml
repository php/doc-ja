<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 16934048f79c6e117cd16a23c09c1b2ea502e284 Maintainer: mumumu Status: ready -->
<sect1 xml:id="language.operators.type">
 <title>型演算子</title>
 <titleabbrev>型演算子</titleabbrev>
 <para>
  <literal>instanceof</literal> を使用して、
  ある PHP 変数が特定の
  <link linkend="language.oop5.basic.class">クラス</link>
  のオブジェクトのインスタンスであるかどうかを調べます。
  <example>
   <title>クラスでの <literal>instanceof</literal> の使用法</title>
   <programlisting role="php">
<![CDATA[
<?php
class MyClass
{
}

class NotMyClass
{
}
$a = new MyClass;

var_dump($a instanceof MyClass);
var_dump($a instanceof NotMyClass);
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
bool(true)
bool(false)
]]>
   </screen>
  </example>
 </para>
 <para>
  <literal>instanceof</literal> は、ある変数が
  特定の親クラスを継承したクラスのオブジェクトのインスタンスであるかどうかを調べることもできます。
  <example>
   <title>継承したクラスでの <literal>instanceof</literal> の使用法</title>
   <programlisting role="php">
<![CDATA[
<?php
class ParentClass
{
}

class MyClass extends ParentClass
{
}

$a = new MyClass;

var_dump($a instanceof MyClass);
var_dump($a instanceof ParentClass);
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
bool(true)
bool(true)
]]>
   </screen>
  </example>
 </para>
 <para>
  あるオブジェクトが特定のクラスのインスタンスで <emphasis>ない</emphasis>
  ことを調べるには、
  <link linkend="language.operators.logical">論理 <literal>否定</literal> 演算子</link>
  を使用します。
  <example>
   <title><literal>instanceof</literal> を使用して、オブジェクトがクラスのインスタンスで <emphasis>ない</emphasis>
    かどうかを調べる方法</title>
   <programlisting role="php">
<![CDATA[
<?php
class MyClass
{
}

$a = new MyClass;
var_dump(!($a instanceof stdClass));
?>
]]>
   </programlisting>
  &example.outputs;
  <screen>
<![CDATA[
bool(true)
]]>
   </screen>
  </example>
 </para>
 <para>
  最後に、<literal>instanceof</literal>
  は、ある変数が特定の
  <link linkend="language.oop5.interfaces">インターフェイス</link>
  を実装したクラスのオブジェクトのインスタンスであるかどうかも調べることができます。
  <example>
   <title>インターフェイスでの <literal>instanceof</literal> の使用法</title>
   <programlisting role="php">
<![CDATA[
<?php
interface MyInterface
{
}

class MyClass implements MyInterface
{
}

$a = new MyClass;

var_dump($a instanceof MyClass);
var_dump($a instanceof MyInterface);
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
bool(true)
bool(true)
]]>
   </screen>
  </example>
 </para>
 <para>
  通常、<literal>instanceof</literal> ではリテラルのクラス名を使用しますが、
  別のオブジェクトや文字列変数を使用することもできます。
  <example>
   <title>変数を用いた <literal>instanceof</literal> の使用法</title>
   <programlisting role="php">
<![CDATA[
<?php
interface MyInterface
{
}

class MyClass implements MyInterface
{
}

$a = new MyClass;
$b = new MyClass;
$c = 'MyClass';
$d = 'NotMyClass';

var_dump($a instanceof $b); // $b MyClass クラスのオブジェクトです
var_dump($a instanceof $c); // $c は文字列 'MyClass' です
var_dump($a instanceof $d); // $d は文字列 'NotMyClass' です
?>
]]>
  </programlisting>
  &example.outputs;
  <screen>
<![CDATA[
bool(true)
bool(true)
bool(false)
]]>
   </screen>
  </example>
 </para>
 <para>
  instanceof は、もし確かめる変数がオブジェクトでなくてもエラーになりません。単に
  &false; を返すだけです。ただし、PHP 7.3.0 以前では、定数を調べることはできませんでした。
  <example>
   <title><literal>instanceof</literal> での他の変数の調べかた</title>
   <programlisting role="php">
<![CDATA[
<?php
$a = 1;
$b = NULL;
$c = fopen('/tmp/', 'r');
var_dump($a instanceof stdClass); // $a は整数です
var_dump($b instanceof stdClass); // $b は NULL です
var_dump($c instanceof stdClass); // $c はリソースです
var_dump(FALSE instanceof stdClass);
?>
]]>
  </programlisting>
  &example.outputs;
  <screen>
<![CDATA[
bool(false)
bool(false)
bool(false)
PHP Fatal error:  instanceof expects an object instance, constant given
]]>
   </screen>
  </example>
 </para>
 <para>
  PHP 7.3.0 以降では、
  <literal>instanceof</literal> の左辺値に定数を指定できるようになりました。
  <example>
   <title><literal>instanceof</literal> を使って定数を確認する</title>
   <programlisting role="php">
<![CDATA[
<?php
var_dump(FALSE instanceof stdClass);
?>
]]>
  </programlisting>
  &example.outputs.73;
  <screen>
<![CDATA[
bool(false)
]]>
   </screen>
  </example>
 </para>
 <para>
  PHP 8.0.0 以降では、
  <literal>instanceof</literal> は任意の式と一緒に使えるようになりました。
  式は文字列を生成するもので、かつ括弧で囲む必要があります。
  <!-- RFC: https://wiki.php.net/rfc/variable_syntax_tweaks -->
  <example>
   <title><literal>instanceof</literal> を任意の式と一緒に使う</title>
   <programlisting role="php">
    <![CDATA[
<?php

class ClassA extends \stdClass {}
class ClassB extends \stdClass {}
class ClassC extends ClassB {}
class ClassD extends ClassA {}

function getSomeClass(): string
{
  return ClassA::class;
}

var_dump(new ClassA instanceof ('std' . 'Class'));
var_dump(new ClassB instanceof ('Class' . 'B'));
var_dump(new ClassC instanceof ('Class' . 'A'));
var_dump(new ClassD instanceof (getSomeClass()));
?>
]]>
   </programlisting>
   &example.outputs.8;
   <screen>
    <![CDATA[
bool(true)
bool(true)
bool(false)
bool(true)
]]>
   </screen>
  </example>
 </para>
 <simpara>
  <literal>instanceof</literal> 演算子は、<function>is_a</function>
  関数とは機能的に異なる部分があります。
 </simpara>

 <sect2 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>get_class</function></member>
    <member><function>is_a</function></member>
   </simplelist>
  </para>
 </sect2>
</sect1>
