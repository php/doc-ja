<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 7a3899eea90f3df8dcfe8fd350900162f3490bed Maintainer: hirokawa Status: ready -->
<!-- CREDITS: shimooka,mumumu -->
<refentry xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://docbook.org/ns/docbook" xml:id="function.echo">
 <refnamediv>
  <refname>echo</refname>
  <refpurpose>1 つ以上の文字列を出力する</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>void</type><methodname>echo</methodname>
   <methodparam rep="repeat"><type>string</type><parameter>expressions</parameter></methodparam>
  </methodsynopsis>
  <simpara>
   ひとつ以上の(文字列として評価される)式を出力します。末尾に改行やスペースを付加することはありません。
  </simpara>
  <para>
   <literal>echo</literal> は実際には関数ではなく、言語構造です。
   <literal>echo</literal> キーワードの後に続く引数は、
   コンマで区切られた(文字列として評価される)式のリストであり、括弧で括る必要はありません。
   他の言語構造と異なり <literal>echo</literal>
   には戻り値がありません。そのため、
   式のコンテクストでは使うことができません。
  </para>
  <para>
   <literal>echo</literal> には、開始タグの直後に等号を付ける短縮構文もあります。
   この短縮構文は、設定オプション<link
    linkend="ini.short-open-tag">short_open_tag</link>
   が無効な場合でも使えます。
   <informalexample>
    <programlisting role="php">
<![CDATA[
I have <?=$foo?> foo.
]]>
    </programlisting>
   </informalexample>
  </para>
  <para>
   <literal>print</literal> との主な違いは、
   <literal>echo</literal> がリスト形式の引数を受け付け、返り値を持たないことです。
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>expressions</parameter></term>
     <listitem>
      <para>
       出力したいひとつ以上の文字列として評価される式。
       コンマで区切ります。
       文字列として評価されない値を渡した場合、文字列に強制的に変換されます。
       これは、<link linkend="language.types.declarations.strict"><literal>strict_types</literal> ディレクティブ</link> が有効になっていても同じです。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.void;
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><literal>echo</literal> の例</title>
    <programlisting role="php">
<![CDATA[
<?php
echo "echo does not require parentheses.";

// 文字列は、複数の引数として個別に渡すこともできますし、
// 連結し、ひとつの引数として渡すこともできます。
echo 'This ', 'string ', 'was ', 'made ', 'with multiple parameters.', "\n";
echo 'This ' . 'string ' . 'was ' . 'made ' . 'with concatenation.' . "\n";

// 改行やスペースが付加されることはありません; 以下は、"helloworld" を一行で出力します。
echo "hello";
echo "world";

// 上と同じです。
echo "hello", "world";

echo "This string spans
multiple lines. The newlines will be
output as well";

echo "This string spans\nmultiple lines. The newlines will be\noutput as well.";

// 引数は文字列を生成するあらゆる式を指定することができます。
$foo = "example";
echo "foo is $foo"; // foo is example

$fruits = ["lemon", "orange", "banana"];
echo implode(" and ", $fruits); // lemon and orange and banana

// 文字列でない値は、文字列に強制されます。たとえ declare(strict_types=1) が使われていても同じです。
echo 6 * 7; // 42

// echo は式として振る舞わないので、以下のコードは正しくありません。
($some_var) ? echo 'true' : echo 'false';

// しかし、以下の例は動作します:
($some_var) ? print 'true' : print 'false'; // print も言語構造ですが、
                                            // これは正しい式であり、1を返します。
                                            // よって、式のコンテクストで使うことが出来ます。

echo $some_var ? 'true': 'false'; // 式を最初に評価し、echo  に渡します。
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  &note.language-construct;

  <note>
   <title>括弧を使う</title>
   <para>
    <literal>echo</literal> に対して引数をひとつだけ括弧で囲んで渡しても文法エラーにはなりませんが、
    通常の関数コールのような文法に見えてしまいます。
    しかし、これは誤解を招く恐れがあります。
    なぜなら、括弧は実際には出力を構成する式の一部であり、
    <literal>echo</literal> の文法の一部ではないからです。
   </para>
   <para>
    <example>
     <title/>
     <programlisting role="php">
     <![CDATA[
<?php
echo "hello";
// "hello" を出力します。

echo("hello");
// 同じく"hello" を出力します。なぜなら ("hello") は正しい式だからです。

echo(1 + 2) * 3;
// "9" を出力します; 括弧によって 1+2 が先に評価され、3*3がその次に評価されます。
// echo 文は、式の評価結果全体をひとつの引数とみなします。

echo "hello", " world";
// "hello world" を出力します。

echo("hello"), (" world");
// "hello world" を出力します; 括弧は個々の式の一部です。

echo("hello", " world");
// Parse Error をスローします。なぜなら、 ("hello", " world") は正しい式ではないからです。
?>
]]>
    </programlisting>
   </example>
  </para>
  </note>
 
  <tip>
   <para>
    複数の引数を<literal>echo</literal> に渡すことで、
    PHP におけるピリオド演算子の優先順位が高いことによる複雑な挙動を避けることができます。
    たとえば、ピリオド演算子は三項演算子より演算子が高くなっています。さらにPHP 8.0.0 より前のバージョンでは、加算および減算演算子と優先順位が同じでした:
   </para>
   <programlisting role="php">
    <![CDATA[
<?php
// 以下の例では、'Hello ' . isset($name) という式が先に評価されます。
// そして、常にこれは true と評価されるので、echo への引数は常に $name になります。
echo 'Hello ' . isset($name) ? $name : 'John Doe' . '!';

// 上の例を意図した振る舞いにしようとするなら、以下のように追加の括弧が必要です。
echo 'Hello ' . (isset($name) ? $name : 'John Doe') . '!';

// PHP 8.0.0 より前のバージョンでは、以下は "Sum: 3" ではなく、"2" を出力していました。
echo 'Sum: ' . 1 + 2;

// 繰り返しますが、括弧を追加することで、意図通りの評価順序を保証できます。
echo 'Sum: ' . (1 + 2);
]]>
   </programlisting>
   <para>
    複数の引数を渡した場合、
    優先順位を強制するための括弧は不要です。
    なぜなら、それぞれの文字列表現は別のものだからです:
   </para>
   <programlisting role="php">
<![CDATA[
<?php
echo "Hello ", isset($name) ? $name : "John Doe", "!";

echo "Sum: ", 1 + 2;
]]>
   </programlisting>
  </tip>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>print</function></member>
    <member><function>printf</function></member>
    <member><function>flush</function></member>
    <member><link linkend="language.types.string">文字列リテラルを指定する方法</link></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
