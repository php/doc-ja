<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 195fde0082f2771a210a2818d3d4fa09c7ee785d Maintainer: hirokawa Status: ready -->
<!-- Credits: mumumu -->
<refentry xml:id="function.parse-url" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>parse_url</refname>
  <refpurpose>URL を解釈し、その構成要素を返す</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type class="union"><type>int</type><type>string</type><type>array</type><type>null</type><type>false</type></type><methodname>parse_url</methodname>
   <methodparam><type>string</type><parameter>url</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>component</parameter><initializer>-1</initializer></methodparam>
  </methodsynopsis>
  <para>
   この関数は、URL の様々な構成要素のうち特定できるものに関して
   連想配列にして返します。
   連想配列に含まれる要素の値は、URLデコード <emphasis>されません</emphasis>。
  </para>
  <para>
   この関数は、指定された URL が有効かどうかを調べるためのもの
   <emphasis role="strong">ではなく</emphasis>、単に URL を以下で示す
   要素に分解するだけのものです。不完全、かつ不正な
   URL であっても受け入れますし、
   そのような場合でも <function>parse_url</function> は可能な限り
   正しく解析しようとします。
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>url</parameter></term>
     <listitem>
      <para>
       パースする URL。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
   <variablelist>
    <varlistentry>
     <term><parameter>component</parameter></term>
     <listitem>
      <para>
       <constant>PHP_URL_SCHEME</constant>、
       <constant>PHP_URL_HOST</constant>、<constant>PHP_URL_PORT</constant>、
       <constant>PHP_URL_USER</constant>、<constant>PHP_URL_PASS</constant>、
       <constant>PHP_URL_PATH</constant>、<constant>PHP_URL_QUERY</constant>
       あるいは <constant>PHP_URL_FRAGMENT</constant> のうちのいずれかを指定し、
       特定の URL コンポーネントのみを文字列
       (<constant>PHP_URL_PORT</constant> を指定した場合だけは整数値)
       で取得するようにします。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>

  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   完全におかしな形式の URL については、<function>parse_url</function> は
   &false; を返します。
  </para>
  <para>
   <parameter>component</parameter> を省略した場合は、連想配列を返します。
   連想配列の中には少なくともひとつの要素が含まれます。
   この配列に含まれる可能性のある要素は次のとおりです。
   <itemizedlist>
    <listitem>
     <simpara>
      <varname remap="structfield">scheme</varname> - 例: http
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <varname remap="structfield">host</varname> 
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <varname remap="structfield">port</varname>
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <varname remap="structfield">user</varname>
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <varname remap="structfield">pass</varname>
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <varname remap="structfield">path</varname>
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <varname remap="structfield">query</varname> - クエスチョンマーク <literal>?</literal> 以降
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <varname remap="structfield">fragment</varname> - ハッシュマーク <literal>#</literal> 以降
     </simpara>
    </listitem>
   </itemizedlist>
  </para>
  <para>
   <parameter>component</parameter> が指定されている場合、
   <function>parse_url</function> は配列ではなく文字列
   (<constant>PHP_URL_PORT</constant> の場合は整数値) を返します。
   要求したコンポーネントが指定した URL の中にない場合は
   &null; を返します。
   PHP 8.0.0 以降では、
   <function>parse_url</function> は、query と fragment について、
   存在しないことと値が空であることを以下のように区別します:
  </para>
  <para>
   <informalexample>
    <screen>
<![CDATA[
http://example.com/foo → query = null, fragment = null
http://example.com/foo? → query = "",   fragment = null
http://example.com/foo# → query = null, fragment = ""
http://example.com/foo?# → query = "",   fragment = ""
]]>
    </screen>
   </informalexample>
  </para>
  <para>
    8.0.0 より前のバージョンでは、上記の場合は query も fragment も共に
    &null; になっていました。
  </para>
  <para>
   URL の各要素(コンポーネント) に含まれる制御文字
   (<function>ctype_cntrl</function> も参照ください) は、
   アンダースコア (<literal>_</literal>) に置き換えられる点に注意して下さい。
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>8.0.0</entry>
      <entry>
       <function>parse_url</function> は、query と fragment について、
       存在しないことと値が空であることを区別するようになりました。
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>parse_url</function> の例</title>
    <programlisting role="php">
<![CDATA[
<?php
$url = 'http://username:password@hostname:9090/path?arg=value#anchor';

var_dump(parse_url($url));
var_dump(parse_url($url, PHP_URL_SCHEME));
var_dump(parse_url($url, PHP_URL_USER));
var_dump(parse_url($url, PHP_URL_PASS));
var_dump(parse_url($url, PHP_URL_HOST));
var_dump(parse_url($url, PHP_URL_PORT));
var_dump(parse_url($url, PHP_URL_PATH));
var_dump(parse_url($url, PHP_URL_QUERY));
var_dump(parse_url($url, PHP_URL_FRAGMENT));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
array(8) {
  ["scheme"]=>
  string(4) "http"
  ["host"]=>
  string(8) "hostname"
  ["port"]=>
  int(9090)
  ["user"]=>
  string(8) "username"
  ["pass"]=>
  string(8) "password"
  ["path"]=>
  string(5) "/path"
  ["query"]=>
  string(9) "arg=value"
  ["fragment"]=>
  string(6) "anchor"
}
string(4) "http"
string(8) "username"
string(8) "password"
string(8) "hostname"
int(9090)
string(5) "/path"
string(9) "arg=value"
string(6) "anchor"
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title><function>parse_url</function> でスキームを省略した例</title>
    <programlisting role="php">
<![CDATA[
<?php
$url = '//www.example.com/path?googleguy=googley';

// 5.4.7 より前のバージョンでは、パスを "//www.example.com/path" のように表示していました
var_dump(parse_url($url));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
array(3) {
  ["host"]=>
  string(15) "www.example.com"
  ["path"]=>
  string(5) "/path"
  ["query"]=>
  string(17) "googleguy=googley"
}
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <caution>
   <para>
    この関数は相対 URL、
    または不正な URL に対しては正しい結果を返さないかもしれません。
    また、この関数の返す結果は、
    HTTP クライアントの一般的な挙動とも異なるかもしれません。
    信頼できない入力から得られる URL をパースする必要がある場合、
    たとえば <function>filter_var</function> 関数を
    <constant>FILTER_VALIDATE_URL</constant> と一緒に使うなどして、
    追加の検証を行うことが必須です。
   </para>
  </caution>
  <note>
   <para>
    <function>parse_url</function> は URL をパースするための関数であり、
    URI をパースするものではありません。しかし、PHP の後方互換性を満たすため、
    例外として file:// スキームについては 3 重スラッシュ(file:///...)
    が認められています。他のスキームにおいては、これは無効な形式となります。
   </para>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>pathinfo</function></member>
    <member><function>parse_str</function></member>
    <member><function>http_build_query</function></member>
    <member><function>dirname</function></member>
    <member><function>basename</function></member>
    <member><link xlink:href="&url.rfc;3986">RFC 3986</link></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
