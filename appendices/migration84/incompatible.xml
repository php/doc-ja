<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: b1b039696eedcc82e9c1144eeecbfc0a8a1b3859 Maintainer: KentarouTakeda Status: ready -->
<!-- Credits: KentarouTakeda -->
<sect1 xml:id="migration84.incompatible" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>下位互換性のない変更点</title>

 <simpara>
  このセクションで明示的に述べられていなくても、
  新しい<link linkend="migration84.new-functions">関数</link>、
  <link linkend="migration84.new-classes">クラス、インターフェイス、列挙型</link>、
  または<link linkend="migration84.constants">定数</link>は、
  再宣言による<exceptionname>Error</exceptionname>がスローされる可能性があります。
 </simpara>

 <sect2 xml:id="migration84.incompatible.core">
  <title>PHP コア</title>

  <!-- RFC: https://wiki.php.net/rfc/exit-as-function -->
  <sect3 xml:id="migration84.incompatible.core.exit">
   <title><function>exit</function> の動作の変更</title>

   <simpara>
    <function>exit</function> (および<function>die</function>)
    言語構造は、関数のように振る舞います。
    これにより、<type>callable</type>として渡すことができ、
    <!-- TODO: Link to declare documentation/type juggling documentation -->
    <literal>strict_types</literal> 宣言の影響を受け、
    任意の非整数値を文字列にキャストする代わりに、通常の型強制を行います。
   </simpara>

   <simpara>
    そのため、<function>exit</function> および <function>die</function> に
    無効な型を渡すと、一貫して<exceptionname>TypeError</exceptionname> が
    スローされるようになりました。
   </simpara>
  </sect3>

  <sect3 xml:id="migration84.incompatible.core.recursion-comparison">
   <title>比較中の再帰</title>

   <simpara>
    比較中に再帰が発生すると、
    <constant>E_ERROR</constant> の致命的なエラーの代わりに、
    <exceptionname>Error</exceptionname> 例外がスローされるようになりました。
   </simpara>
  </sect3>

  <sect3 xml:id="migration84.incompatible.core.readonly-indirect-modification">
   <title>readonly プロパティの間接的な変更</title>

   <!-- TODO Link to clone magic method, and explain this better as UPGRADING is... -->
   <simpara>
    <code>__clone()</code> 内で readonly プロパティを間接的に変更することは、
    もはや許可されなくなりました。例えば、<code>$ref = &amp;$this->readonly</code> のようなコードです。
    これは readonly の初期化時にはすでに禁止されており、
    「クローン時の readonly の再初期化」の実装における見落としでした。
   </simpara>
  </sect3>

  <sect3 xml:id="migration84.incompatible.core.constant-type-change">
   <title>定数の型の変更</title>

   <simpara>
    <constant>PHP_DEBUG</constant> および <constant>PHP_ZTS</constant> 定数の型が、
    <type>int</type> から <type>bool</type> に変更されました。
   </simpara>
  </sect3>

  <sect3 xml:id="migration84.incompatible.core.tempnam-length">
   <title>一時ファイル名の長さ</title>

   <simpara>
    アップロードされたファイルや <function>tempnam</function> 関数で作成されるファイルの名前は、
    以前より13バイト長くなりました。
    総合的な長さは引き続きプラットフォーム依存です。
   </simpara>
  </sect3>

  <!-- RFC: https://wiki.php.net/rfc/deprecations_php_8_4#remove_e_strict_error_level_and_deprecate_e_strict_constant -->
  <sect3 xml:id="migration84.incompatible.core.e-strict">
   <title><constant>E_STRICT</constant> エラーレベルの削除</title>

   <simpara>
    <constant>E_STRICT</constant> エラーレベルは、
    PHPエンジン内で使用されなくなったため削除されました。
    <constant>E_STRICT</constant> 定数は非推奨となりました。
   </simpara>
  </sect3>
 </sect2>

 <sect2 xml:id="migration84.incompatible.typed-constants">
  <title>型が追加された拡張クラスの定数</title>

  <para>
   以下の拡張クラスは、定数に型が宣言されました:
   <simplelist>
    <member><link linkend="book.datetime">Date</link></member>
    <member><link linkend="book.intl">Intl</link></member>
    <member><link linkend="book.pdo">PDO</link></member>
    <member><link linkend="book.reflection">Reflection</link></member>
    <member><link linkend="book.spl">SPL</link></member>
    <member><link linkend="book.sqlite3">Sqlite</link></member>
    <member><link linkend="book.xmlreader">XMLReader</link></member>
   </simplelist>
  </para>
 </sect2>

 <!-- TODO: Check resource names -->
 <sect2 xml:id="migration84.incompatible.resource2object">
  <title>リソースからオブジェクトへの移行</title>

  <simpara>
   いくつかの &resource; が &object; に移行されました。
   <function>is_resource</function> を使用した戻り値のチェックは、
   特に指定がない限り、&false; かどうかを確認するように置き換える必要があります。
  </simpara>

  <sect3 xml:id="migration84.incompatible.resource2object.dba">
   <title>DBA</title>

   <simpara>
    <link linkend="book.dba">DBA</link> 関数は、
    <literal>dba_connection</literal> &resource; の代わりに
    <classname>Dba\Connection</classname> オブジェクトを受け取り、返すようになりました。
   </simpara>
  </sect3>

  <sect3 xml:id="migration84.incompatible.resource2object.odbc">
   <title>ODBC</title>

   <simpara>
    <link linkend="book.uodbc">ODBC</link> 関数は、
    <literal>odbc_result</literal> &resource; の代わりに
    <classname>Odbc\Result</classname> オブジェクトを受け取り、返すようになりました。
   </simpara>

   <simpara>
    <link linkend="book.uodbc">ODBC</link> 関数は、
    <literal>odbc_connection</literal> &resource; の代わりに
    <classname>Odbc\Connection</classname> オブジェクトを受け取り、返すようになりました。
   </simpara>
  </sect3>

  <sect3 xml:id="migration84.incompatible.resource2object.soap">
   <title>SOAP</title>

   <simpara>
    <property>SoapClient::$httpurl</property> プロパティは、
    <literal>soap_url</literal> &resource; の代わりに
    <classname>Soap\Url</classname> オブジェクトになりました。
    <function>is_resource</function> を使用したチェック
    (例: <code>is_resource($client->httpurl)</code>)は、
    &null; かどうかのチェック(例: <code>$client->httpurl !== null</code>)に置き換える必要があります。
   </simpara>
   <simpara>
    <property>SoapClient::$sdl</property> プロパティは、
    <literal>soap_sdl</literal> &resource; の代わりに
    <classname>Soap\Sdl</classname> オブジェクトになりました。
    <function>is_resource</function> を使用したチェック
    (例: <code>is_resource($client->sdl)</code>)は、
    &null; かどうかのチェック(例: <code>$client->sdl !== null</code>)に置き換える必要があります。
   </simpara>
  </sect3>
 </sect2>

 <sect2 xml:id="migration84.incompatible.new-warnings-exceptions">
  <title>新しい警告と例外</title>

  <simpara>
   プログラミングエラー、つまり無効な値が引数として提供された場合にトリガーされる
   新しい警告と例外が追加されました。
  </simpara>

  <sect3 xml:id="migration84.incompatible.new-warnings-exceptions.curl">
   <title>cURL</title>

   <simpara>
    <function>curl_multi_select</function> は、
    <parameter>timeout</parameter> パラメータが <literal>0</literal> 未満または
    <constant>PHP_INT_MAX</constant> を超える場合、
    <exceptionname>ValueError</exceptionname> をスローするようになりました。
   </simpara>
  </sect3>

  <sect3 xml:id="migration84.incompatible.new-warnings-exceptions.gd">
   <title>GD</title>

   <para>
    <simplelist type="inline">
     <member><function>imagejpeg</function></member>
     <member><function>imagewebp</function></member>
     <member><function>imagepng</function></member>
     <member><function>imageavif</function></member>
    </simplelist>
    は、無効な <parameter>quality</parameter> が渡された場合、
    <exceptionname>ValueError</exceptionname> をスローするようになりました。
   </para>

   <simpara>
    <function>imageavif</function> は、
    無効な <parameter>speed</parameter> パラメータ値が渡された場合、
    <exceptionname>ValueError</exceptionname> をスローするようになりました。
   </simpara>

   <simpara>
    <function>imagescale</function> は、
    <parameter>width</parameter> または <parameter>height</parameter> パラメータが
    アンダーフロー/オーバーフローした場合、
    <exceptionname>ValueError</exceptionname> をスローするようになりました。
   </simpara>

   <simpara>
    <function>imagescale</function> は、
    無効な <parameter>mode</parameter> パラメータ値が渡された場合、
    <exceptionname>ValueError</exceptionname> をスローするようになりました。
   </simpara>

   <simpara>
    <function>imagefilter</function> は、
    <constant>IMG_FILTER_SCATTER</constant> フィルタで、
    <parameter>sub</parameter> または <parameter>plus</parameter> パラメータが
    アンダーフロー/オーバーフローした場合、
    <exceptionname>ValueError</exceptionname> をスローするようになりました。
   </simpara>
  </sect3>

  <sect3 xml:id="migration84.incompatible.new-warnings-exceptions.gettext">
   <title>Gettext</title>

   <para>
    <simplelist type="inline">
     <member><function>bind_textdomain_codeset</function></member>
     <member><function>textdomain</function></member>
     <member><function>d<replaceable>*</replaceable>gettext</function></member>
    </simplelist>
    は、<parameter>domain</parameter> が空文字列の場合、
    <exceptionname>ValueError</exceptionname> をスローするようになりました。
   </para>
  </sect3>

  <sect3 xml:id="migration84.incompatible.new-warnings-exceptions.intl">
   <title>Intl</title>

   <para>
    <function>resourcebundle_get</function>、
    <methodname>ResourceBundle::get</methodname>、および
    <classname>ResourceBundle</classname> オブジェクトでのオフセットアクセスは、
    以下の場合に例外をスローするようになりました:
    <simplelist>
     <member>
      無効なオフセット型の場合、<exceptionname>TypeError</exceptionname>
     </member>
     <member>
      空の &string; の場合、<exceptionname>ValueError</exceptionname>
     </member>
     <member>
      整数インデックスが符号付き32ビット整数に収まらない場合、
      <exceptionname>ValueError</exceptionname>
     </member>
    </simplelist>
   </para>

   <simpara>
    <methodname>IntlDateFormatter::__construct</methodname> は、
    <parameter>locale</parameter> が無効な場合、
    <exceptionname>ValueError</exceptionname> をスローするようになりました。
   </simpara>

   <simpara>
    <methodname>NumberFormatter::__construct</methodname> は、
    <parameter>locale</parameter> が無効な場合、
    <exceptionname>ValueError</exceptionname> をスローするようになりました。
   </simpara>
  </sect3>

  <sect3 xml:id="migration84.incompatible.new-warnings-exceptions.mbstring">
   <title>MBString</title>

   <simpara>
    <function>mb_encode_numericentity</function> および
    <function>mb_decode_numericentity</function> は、
    <parameter>map</parameter> が &integer; のみで構成されているかをチェックし、
    そうでない場合 <exceptionname>ValueError</exceptionname> をスローするようになりました。
   </simpara>

   <simpara>
    <function>mb_http_input</function> は、
    <parameter>type</parameter> が無効な場合、常に
    <exceptionname>ValueError</exceptionname> をスローするようになりました。
   </simpara>

   <simpara>
    <function>mb_http_output</function> は、
    <parameter>encoding</parameter> にヌルバイトが含まれていないかをチェックし、
    含まれている場合 <exceptionname>ValueError</exceptionname> をスローするようになりました。
   </simpara>
  </sect3>

  <sect3 xml:id="migration84.incompatible.new-warnings-exceptions.odbc">
   <title>ODBC</title>

   <simpara>
    <function>odbc_fetch_row</function> は、
    <parameter>row</parameter> が <literal>0</literal> 以下の場合、
    &false; を返すようになりました。この場合、警告が発せられます。
   </simpara>
  </sect3>

  <sect3 xml:id="migration84.incompatible.new-warnings-exceptions.pcntl">
   <title>PCNTL</title>

   <para>
    <function>pcntl_sigprocmask</function>、
    <function>pcntl_sigwaitinfo</function>、および
    <function>pcntl_sigtimedwait</function> 関数は、次の場合エラーをスローするようになりました:
    <simplelist>
     <member>
      <parameter>signals</parameter> 配列が空の場合、
      <exceptionname>ValueError</exceptionname>
      (<function>pcntl_sigprocmask</function> で
      <parameter>mode</parameter> が <constant>SIG_SETMASK</constant> のときを除く)
     </member>
     <member>
      <parameter>signals</parameter> 配列の値が &integer; でない場合、
      <exceptionname>TypeError</exceptionname>
     </member>
     <member>
      <parameter>signals</parameter> 配列の値が有効なシグナル番号でない場合、
      <exceptionname>ValueError</exceptionname>
     </member>
    </simplelist>
   </para>

   <simpara>
    <function>pcntl_sigprocmask</function> 関数は、
    <parameter>mode</parameter> が <constant>SIG_BLOCK</constant>、
    <constant>SIG_UNBLOCK</constant>、<constant>SIG_SETMASK</constant> のいずれでもない場合、
    <exceptionname>ValueError</exceptionname> をスローするようになりました。
   </simpara>

   <para>
    <function>pcntl_sigtimedwait</function> 関数は、次の場合エラーをスローするようになりました:
    <simplelist>
     <member>
      <parameter>seconds</parameter> が <literal>0</literal> 未満の場合、
      <exceptionname>ValueError</exceptionname>
     </member>
     <member>
      <parameter>nanoseconds</parameter> が <literal>0</literal> 未満
      または <literal>1e9</literal> を超える場合、
      <exceptionname>ValueError</exceptionname>
     </member>
     <member>
      <parameter>seconds</parameter> および <parameter>nanoseconds</parameter> が両方とも
      <literal>0</literal> の場合、<exceptionname>ValueError</exceptionname>
     </member>
    </simplelist>
   </para>
  </sect3>

  <sect3 xml:id="migration84.incompatible.new-warnings-exceptions.simplexml">
   <title>SimpleXML</title>

   <simpara>
    <function>simplexml_import_dom</function> に非XMLオブジェクトを渡すと、
    <exceptionname>ValueError</exceptionname> の代わりに
    <exceptionname>TypeError</exceptionname> をスローするようになりました。
   </simpara>
  </sect3>

  <sect3 xml:id="migration84.incompatible.new-warnings-exceptions.standard">
   <title>Standard</title>

   <simpara>
    <function>round</function> 関数は、 <parameter>mode</parameter> の値を検証し、
    無効なモードの場合、<exceptionname>ValueError</exceptionname> をスローするようになりました。
    以前は、無効なモードは <constant>PHP_ROUND_HALF_UP</constant> と解釈されていました。
   </simpara>

   <simpara>
    <function>str_getcsv</function> は、
    <parameter>separator</parameter> および <parameter>enclosure</parameter> 引数が
    1バイトの長さでない場合、または <parameter>escape</parameter> 引数が
    1バイトの長さでないか空文字列でない場合、
    <exceptionname>ValueError</exceptionname> をスローするようになりました。
    これは、<function>fputcsv</function> および <function>fgetcsv</function> の動作と
    同じになるように合わせたものです。
   </simpara>

   <simpara>
    <function>php_uname</function> 関数は、
    <parameter>mode</parameter> が無効な場合、
    <exceptionname>ValueError</exceptionname> をスローするようになりました。
   </simpara>

   <simpara>
    <function>unserialize</function> の
    <literal>"allowed_classes"</literal> オプションは、
    クラス名の <type>array</type> でない場合、
    <exceptionname>TypeError</exceptionname> および
    <exceptionname>ValueError</exceptionname> をスローするようになりました。
   </simpara>
  </sect3>

  <sect3 xml:id="migration84.incompatible.new-warnings-exceptions.xmlreader">
   <title>XMLReader</title>

   <simpara>
    無効な文字エンコーディングを
    <methodname>XMLReader::open</methodname> または
    <methodname>XMLReader::XML</methodname> に渡すと、
    <exceptionname>ValueError</exceptionname> をスローするようになりました。
   </simpara>

   <simpara>
    ヌルバイトを含む &string; を渡すと、以前は警告が発せられていましたが、
    現在は <exceptionname>ValueError</exceptionname> をスローするようになりました。
   </simpara>
  </sect3>

  <sect3 xml:id="migration84.incompatible.new-warnings-exceptions.xmlwriter">
   <title>XMLWriter</title>

   <simpara>
    ヌルバイトを含む &string; を渡すと、以前は警告が発せられていましたが、
    現在は <exceptionname>ValueError</exceptionname> をスローするようになりました。
   </simpara>
  </sect3>

  <sect3 xml:id="migration84.incompatible.new-warnings-exceptions.xsl">
   <title>XSL</title>

   <simpara>
    <methodname>XSLTProcessor::setParameter</methodname> は、
    引数にヌルバイトが含まれる場合、<exceptionname>ValueError</exceptionname> をスローするようになりました。
    これは、そもそも正しく動作していませんでした。
   </simpara>

   <simpara>
    <methodname>XSLTProcessor::importStyleSheet</methodname> に
    非XMLオブジェクトを渡すと、<exceptionname>ValueError</exceptionname> の代わりに
    <exceptionname>TypeError</exceptionname> がスローされるようになりました。
   </simpara>

   <!-- RFC: https://wiki.php.net/rfc/improve_callbacks_dom_and_xsl -->
   <simpara>
    評価中にPHP関数コールバックの呼び出しに失敗した場合、
    警告の発生ではなく、例外がスローされるようになりました。
   </simpara>
  </sect3>
 </sect2>

 <sect2 xml:id="migration84.incompatible.dom">
  <title>DOM</title>

  <simpara>
   一部のDOMメソッドは、新しいノードを割り当てられない場合、以前は
   &false; を返すか、<constant>DOM_PHP_ERR</constant> コードの
   <exceptionname>DOMException</exceptionname> をスローしていました。
   これらは現在、一貫して <constant>DOM_INVALID_STATE_ERR</constant> コードの
   <exceptionname>DOMException</exceptionname> をスローするようになりました。
   この状況は極めてまれであり、影響を受ける可能性は低いです。
   その結果、<methodname>DOMImplementation::createDocument</methodname> は、
   <!-- TODO: Use a proper union type for linkage -->
   戻り値の型が、以前の <code>DOMDocument|false</code> から
   <classname>DOMDocument</classname> になりました。
  </simpara>

  <simpara>
   以前は、<classname>DOMXPath</classname> オブジェクトをクローンできましたが、
   返されるオブジェクトは使用できませんでした。
   これはもはや可能ではなく、<classname>DOMXPath</classname> オブジェクトをクローンすると、
   <exceptionname>Error</exceptionname> がスローされるようになりました。
  </simpara>

  <!-- RFC: https://wiki.php.net/rfc/deprecations_php_8_4#remove_domimplementationgetfeature_feature_version -->
  <simpara>
   <methodname>DOMImplementation::getFeature</methodname> メソッドは削除されました。
  </simpara>
 </sect2>

 <sect2 xml:id="migration84.incompatible.gmp">
  <title>GMP</title>

  <!-- RFC: https://wiki.php.net/rfc/gmp-final -->
  <simpara>
   <classname>GMP</classname> クラスは final になり、継承できなくなりました。
  </simpara>
 </sect2>

 <sect2 xml:id="migration84.incompatible.mbstring">
  <title>MBString</title>

  <simpara>
   無効な文字列(エンコーディングエラーを含む)に対して、
   <function>mb_substr</function> は他の多くの mbstring 関数と同様に、
   文字インデックスを解釈するようになりました。
   これにより、<function>mb_strpos</function> が返す文字インデックスを
   <function>mb_substr</function> に渡すことができます。
  </simpara>

  <simpara>
   SJIS-Mac(MacJapanese) 文字列の場合、<function>mb_substr</function>
   に渡される文字インデックスは、文字列が Unicode に変換されたときに生成される
   Unicode コードポイントのインデックスを参照します。
   これは、 SJIS-Mac の約40文字が複数の Unicode コードポイントの
   シーケンスに変換されることによる重要な処理です。
  </simpara>
 </sect2>

 <sect2 xml:id="migration84.incompatible.mysqli">
  <title>MySQLi</title>

  <simpara>
   未使用でドキュメント化されていない定数
   <constant>MYSQLI_SET_CHARSET_DIR</constant> は削除されました。
  </simpara>

  <simpara>
   <constant>MYSQLI_STMT_ATTR_PREFETCH_ROWS</constant> 定数は削除されました。
   この機能は mysqlnd では利用できません。
  </simpara>

  <simpara>
   <constant>MYSQLI_CURSOR_TYPE_FOR_UPDATE</constant> および
   <constant>MYSQLI_CURSOR_TYPE_SCROLLABLE</constant> 定数は
   削除されました。この機能は mysqlnd および libmysql のどちらでも
   実装されていませんでした。
  </simpara>

  <simpara>
   未使用の <constant>MYSQLI_TYPE_INTERVAL</constant> 定数は、
   現在は <constant>MYSQLI_TYPE_ENUM</constant> のエイリアスであり、削除されました。
   <!-- There are no
  plans to add such data type to MySQL yet, so it's unclear what its value
  would finally be. -->
  </simpara>
 </sect2>

 <sect2 xml:id="migration84.incompatible.mysqlnd">
  <title>MySQLnd</title>

  <simpara>
   MySQL サーバーの待機タイムアウトに対して報告されるエラーコードは、
   MySQL サーバーバージョン 8.0.24 以降で
   <literal>2006</literal> から <literal>4031</literal> に変更されました。
  </simpara>
 </sect2>

 <sect2 xml:id="migration84.incompatible.opcache">
  <title>Opcache</title>

  <simpara>
   64ビットアーキテクチャ上での
   <link linkend="ini.opcache.interned-strings-buffer">opcache.interned_strings_buffer</link>
   設定の最大値は <literal>32767</literal> になりました。
   以前は <literal>4095</literal> でした。
  </simpara>

  <sect3>
   <title>JIT</title>

   <simpara>
    JIT のデフォルトの設定値は、
    <link linkend="ini.opcache.jit"><literal>opcache.jit=tracing</literal></link>
    および <link linkend="ini.opcache.jit-buffer-size"><literal>opcache.jit_buffer_size=0</literal></link>
    から、 <link linkend="ini.opcache.jit"><literal>opcache.jit=disable</literal></link> および
    <link linkend="ini.opcache.jit-buffer-size"><literal>opcache.jit_buffer_size=64M</literal></link> にそれぞれ変更されました。
   </simpara>

   <simpara>
    これはデフォルトの動作には影響しません。
    JIT は引き続きデフォルトで無効になっています。
    ただし、
    <link linkend="ini.opcache.jit-buffer-size">opcache.jit_buffer_size</link> ではなく、
    <link linkend="ini.opcache.jit">opcache.jit</link> を通じて無効化されています。
    これは、以前に
    <link linkend="ini.opcache.jit-buffer-size">opcache.jit_buffer_size</link>
    のみを使用して JIT を有効にし、
    <link linkend="ini.opcache.jit">opcache.jit</link>
    を使用してJIT モードを指定していなかったユーザーに影響を与える可能性があります。
    JIT コンパイルを有効にするには、
    <link linkend="ini.opcache.jit">opcache.jit</link> の設定値を適切に設定してください。
   </simpara>

   <simpara>
    <acronym>JIT</acronym> コンパイルが有効になっている場合、
    <acronym>JIT</acronym> コンパイラの初期化に何らかの理由で失敗すると、
    PHP は起動時に致命的なエラーで終了するようになりました。
   </simpara>
  </sect3>
 </sect2>

 <sect2 xml:id="migration84.incompatible.pcntl">
  <title>PCNTL</title>

  <simpara>
   <function>pcntl_sigprocmask</function>、
   <function>pcntl_sigwaitinfo</function>、
   および <function>pcntl_sigtimedwait</function> 関数は、
   失敗時に常に &false; を返すようになりました。
   以前は場合によっては <literal>-1</literal> を返すことがありました。
  </simpara>
 </sect2>

 <sect2 xml:id="migration84.incompatible.pcre">
  <title>PCRE</title>

  <simpara>
   バンドルされた pcre2lib はバージョン 10.44 に更新されました。
   その結果、<literal>{,3}</literal> はテキストとしてではなく
   量指定子として認識されるようになりました。
   さらに、UCP モードでの一部の文字クラスの意味が変更されました。
   完全な変更ログは <link xlink:href="https://github.com/PCRE2Project/pcre2/blob/master/NEWS">PCRE2 Changelog</link> を
   参照してください。
  </simpara>
 </sect2>

 <sect2 xml:id="migration84.incompatible.pdo-dblib">
  <title>PDO_DBLIB</title>

  <simpara>
   <constant>Pdo\Dblib::ATTR_STRINGIFY_UNIQUEIDENTIFIER</constant> および
   <constant>Pdo\Dblib::ATTR_DATETIME_CONVERT</constant> 属性は、
   整数属性の代わりにブール属性として動作するようになりました。
   したがって、<methodname>PDO::setAttribute</methodname> を介して属性を設定し、
   <methodname>PDO::getAttribute</methodname> を介して取得する場合、
   <type>bool</type> を期待または返却します。
  </simpara>
 </sect2>

 <sect2 xml:id="migration84.incompatible.pdo-firebird">
  <title>PDO_FIREBIRD</title>

  <simpara>
   <constant>PDO::ATTR_AUTOCOMMIT</constant> 属性は、
   整数属性の代わりにブール属性として動作するようになりました。
   したがって、<methodname>PDO::setAttribute</methodname> を介して属性を設定し、
   <methodname>PDO::getAttribute</methodname> を介して取得する場合、
   <type>bool</type> を期待または返却します。
  </simpara>

  <simpara>
   この拡張モジュールはいくつかの Firebird C++ API を公開するようになったため、
   この拡張モジュールをビルドするには C++ コンパイラが必要になりました。
   さらに、この拡張モジュールは fbclient 3.0 以上にでコンパイルする必要があります。
  </simpara>
 </sect2>

 <sect2 xml:id="migration84.incompatible.pdo-mysql">
  <title>PDO_MYSQL</title>

  <simpara>
   <constant>PDO::ATTR_AUTOCOMMIT</constant>、
   <constant>PDO::ATTR_EMULATE_PREPARES</constant>、
   <constant>PDO::MYSQL_ATTR_DIRECT_QUERY</constant> 属性は、
   整数属性の代わりにブール属性として動作するようになりました。
   したがって、<methodname>PDO::setAttribute</methodname> を介して属性を設定し、
   <methodname>PDO::getAttribute</methodname> を介して取得する場合、
   <type>bool</type> を期待または返却します。
  </simpara>
 </sect2>

 <sect2 xml:id="migration84.incompatible.pdo-pgsql">
  <title>PDO_PGSQL</title>

  <simpara>
   DSN に認証情報が設定されている場合、PDO コンストラクタの引数よりも優先されるようになり、
   ドキュメントの記述に近くなりました。
  </simpara>
 </sect2>

 <sect2 xml:id="migration84.incompatible.simplexml">
  <title>SimpleXML</title>

  <simpara>
   <classname>SimpleXMLElement</classname> は XML 要素の
   表現であるだけでなく、<classname>RecursiveIterator</classname> でもあります。
   PHP 8.4.0 より前では、一部のメソッド(例:
   <methodname>SimpleXMLElement::asXML</methodname> や
   <methodname>SimpleXMLElement::getName</methodname>)および
   それらのインスタンスの &string; へのキャストすると、
   暗黙的にイテレータをリセットしていました。
  </simpara>
  <para>
   これはイテレータが巻き戻されるため、予期しない無限ループを引き起こす可能性がありました。
   例えば:
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php

$xmlString = "<root><a><b>1</b><b>2</b><b>3</b></a></root>";
$xml = simplexml_load_string($xmlString);

$nodes = $xml->a->b;
foreach ($nodes as $nodeData) {
    echo "nodeData: " . $nodeData . "\n";

    $xml = $nodes->asXml();
}

]]>
    </programlisting>
    <simpara>
     これは無限ループを引き起こしていました。
    </simpara>
    <screen>
<![CDATA[
nodeData: 1
nodeData: 2
nodeData: 2
nodeData: 2
nodeData: 2
nodeData: 2
nodeData: 2
// ...
]]>
    </screen>
    <simpara>
     しかし、この動作は修正され、
     <classname>SimpleXMLElement</classname> は明示的に巻き戻されない限り、
     イテレータをリセットしなくなりました。
     つまり、前述の例は現在では次のようになります:
    </simpara>
    <screen>
<![CDATA[
nodeData: 1
nodeData: 2
nodeData: 3
]]>
    </screen>
   </informalexample>
  </para>
  <!-- This is no longer the case as a consequence of the bugfixes for GH-12192,GH-12208, #55098. -->
 </sect2>

 <sect2 xml:id="migration84.incompatible.soap">
  <title>SOAP</title>

  <simpara>
   <property>SoapClient::$typemap</property> は、<type>resource</type> ではなく
   <type>array</type> になりました。
   <function>is_resource</function> を使用したチェック
   （例: <code>is_resource($client->typemap)</code>)は、
   &null; かどうかのチェック（例: <code>$client->typemap !== null</code>）に置き換える必要があります。
  </simpara>

  <simpara>
   SOAP 拡張モジュールには、<link linkend="book.session">session</link> 拡張モジュールへの
   オプションの依存関係が追加されました。
   PHP が session 拡張モジュールなしでビルドされ、かつ
   <option>--enable-rtld-now</option> 構成フラグが有効になっている場合、
   <link linkend="book.soap">SOAP</link> 拡張モジュールも使用していると、
   起動時にエラーが発生します。
   これを解決するには、rtld-now を使用しないか、session 拡張モジュールを読み込んでください。
  </simpara>
 </sect2>

 <sect2 xml:id="migration84.incompatible.standard">
  <title>Standard</title>

  <simpara>
   <function>strcspn</function> で
   <parameter>characters</parameter> に空文字列を指定すると
   文字列の長さが返されるようになりました。
   以前は、最初のヌルバイトで誤って停止していました。
   <!-- See GH-12592 -->
  </simpara>

  <simpara>
   <function>http_build_query</function> は、Backed Enumを正しく処理するようになりました。
  </simpara>

  <!-- RFC: https://wiki.php.net/rfc/dedicated_stream_bucket -->
  <simpara>
   <function>stream_bucket_make_writeable</function> および
   <function>stream_bucket_new</function> は、
   <classname>stdClass</classname> のインスタンスではなく、
   <classname>StreamBucket</classname> のインスタンスを返すようになりました。
  </simpara>
 </sect2>

 <sect2 xml:id="migration84.incompatible.tidy">
  <title>Tidy</title>

  <simpara>
   コンストラクタでの失敗時に、警告を発して壊れたオブジェクトになるのではなく、
   例外をスローするようになりました。
  </simpara>
 </sect2>

 <sect2 xml:id="migration84.incompatible.xml">
  <title>XML</title>

  <simpara>
   <function>xml_set_<replaceable>*</replaceable>_handler</function>
   関数は、<parameter>handler</parameter> パラメータに対して
   <type class="union"><type>callable</type><type>string</type><type>null</type></type> の
   有効なシグネチャを宣言し、チェックするようになりました。
   さらに、<function>xml_set_object</function> で設定されたオブジェクトのメソッド名に対応する
   <type>string</type> 型の値は、事前に渡されたオブジェクトのクラス上にメソッドが存在するかどうかが
   チェックされるようになりました。
   従って、<function>xml_set_object</function> は、
   <type>callable</type> メソッドを設定する前に呼び出す必要があります。
   ハンドラを無効にするために空文字列を渡すことは引き続き許可されていますが、
   非推奨となりました。
  </simpara>

  <simpara>
   しかし、<function>xml_set_object</function> と
   <type>callable</type> でない文字列を渡すことは非推奨です。
   そのようなインスタンスをメソッドを直接参照する <type>callable</type> に
   変更することをお勧めします。
  </simpara>
 </sect2>

</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
