<?xml version="1.0" encoding="utf-8"?>
<sect1 xml:id="migration85.other-changes">
 <title>その他の変更</title>

 <sect2 xml:id="migration85.other-changes.core">
  <title>PHP コア</title>

  <sect3 xml:id="migration85.other-changes.core.core">
   <title>Core</title>

   <simpara>
    macOS における高精度なタイマー(<function>hrtime</function>)
    は、<code>mach_absolute_time()</code>
    ではなく、推奨されている
    <code>clock_gettime_nsec_np(CLOCK_UPTIME_RAW)</code>
    API を使うようになりました。
   </simpara>

  </sect3>

  <sect3 xml:id="migration85.other-changes.core.cgi-cli">
   <title>CGI/CLI</title>

   <simpara>
    <option>-z</option> や、
    <option>--zend-extension</option> オプションは、
    機能していないため削除されました。
    <option>-d zend_extension=[path]</option> を代わりに使ってください。
   </simpara>

  </sect3>

  <sect3 xml:id="migration85.other-changes.core.pdo-odbc">
   <title>PDO_ODBC</title>

   <simpara>
    大きなカラムのフェッチ動作が変更されました。
    256 バイトのブロックをフェッチする代わりに、
    PDO_ODBC はより大きなブロックサイズをフェッチしようとするようになります。
    現状このブロックサイズは、
    ページサイズから文字列オーバーヘッドを差し引いたサイズです。
    SQLGetData で SQL_NO_TOTAL を返すドライバも同様に、
    適切に処理されるようになります。
    この変更で、互換性とパフォーマンスが改善するはずです。
    <!-- See: GH-10809, GH-10733 -->
   </simpara>

  </sect3>

 </sect2>

 <sect2 xml:id="migration85.other-changes.sapi">
  <title>SAPI モジュールへの変更</title>

  <sect3 xml:id="migration85.other-changes.sapi.cli">
   <title>CLI</title>

   <simpara>
    <function>cli_set_process_title</function>
    に長過ぎるタイトルを設定しようとした場合、
    黙ってタイトルを切り詰めるのではなく、
    失敗するようになりました。
   </simpara>

   <simpara>
    ビルトインのデフォルト値から変更されている INI
    設定を出力するオプションとして、
    <option>--ini=diff</option> オプションが追加されました。
   </simpara>

  </sect3>

  <sect3 xml:id="migration85.other-changes.sapi.fpm">
   <title>FPM</title>

   <simpara>
    httpd ProxyPass を経由した FPM は、
    オプションでスクリプトの完全なパスをデコードします。
    この新しい振る舞いは、
    追加された fastcgi.script_path_encoded INI ディレクティブで抑止できます。
   </simpara>

   <simpara>
    FPM のログの長さの上限は、
    <literal>log_limit</literal> の値を尊重するようになりました。
   </simpara>

  </sect3>

 </sect2>

 <sect2 xml:id="migration85.other-changes.functions">
  <title>変更された関数</title>

  <sect3 xml:id="migration85.other-changes.functions.intl">
   <title>Intl</title>

   <simpara>
    クラスが初期化されていなかったり、
    clone が失敗した場合に、
    <methodname>IntlDateFormatter::setTimeZone</methodname>/<function>datefmt_set_timezone</function> は <classname>IntlException</classname>
    をスローするようになりました。
   </simpara>

   <simpara>
    <function>grapheme_extract</function> は、
    無効な開始バイトをスキップする際に <parameter>$next</parameter>
    の値を適切に割り当てるようになりました。
    これより前のバージョンでは、grapheme 境界の終端ではなく、
    先頭を指すケースがありました。
   </simpara>

   <simpara>
    <classname>Locale</classname> クラスのメソッドは、
    ロケールの入力に null バイトが含まれていた場合に
    <classname>ValueError</classname> をスローするようになりました。
   </simpara>

   <simpara>
    <function>transliterator_get_error_code</function>,
    <function>transliterator_get_error_message</function>,
    <methodname>TransLiterator::getErrorCode</methodname>,
    <methodname>TransLiterator::getErrorMessage</methodname> の戻り値の
    union 型から false を削除しました。
    &false; を返すことは実際には起こり得なかったからです。
   </simpara>

   <simpara>
    <function>grapheme_strpos</function>,
    <function>grapheme_stripos</function>,
    <function>grapheme_strrpos</function>,
    <function>grapheme_strripos</function>,
    <function>grapheme_substr</function>,
    <function>grapheme_strstr</function>,
    <function>grapheme_stristr</function>
    関数に <parameter>$locale</parameter> パラメータを追加しました。
    <!-- RFC: https://wiki.php.net/rfc/grapheme_add_locale_for_case_insensitive -->
   </simpara>

  </sect3>

  <sect3 xml:id="migration85.other-changes.functions.ldap">
   <title>LDAP</title>

   <simpara>
    <function>ldap_get_option</function> は、
    <function>ldap_set_option</function> と同様に、
    NULL の接続を受け付けるようになりました。
    これは、グローバルオプションを取得できるようにするためです。
   </simpara>

  </sect3>

  <sect3 xml:id="migration85.other-changes.functions.libxml">
   <title>libxml</title>

   <simpara>
    <function>libxml_set_external_entity_loader</function> は、
    戻り値の型を正式に <type>true</type> としました。
   </simpara>

  </sect3>

  <sect3 xml:id="migration85.other-changes.functions.openssl">
   <title>OpenSSL</title>

   <simpara>
    <function>openssl_public_encrypt</function> と
    <function>openssl_private_decrypt</function> は、
    OAEP パディング向けのハッシュダイジェストアルゴリズムを指定するために、
    新しく <parameter>$digest_algo</parameter>
    パラメータを設定できるようになりました。
   </simpara>

   <simpara>
    <function>openssl_sign</function> と
    <function>openssl_verify</function> は、
    よりセキュアな RSA PSS パディングを使えるようにするために、
    新しく <parameter>$padding</parameter>
    パラメータを設定できるようになりました。
   </simpara>

   <simpara>
    <function>openssl_cms_encrypt</function> の <parameter>$cipher_algo</parameter>
    パラメーターに、暗号名を示す文字列を指定できるようになりました。
    これによって、認証付きのエンベロープデータ向けに、
    AES GCM 暗号アルゴリズムを含むより多くのアルゴリズムを使えるようになります。
   </simpara>

  </sect3>

  <sect3 xml:id="migration85.other-changes.functions.pcntl">
   <title>PCNTL</title>

   <simpara>
    <function>pcntl_exec</function> は、
    戻り値の型を正式に <type>false</type> としました。
   </simpara>

   <simpara>
    <function>pcntl_waitid</function> は、
    子プロセスに関する様々なプラットフォーム固有のメトリクスを収集するため、
    追加で resource_usage 引数を受け取るようになりました。
   </simpara>

  </sect3>

  <sect3 xml:id="migration85.other-changes.functions.pdo-pgsql">
   <title>PDO_PGSQL</title>

   <simpara>
    <methodname>PDO::pgsqlCopyFromArray</methodname> は、
    Iterable の入力をサポートするようになりました。
   </simpara>

   <simpara>
    <methodname>Pdo\Pgsql::setAttribute</methodname> と
    <methodname>Pdo\Pgsql::prepare</methodname> は、
    lazy フェッチモードに入ることを示すために、
    <constant>PDO::ATTR_PREFETCH</constant> に 0 を設定できるようになりました。
    このモードの場合、Statement は並列に実行できません。
   </simpara>

  </sect3>

  <sect3 xml:id="migration85.other-changes.functions.pdo-sqlite">
   <title>PDO_SQLITE</title>

   <simpara>
    SQLite の <methodname>PDO::quote</methodname> は、
    文字列に null バイトが含まれていた場合に、
    エラーモードに応じて警告を発生させたり、例外をスローするようになりました。
   </simpara>

   <simpara>
    <methodname>PDO::sqliteCreateCollation</methodname> は、
    コールバック関数の戻り値の型が間違っている場合に、
    例外をスローするようになりました。
    この変更によって、
    <methodname>Pdo_Sqlite::createCollation</methodname>
    の動作とより一致するようになります。
   </simpara>

  </sect3>

  <sect3 xml:id="migration85.other-changes.functions.pgsql">
   <title>PostgreSQL</title>

   <simpara>
    <function>pg_copy_from</function> は、
    Iterable の入力をサポートするようになりました。
   </simpara>

   <simpara>
    <function>pg_connect</function> は、
    connection_string 引数に null
    バイトが含まれているかをチェックするようになりました。
   </simpara>

   <simpara>
    <function>pg_close_stmt</function> は、
    statement_name 引数に null
    バイトが含まれているかをチェックするようになりました。
   </simpara>

  </sect3>

  <sect3 xml:id="migration85.other-changes.functions.posix">
   <title>POSIX</title>

   <simpara>
    <function>posix_ttyname</function> は、
    ファイルディスクリプタが無効な場合に、
    last_error に EBADF を設定するようになりました。
   </simpara>

   <simpara>
    <function>posix_isatty</function> は、
    ファイルディスクリプタが無効な場合に、
    <constant>E_WARNING</constant> を発生させるようになりました。
   </simpara>

   <simpara>
    <function>posix_fpathconf</function> は、
    ファイルディスクリプタが無効かどうかをチェックし、
    無効な場合に last_error に EBADF を設定しつつ、
    <constant>E_WARNING</constant> を発生させるようになりました。
   </simpara>

   <simpara>
    <function>posix_kill</function> は、
    process_id 引数がプラットフォームがサポートする範囲
    (符号付きまたは long）より小さいか大きい場合に
    <classname>ValueError</classname> をスローします。

    <function>posix_setpgid</function> は、
    process_id または process_group_id が 0 未満、
    またはプラットフォームがサポートする範囲より大きい場合に
    <classname>ValueError</classname> をスローします。
   </simpara>

   <simpara>
    <function>posix_setrlimit</function> は、
    hard_limit または soft_limit 引数が -1 より小さい場合、
    または soft_limit が hard_limit より大きい場合に
    <classname>ValueError</classname> をスローします。
   </simpara>

  </sect3>

  <sect3 xml:id="migration85.other-changes.functions.reflection">
   <title>Reflection</title>

   <simpara>
    <methodname>ReflectionClass::__toString</methodname>
    の列挙型の出力について、
    クラスが列挙型であることをより明確に示すように変更されました。
    また、列挙型の case は通常のクラス定数ではなく、
    列挙型の case であることを示すようになりました。
   </simpara>

   <simpara>
    <methodname>ReflectionProperty::__toString</methodname> の、
    フックを持つプロパティの出力は、プロパティがどのフックを持つか、
    それらのフックが final かどうか、
    およびプロパティが仮想かどうかを示すように変更されました。
    これは、クラスがフックされたプロパティを含む場合の
    <methodname>ReflectionClass::__toString</methodname>の出力にも影響します。
   </simpara>

   <simpara>
    無効なターゲットにアトリビュートが適用された場合、
    <methodname>ReflectionAttribute::newInstance</methodname> は、
    内部的なアトリビュート向けに例外をスローするようになりました。
    #[\DelayedTargetValidation] を使うと、
    発生するエラーがコンパイル時から実行時に遅延されます。
    <!-- RFC: https://wiki.php.net/rfc/delayedtargetvalidation_attribute -->
   </simpara>

  </sect3>

  <sect3 xml:id="migration85.other-changes.functions.session">
   <title>Session</title>

   <simpara>
    <function>session_start</function> は、
    オプション引数をより厳格に扱うようになっています。
    配列が連想配列でない場合、
    <classname>ValueError</classname> がスローされます。
    read_and_close の値が int と互換性のない値の場合、
    <classname>TypeError</classname> がスローされます。
   </simpara>

  </sect3>

  <sect3 xml:id="migration85.other-changes.functions.snmp">
   <title>SNMP</title>

   <simpara>
    <function>snmpget</function>,
    <function>snmpset</function>,
    <function>snmp2_get</function>,
    <function>snmp2_set</function>,
    <function>snmp3_get</function>,
    <function>snmp3_set</function>
    <methodname>SNMP::__construct</methodname> は、
    <classname>ValueError</classname> をスローするようになりました。
    スローされるのは、ホスト名が長すぎたり、
    ホスト名が null バイトを含んでいたり、
    負の値や 65535 を超えるポート番号を指定したり、 
    タイムアウトやリトライの値が -1 より小さかったり、大きすぎたりする場合です。
   </simpara>

  </sect3>

  <sect3 xml:id="migration85.other-changes.functions.sockets">
   <title>Sockets</title>

   <simpara>
    <function>socket_create_listen</function>,
    <function>socket_bind</function>,
    <function>socket_sendto</function> は、
    ポートが 0 未満または 65535 を超える場合、
    または hints 配列のエントリが数値インデックスの場合に、
    <classname>ValueError</classname> をスローします。
   </simpara>

   <simpara>
    <function>socket_addrinfo_lookup</function> は、
    hints 値のいずれかが int 型にキャストできない場合に、
    <classname>TypeError</classname> をスローします。
    また、これらの値のいずれかがオーバーフローした場合、
    <classname>ValueError</classname> をスローする可能性があります。
   </simpara>

   <simpara>
    <function>socket_set_option</function> 関数で
    <constant>MCAST_LEAVE_GROUP</constant>/<constant>MCAST_LEAVE_SOURCE_GROUP</constant> を指定した場合、
    値が有効なオブジェクトまたは配列でない場合は例外がスローされます。
   </simpara>

   <simpara>
    <function>socket_create</function>/<function>socket_bind</function> は、
    <constant>AF_PACKET</constant>
    ファミリのソケットを作成できるようになりました。
   </simpara>

   <simpara>
    <function>socket_getsockname</function> は、
    <constant>AF_PACKET</constant> ソケットを指定すると、
    インターフェイスのインデックスとその文字列表現を取得します。
   </simpara>

   <simpara>
    <function>socket_set_option</function>
    をマルチキャストコンテキストで呼び出す場合、
    作成されたソケットが
    <constant>AF_INET</constant>/<constant>AF_INET6</constant>
    ファミリでない場合、<classname>ValueError</classname> がスローされます。
   </simpara>

  </sect3>

  <sect3 xml:id="migration85.other-changes.functions.tidy">
   <title>Tidy</title>

   <simpara>
    <methodname>tidy::__construct</methodname>,
    <methodname>tidy::parseFile</methodname>,
    <methodname>tidy::parseString</methodname> は、
    無効な設定値が含まれていたり、
    読み取り専用の内部エントリを設定しようとした場合に
    <classname>ValueError</classname> をスローするようになりました。
    設定キーが文字列でない場合は、
    <classname>TypeError</classname> がスローされるようになっています。
   </simpara>

  </sect3>

  <sect3 xml:id="migration85.other-changes.functions.zlib">
   <title>Zlib</title>

   <simpara>
    <function>gzfile</function>, <function>gzopen</function>,
    <function>readgzfile</function> 関数の
    <literal>"use_include_path"</literal> 引数の型が、
    <type>int</type> から <type>boolean</type> に変更されました。
   </simpara>

   <simpara>
    <function>gzfile</function>,
    <function>gzopen</function>,
    <function>readgzfile</function> 関数は、
    デフォルトのストリームコンテキストを尊重するようになりました。
   </simpara>

  </sect3>

 </sect2>

 <sect2 xml:id="migration85.other-changes.extensions">
  <title>拡張モジュールへのその他の変更</title>

  <sect3 xml:id="migration85.other-changes.extensions.curl">
   <title>cURL</title>

   <simpara>
    <function>curl_setopt</function> に指定する
    <constant>CURLOPT_FOLLOWLOCATION</constant> オプションの値が、
    boolean ではなく数値として扱われるようになりました。
    これは <constant>CURLFOLLOW_OBEYCODE</constant> と
    <constant>CURLFOLLOW_FIRSTONLY</constant> を処理するためです。
   </simpara>

  </sect3>

  <sect3 xml:id="migration85.other-changes.extensions.fileinfo">
   <title>Fileinfo</title>

   <simpara>
    file の magic データベースが、5.45 から 5.46 に更新されました。
   </simpara>

   <simpara>
    <function>finfo_close</function> の戻り値の型が、
    <type>bool</type> ではなく、<type>true</type> に変更されました。
   </simpara>

  </sect3>

  <sect3 xml:id="migration85.other-changes.extensions.intl">
   <title>Intl</title>

   <simpara>
    Intl の内部エラー処理機構がモダンになり、
    どの呼び出しがどのエラーを引き起こしたかを、
    より正確に示せるようになりました。
    さらに、一部の ext/date の例外は、
    <classname>IntlException</classname> でラップされるようになっています。
   </simpara>

  </sect3>

  <sect3 xml:id="migration85.other-changes.extensions.lexbor">
   <title>Lexbor</title>

   <simpara>
    lexbor 拡張モジュールが追加されました。
    これは常に有効になっています。
    他の拡張モジュールで再利用できるようにするため、
    <link linkend="book.dom">ext/dom</link>
    から分離された laxbor ライブラリが含まれています。
    この新しい拡張機能は、ユーザーランドに直接公開されません。
   </simpara>

  </sect3>

  <sect3 xml:id="migration85.other-changes.extensions.opcache">
   <title>Opcache</title>

   <simpara>
    <link linkend="book.opcache">Opcache 拡張モジュール</link> は、
    常に PHP バイナリに組み込まれ、ロードされるようになりました。
    <link linkend="ini.opcache.enable">opcache.enable</link> と
    <link linkend="ini.opcache.enable-cli">opcache.enable_cli</link>
    の設定はまだ有効です。
   </simpara>

  </sect3>

  <sect3 xml:id="migration85.other-changes.extensions.pcre">
   <title>PCRE</title>

   <simpara>
    pcre2lib が、10.44 から 10.46 に更新されました。
   </simpara>

  </sect3>

  <sect3 xml:id="migration85.other-changes.extensions.pdo-sqlite">
   <title>PDO_Sqlite</title>

   <simpara>
    サポートされる最低リリースバージョンが、
    3.7.7 から 3.7.17 に変更されました。
   </simpara>

  </sect3>

  <sect3 xml:id="migration85.other-changes.extensions.readline">
   <title>Readline</title>

   <simpara>
    <function>readline_add_history</function>,
    <function>readline_clear_history</function>,
    <function>readline_callback_handler_install</function>
    の戻り値の型が、
    <type>bool</type> から <type>true</type> に変更されました。
   </simpara>

  </sect3>

  <sect3 xml:id="migration85.other-changes.extensions.reflection">
   <title>Reflection</title>

   <simpara>
    <classname>ReflectionConstant</classname> クラスは、
    final ではなくなりました。
   </simpara>

  </sect3>

 </sect2>

 <sect2 xml:id="migration85.other-changes.ini">
  <title>INI ファイルの扱いの変更</title>

  <sect3 xml:id="migration85.other-changes.ini.core">
   <title>PHP コア</title>

   <simpara>
    致命的なエラーにバックトレースを含めるかどうかを制御するために、
    fatal_error_backtraces INI ディレクティブが追加されました。
    <!-- RFC: https://wiki.php.net/rfc/error_backtraces_v2 -->
   </simpara>

   <simpara>
    起動時にのみ有効な、max_memory_limit INI ディレクティブが追加されました。
    これは、起動時または実行時に設定可能な memory_limit の最大値を制御するためのものです。
    この値を超えると、-1 を設定しない限り警告が発生します。
    代わりに、memory_limit の値が、現在の max_memory_limit の値に設定されます。
    <!-- ML discussion: https://externals.io/message/127108 -->
   </simpara>

  </sect3>

  <sect3 xml:id="migration85.other-changes.ini.opcache">
   <title>Opcache</title>

   <simpara>
    <link linkend="ini.opcache.file-cache">opcache.file_cache</link>
    で指定されたディレクトリがが読み取り専用だった場合をサポートするために、
    opcache.file_cache_read_only が追加されました。
    これは、読み取り専用ファイルシステム(例：読み取り専用 Docker コンテナ)向けです。
    <literal>opcache.validate_timestamps=0</literal>,
    <literal>opcache.enable_file_override=1</literal>,
    <literal>opcache.file_cache_consistency_checks=0</literal>
    の組み合わせで使うことを推奨します。
   </simpara>

   <note>
    <para>
     異なるビルドのPHP、
     異なるファイルパス、
     異なる設定(ロードされる拡張機能を含む)で生成されたキャッシュは、
     無視される可能性があります。
    </para>
   </note>

   <simpara>
    <link linkend="ini.opcache.jit-hot-loop">opcache.jit_hot_loop</link>
    のデフォルト値は、ループ反復回数の倍数にならないように、
    61 (素数) に設定されました。
    このパラメータには、素数の値を設定することを推奨します。
   </simpara>

   <simpara>
    OPcache SHM が既にセットアップされている状態で、
    <link
    linkend="ini.opcache.memory-consumption">opcache.memory_consumption</link>
    の値を変更した場合に、正しく失敗を報告するようになりました。
    これより前のバージョンでは、黙って何もせず、
    PHPInfo で誤解を招く値を表示していました。
   </simpara>

  </sect3>

  <sect3 xml:id="migration85.other-changes.ini.openssl">
   <title>OpenSSL</title>

   <simpara>
    OpenSSL のライブラリコンテキストタイプを選択できるようにするため、
    openssl.libctx INI ディレクティブを追加しました。
    スレッドごとにカスタムの libctx を使うか、
    グローバルな、単一の libctx (デフォルト)を使えます。
   </simpara>

  </sect3>

 </sect2>

 <sect2 xml:id="migration85.other-changes.performance">
  <title>パフォーマンスに関わる変更</title>

  <sect3 xml:id="migration85.other-changes.performance.core">
   <title>PHP コア</title>

   <simpara>
    <code>match(true)</code> パターン向けに、
    boolean 値との同一性の比較に関する OPcode が削除されました。
   </simpara>

   <simpara>
    <code>=== []</code> と
    <code>!== []</code> による比較について、
    OPcode の特殊化処理が追加されました。
   </simpara>

   <simpara>
    例外オブジェクトを生成する速度が向上しました。
   </simpara>

   <simpara>
    SSE2 を使用していたコードは、
    ARM NEON による SIMD 命令も使うように調整されました。
   </simpara>

   <simpara>
    x86_64 または aarch64 アーキテクチャで Clang>=19 
    を使用してコンパイルする場合、
    デフォルトで有効となる TAILCALL VM を導入しました。
    TAILCALL VM は、
    GCC コンパイル時に使用される HYBRID VM と同等の速度を実現します。
    これにより、Clang>=19 でビルドされた PHP バイナリは、
    GCC でビルドされたバイナリと同等の速度を発揮します。
    他のコンパイラで使用される CALL VM のパフォーマンスも大幅に改善されました。
   </simpara>

  </sect3>

  <sect3 xml:id="migration85.other-changes.performance.intl">
   <title>Intl</title>

   <simpara>
    collator で文字列変換を行う際、余計な文字列コピーをしなくなりました。
   </simpara>

  </sect3>

  <sect3 xml:id="migration85.other-changes.performance.mbstring">
   <title>MBString</title>

   <simpara>
    SSE2 を使用していたコードは、
    ARM NEON による SIMD 命令も使うように調整されました。
   </simpara>

  </sect3>

  <sect3 xml:id="migration85.other-changes.performance.opcache">
   <title>Opcache</title>

   <simpara>
    Glibc 以外のビルドで JIT コンパイルされたコード中で、
    TLS 変数のフェッチ処理のパフォーマンスが向上しました。
   </simpara>

  </sect3>

  <sect3 xml:id="migration85.other-changes.performance.reflection">
   <title>Reflection</title>

   <para>
    以下のメソッドのパフォーマンスが向上しました:
    <simplelist>
     <member><methodname>ReflectionProperty::getValue</methodname></member>
     <member><methodname>ReflectionProperty::getRawValue</methodname></member>
     <member><methodname>ReflectionProperty::isInitialized</methodname></member>
     <member><methodname>ReflectionProperty::isInitialized</methodname></member>
     <member><methodname>ReflectionProperty::setValue</methodname></member>
     <member><methodname>ReflectionProperty::setRawValue</methodname></member>
    </simplelist>
   </para>

  </sect3>

  <sect3 xml:id="migration85.other-changes.performance.spl">
   <title>SPL</title>

   <simpara>
    <classname>SplFixedArray</classname> の、
    多次元のアクセス処理と、メソッドのパフォーマンスが向上しました。
   </simpara>

  </sect3>

  <sect3 xml:id="migration85.other-changes.performance.standard">
   <title>Standard</title>

   <simpara>
    コールバックを指定した場合の、配列関数
    (<function>array_find</function>, <function>array_filter</function>,
    <function>array_map</function>, <function>usort</function>, ...)
    のパフォーマンスが向上しました。
   </simpara>

   <simpara>
    <function>urlencode</function> と
    <function>rawurlencode</function> のパフォーマンスが向上しました。
   </simpara>

   <simpara>
    一時的な文字列の生成と再パースを回避することで、
    <function>unpack</function> の、
    名前を付けない反復処理のパフォーマンスが向上しました。
   </simpara>

   <simpara>
    <function>pack</function> のパフォーマンスが向上しました。
   </simpara>

   <simpara>
    <function>array_chunk</function> のパフォーマンスが少し向上しました。
   </simpara>

  </sect3>

  <sect3 xml:id="migration85.other-changes.performance.xml">
   <title>XML</title>

   <simpara>
    <classname>XMLReader</classname> の、
    プロパティアクセスのパフォーマンスが向上しました。
   </simpara>

   <simpara>
    <classname>XMLWriter</classname> のパフォーマンスが向上し、
    メモリ使用量が削減されました。
   </simpara>

  </sect3>

 </sect2>

</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
